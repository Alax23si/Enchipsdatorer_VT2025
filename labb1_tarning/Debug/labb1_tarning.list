
labb1_tarning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003f7c  08003f7c  00004f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b8  080040b8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c0  080040c0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c0  080040c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080040c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08004130  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004130  00006260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a933  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1f  00000000  00000000  000109cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  000123f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073c  00000000  00000000  00012d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022394  00000000  00000000  000134ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b096  00000000  00000000  00035840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc972  00000000  00000000  000408d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f38  00000000  00000000  0010d28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001101c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f64 	.word	0x08003f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003f64 	.word	0x08003f64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <put_on_sseg>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const uint16_t sseg[10] = {0x5F, 0x06, 0x9B, 0x8F, 0xC6, 0xCD, 0xDC, 0X87, 0XDF, 0XC7};
const uint16_t sseg_err = 0x19C;

void put_on_sseg(uint8_t dec_nbr){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	if(dec_nbr < 0 || dec_nbr > 9){
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d904      	bls.n	80005b6 <put_on_sseg+0x1a>
		GPIOC->ODR = sseg_err;
 80005ac:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <put_on_sseg+0x30>)
 80005b2:	615a      	str	r2, [r3, #20]
		return;
 80005b4:	e005      	b.n	80005c2 <put_on_sseg+0x26>
	}
	GPIOC->ODR = sseg[dec_nbr];
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <put_on_sseg+0x34>)
 80005ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005be:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <put_on_sseg+0x30>)
 80005c0:	615a      	str	r2, [r3, #20]
}
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	48000800 	.word	0x48000800
 80005d0:	08003f7c 	.word	0x08003f7c

080005d4 <is_blue_button_pressed>:

// returns 1 if b button is pressed
//reutrns 0 if not
int is_blue_button_pressed(){
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	return GPIOC->IDR;
 80005d8:	4b03      	ldr	r3, [pc, #12]	@ (80005e8 <is_blue_button_pressed+0x14>)
 80005da:	691b      	ldr	r3, [r3, #16]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	48000800 	.word	0x48000800

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb1d 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f843 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8c3 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f891 	bl	8000724 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(HAL_GetTick());
 8000602:	f000 fb85 	bl	8000d10 <HAL_GetTick>
 8000606:	4603      	mov	r3, r0
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fca1 	bl	8002f50 <srand>
  int pressed = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  uint8_t die_value = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pressed = is_blue_button_pressed();
 8000616:	f7ff ffdd 	bl	80005d4 <is_blue_button_pressed>
 800061a:	60b8      	str	r0, [r7, #8]
	  	  if(pressed){
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d016      	beq.n	8000650 <main+0x64>
	  		  HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000628:	4813      	ldr	r0, [pc, #76]	@ (8000678 <main+0x8c>)
 800062a:	f000 fddd 	bl	80011e8 <HAL_GPIO_WritePin>
	  		  die_value = (rand()%9)+1;
 800062e:	f002 fcbd 	bl	8002fac <rand>
 8000632:	4602      	mov	r2, r0
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <main+0x90>)
 8000636:	fb83 1302 	smull	r1, r3, r3, r2
 800063a:	1059      	asrs	r1, r3, #1
 800063c:	17d3      	asrs	r3, r2, #31
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	460b      	mov	r3, r1
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	440b      	add	r3, r1
 8000646:	1ad1      	subs	r1, r2, r3
 8000648:	b2cb      	uxtb	r3, r1
 800064a:	3301      	adds	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e7e2      	b.n	8000616 <main+0x2a>
	  	  }
	  	  else{

	  		  GPIO_TypeDef* ld4_gpio = GPIOB;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <main+0x8c>)
 8000652:	607b      	str	r3, [r7, #4]
	  		  uint16_t ld4_pin_nbr = 13;
 8000654:	230d      	movs	r3, #13
 8000656:	807b      	strh	r3, [r7, #2]
	  		  uint16_t ld4_pin = 0x01 << ld4_pin_nbr;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	2201      	movs	r2, #1
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	803b      	strh	r3, [r7, #0]
	  		  HAL_GPIO_WritePin(ld4_gpio,ld4_pin, GPIO_PIN_RESET);
 8000662:	883b      	ldrh	r3, [r7, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fdbd 	bl	80011e8 <HAL_GPIO_WritePin>
	  		  //put_die_dots(die_value);
	  		  put_on_sseg(die_value);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff93 	bl	800059c <put_on_sseg>
	  pressed = is_blue_button_pressed();
 8000676:	e7ce      	b.n	8000616 <main+0x2a>
 8000678:	48000400 	.word	0x48000400
 800067c:	38e38e39 	.word	0x38e38e39

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	@ 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	@ 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fdcf 	bl	8003232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f000 fdc5 	bl	8001234 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b0:	f000 f908 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ce:	230a      	movs	r3, #10
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fdfc 	bl	80012e0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ee:	f000 f8e9 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f9fc 	bl	8001b08 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000716:	f000 f8d5 	bl	80008c4 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3758      	adds	r7, #88	@ 0x58
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	@ (8000780 <MX_USART2_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART2_UART_Init+0x58>)
 8000768:	f001 ff2e 	bl	80025c8 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f8a7 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b47      	ldr	r3, [pc, #284]	@ (80008b8 <MX_GPIO_Init+0x134>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a46      	ldr	r2, [pc, #280]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b44      	ldr	r3, [pc, #272]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b41      	ldr	r3, [pc, #260]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a40      	ldr	r2, [pc, #256]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b3e      	ldr	r3, [pc, #248]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b3b      	ldr	r3, [pc, #236]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a3a      	ldr	r2, [pc, #232]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a34      	ldr	r2, [pc, #208]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <MX_GPIO_Init+0x134>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007fa:	2200      	movs	r2, #0
 80007fc:	f240 11df 	movw	r1, #479	@ 0x1df
 8000800:	482e      	ldr	r0, [pc, #184]	@ (80008bc <MX_GPIO_Init+0x138>)
 8000802:	f000 fcf1 	bl	80011e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	21b0      	movs	r1, #176	@ 0xb0
 800080a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080e:	f000 fceb 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_A_Pin|DI_B_Pin|DI_C_Pin|DI_D_Pin
 8000812:	2200      	movs	r2, #0
 8000814:	f64e 4107 	movw	r1, #60423	@ 0xec07
 8000818:	4829      	ldr	r0, [pc, #164]	@ (80008c0 <MX_GPIO_Init+0x13c>)
 800081a:	f000 fce5 	bl	80011e8 <HAL_GPIO_WritePin>
                          |DI_E_Pin|LD4_Pin|DI_F_Pin|DI_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4821      	ldr	r0, [pc, #132]	@ (80008bc <MX_GPIO_Init+0x138>)
 8000836:	f000 fb5d 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800083a:	f240 13df 	movw	r3, #479	@ 0x1df
 800083e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	481a      	ldr	r0, [pc, #104]	@ (80008bc <MX_GPIO_Init+0x138>)
 8000854:	f000 fb4e 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000858:	23b0      	movs	r3, #176	@ 0xb0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 fb3f 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000876:	2340      	movs	r3, #64	@ 0x40
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088c:	f000 fb32 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_A_Pin DI_B_Pin DI_C_Pin DI_D_Pin
                           DI_E_Pin LD4_Pin DI_F_Pin DI_G_Pin */
  GPIO_InitStruct.Pin = DI_A_Pin|DI_B_Pin|DI_C_Pin|DI_D_Pin
 8000890:	f64e 4307 	movw	r3, #60423	@ 0xec07
 8000894:	617b      	str	r3, [r7, #20]
                          |DI_E_Pin|LD4_Pin|DI_F_Pin|DI_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_GPIO_Init+0x13c>)
 80008aa:	f000 fb23 	bl	8000ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000800 	.word	0x48000800
 80008c0:	48000400 	.word	0x48000400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0a2      	sub	sp, #136	@ 0x88
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2260      	movs	r2, #96	@ 0x60
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fc7a 	bl	8003232 <memset>
  if(huart->Instance==USART2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <HAL_UART_MspInit+0xac>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d138      	bne.n	80009ba <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fafb 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ffb0 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_UART_MspInit+0xb0>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000968:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0xb0>)
 800096a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_UART_MspInit+0xb0>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_UART_MspInit+0xb0>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	4a11      	ldr	r2, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0xb0>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_UART_MspInit+0xb0>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000994:	230c      	movs	r3, #12
 8000996:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b6:	f000 fa9d 	bl	8000ef4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ba:	bf00      	nop
 80009bc:	3788      	adds	r7, #136	@ 0x88
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 f961 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_kill>:

int _kill(int pid, int sig)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a44:	f002 fc44 	bl	80032d0 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2216      	movs	r2, #22
 8000a4c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_exit>:

void _exit (int status)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a62:	f04f 31ff 	mov.w	r1, #4294967295
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffe7 	bl	8000a3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <_exit+0x12>

08000a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f002 fba8 	bl	80032d0 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000c000 	.word	0x2000c000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	2000010c 	.word	0x2000010c
 8000bb4:	20000260 	.word	0x20000260

08000bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 fb67 	bl	80032dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fced 	bl	80005ec <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c20:	080040c8 	.word	0x080040c8
  ldr r2, =_sbss
 8000c24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c28:	20000260 	.word	0x20000260

08000c2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <HAL_Init+0x3c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <HAL_Init+0x3c>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c46:	2003      	movs	r0, #3
 8000c48:	f000 f920 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f80f 	bl	8000c70 <HAL_InitTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	e001      	b.n	8000c62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c5e:	f7ff fe37 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d023      	beq.n	8000ccc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_InitTick+0x70>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_InitTick+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f91d 	bl	8000eda <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10f      	bne.n	8000cc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d809      	bhi.n	8000cc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f8f5 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_InitTick+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e001      	b.n	8000cd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000110 	.word	0x20000110

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000110 	.word	0x20000110

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	@ (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	@ (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	@ 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	@ 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff47 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5c 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e154      	b.n	80011ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8146 	beq.w	80011a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80a0 	beq.w	80011a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <HAL_GPIO_Init+0x2d8>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106c:	4a57      	ldr	r2, [pc, #348]	@ (80011cc <HAL_GPIO_Init+0x2d8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6613      	str	r3, [r2, #96]	@ 0x60
 8001074:	4b55      	ldr	r3, [pc, #340]	@ (80011cc <HAL_GPIO_Init+0x2d8>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a53      	ldr	r2, [pc, #332]	@ (80011d0 <HAL_GPIO_Init+0x2dc>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <HAL_GPIO_Init+0x2e0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1e8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a48      	ldr	r2, [pc, #288]	@ (80011d8 <HAL_GPIO_Init+0x2e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <HAL_GPIO_Init+0x2e8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a46      	ldr	r2, [pc, #280]	@ (80011e0 <HAL_GPIO_Init+0x2ec>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1dc>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e008      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	@ (80011d0 <HAL_GPIO_Init+0x2dc>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b38      	ldr	r3, [pc, #224]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112a:	4b2e      	ldr	r3, [pc, #184]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a25      	ldr	r2, [pc, #148]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4a1a      	ldr	r2, [pc, #104]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a2:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <HAL_GPIO_Init+0x2f0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aea3 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e002      	b.n	800120c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <HAL_PWREx_GetVoltageRange+0x18>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40007000 	.word	0x40007000

08001234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001242:	d130      	bne.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001244:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800124c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001250:	d038      	beq.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800125a:	4a1e      	ldr	r2, [pc, #120]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2232      	movs	r2, #50	@ 0x32
 8001268:	fb02 f303 	mul.w	r3, r2, r3
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9b      	lsrs	r3, r3, #18
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001278:	e002      	b.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3b01      	subs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128c:	d102      	bne.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x60>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f2      	bne.n	800127a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800129c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a0:	d110      	bne.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e00f      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b2:	d007      	beq.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012bc:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40007000 	.word	0x40007000
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f000 bc02 	b.w	8001af8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f4:	4b96      	ldr	r3, [pc, #600]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012fe:	4b94      	ldr	r3, [pc, #592]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80e4 	beq.w	80014de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <HAL_RCC_OscConfig+0x4c>
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b0c      	cmp	r3, #12
 8001320:	f040 808b 	bne.w	800143a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b01      	cmp	r3, #1
 8001328:	f040 8087 	bne.w	800143a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132c:	4b88      	ldr	r3, [pc, #544]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x64>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e3d9      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	4b81      	ldr	r3, [pc, #516]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_RCC_OscConfig+0x7e>
 8001354:	4b7e      	ldr	r3, [pc, #504]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800135c:	e005      	b.n	800136a <HAL_RCC_OscConfig+0x8a>
 800135e:	4b7c      	ldr	r3, [pc, #496]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800136a:	4293      	cmp	r3, r2
 800136c:	d223      	bcs.n	80013b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fd8c 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e3ba      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001382:	4b73      	ldr	r3, [pc, #460]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a72      	ldr	r2, [pc, #456]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b70      	ldr	r3, [pc, #448]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	496d      	ldr	r1, [pc, #436]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	4968      	ldr	r1, [pc, #416]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e025      	b.n	8001402 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b6:	4b66      	ldr	r3, [pc, #408]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a65      	ldr	r2, [pc, #404]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b63      	ldr	r3, [pc, #396]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4960      	ldr	r1, [pc, #384]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	495b      	ldr	r1, [pc, #364]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fd4c 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e37a      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001402:	f000 fc81 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001406:	4602      	mov	r2, r0
 8001408:	4b51      	ldr	r3, [pc, #324]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	4950      	ldr	r1, [pc, #320]	@ (8001554 <HAL_RCC_OscConfig+0x274>)
 8001414:	5ccb      	ldrb	r3, [r1, r3]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	4a4e      	ldr	r2, [pc, #312]	@ (8001558 <HAL_RCC_OscConfig+0x278>)
 8001420:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001422:	4b4e      	ldr	r3, [pc, #312]	@ (800155c <HAL_RCC_OscConfig+0x27c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fc22 	bl	8000c70 <HAL_InitTick>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d052      	beq.n	80014dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	e35e      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d032      	beq.n	80014a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001442:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a42      	ldr	r2, [pc, #264]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800144e:	f7ff fc5f 	bl	8000d10 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001456:	f7ff fc5b 	bl	8000d10 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e347      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001468:	4b39      	ldr	r3, [pc, #228]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001474:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a35      	ldr	r2, [pc, #212]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4930      	ldr	r1, [pc, #192]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	492b      	ldr	r1, [pc, #172]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
 80014a6:	e01a      	b.n	80014de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014a8:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a28      	ldr	r2, [pc, #160]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc2c 	bl	8000d10 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc28 	bl	8000d10 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e314      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1dc>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d073      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x21c>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d10e      	bne.n	8001514 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d10b      	bne.n	8001514 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d063      	beq.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d15f      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e2f1      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x24c>
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e025      	b.n	8001578 <HAL_RCC_OscConfig+0x298>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001534:	d114      	bne.n	8001560 <HAL_RCC_OscConfig+0x280>
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a02      	ldr	r2, [pc, #8]	@ (8001550 <HAL_RCC_OscConfig+0x270>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e013      	b.n	8001578 <HAL_RCC_OscConfig+0x298>
 8001550:	40021000 	.word	0x40021000
 8001554:	08003f90 	.word	0x08003f90
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004
 8001560:	4ba0      	ldr	r3, [pc, #640]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a9f      	ldr	r2, [pc, #636]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b9d      	ldr	r3, [pc, #628]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a9c      	ldr	r2, [pc, #624]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fbc6 	bl	8000d10 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fbc2 	bl	8000d10 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e2ae      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159a:	4b92      	ldr	r3, [pc, #584]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x2a8>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fbb2 	bl	8000d10 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fbae 	bl	8000d10 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e29a      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c2:	4b88      	ldr	r3, [pc, #544]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2d0>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d060      	beq.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_OscConfig+0x310>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d119      	bne.n	800161e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d116      	bne.n	800161e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	4b7c      	ldr	r3, [pc, #496]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x328>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e277      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b76      	ldr	r3, [pc, #472]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	061b      	lsls	r3, r3, #24
 8001616:	4973      	ldr	r1, [pc, #460]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800161c:	e040      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d023      	beq.n	800166e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001626:	4b6f      	ldr	r3, [pc, #444]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a6e      	ldr	r2, [pc, #440]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fb6d 	bl	8000d10 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fb69 	bl	8000d10 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e255      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164c:	4b65      	ldr	r3, [pc, #404]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b62      	ldr	r3, [pc, #392]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	495f      	ldr	r1, [pc, #380]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e018      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166e:	4b5d      	ldr	r3, [pc, #372]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a5c      	ldr	r2, [pc, #368]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fb49 	bl	8000d10 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fb45 	bl	8000d10 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e231      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001694:	4b53      	ldr	r3, [pc, #332]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d03c      	beq.n	8001726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01c      	beq.n	80016ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b4:	4b4b      	ldr	r3, [pc, #300]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ba:	4a4a      	ldr	r2, [pc, #296]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fb24 	bl	8000d10 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fb20 	bl	8000d10 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e20c      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016de:	4b41      	ldr	r3, [pc, #260]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ef      	beq.n	80016cc <HAL_RCC_OscConfig+0x3ec>
 80016ec:	e01b      	b.n	8001726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ee:	4b3d      	ldr	r3, [pc, #244]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f4:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb07 	bl	8000d10 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fb03 	bl	8000d10 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1ef      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001718:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ef      	bne.n	8001706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80a6 	beq.w	8001880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001738:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10d      	bne.n	8001760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001748:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175c:	2301      	movs	r3, #1
 800175e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_RCC_OscConfig+0x508>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d118      	bne.n	800179e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800176c:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_RCC_OscConfig+0x508>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	@ (80017e8 <HAL_RCC_OscConfig+0x508>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001778:	f7ff faca 	bl	8000d10 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7ff fac6 	bl	8000d10 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1b2      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_RCC_OscConfig+0x508>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d108      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4d8>
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80017a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b6:	e029      	b.n	800180c <HAL_RCC_OscConfig+0x52c>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d115      	bne.n	80017ec <HAL_RCC_OscConfig+0x50c>
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a07      	ldr	r2, [pc, #28]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	4a03      	ldr	r2, [pc, #12]	@ (80017e4 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x52c>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40007000 	.word	0x40007000
 80017ec:	4b9a      	ldr	r3, [pc, #616]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f2:	4a99      	ldr	r2, [pc, #612]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017fc:	4b96      	ldr	r3, [pc, #600]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	4a95      	ldr	r2, [pc, #596]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d016      	beq.n	8001842 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff fa7c 	bl	8000d10 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181a:	e00a      	b.n	8001832 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7ff fa78 	bl	8000d10 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e162      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001832:	4b89      	ldr	r3, [pc, #548]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ed      	beq.n	800181c <HAL_RCC_OscConfig+0x53c>
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff fa65 	bl	8000d10 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff fa61 	bl	8000d10 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e14b      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001860:	4b7d      	ldr	r3, [pc, #500]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ed      	bne.n	800184a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800186e:	7ffb      	ldrb	r3, [r7, #31]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b78      	ldr	r3, [pc, #480]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	4a77      	ldr	r2, [pc, #476]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 800187a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03c      	beq.n	8001906 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01c      	beq.n	80018ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001894:	4b70      	ldr	r3, [pc, #448]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800189a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fa34 	bl	8000d10 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ac:	f7ff fa30 	bl	8000d10 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e11c      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018be:	4b66      	ldr	r3, [pc, #408]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80018c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ef      	beq.n	80018ac <HAL_RCC_OscConfig+0x5cc>
 80018cc:	e01b      	b.n	8001906 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ce:	4b62      	ldr	r3, [pc, #392]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80018d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d4:	4a60      	ldr	r2, [pc, #384]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa17 	bl	8000d10 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e6:	f7ff fa13 	bl	8000d10 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0ff      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f8:	4b57      	ldr	r3, [pc, #348]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80018fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80f3 	beq.w	8001af6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	2b02      	cmp	r3, #2
 8001916:	f040 80c9 	bne.w	8001aac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800191a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	429a      	cmp	r2, r3
 800192c:	d12c      	bne.n	8001988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001938:	3b01      	subs	r3, #1
 800193a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d123      	bne.n	8001988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d11b      	bne.n	8001988 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d113      	bne.n	8001988 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d109      	bne.n	8001988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	3b01      	subs	r3, #1
 8001982:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d06b      	beq.n	8001a60 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d062      	beq.n	8001a54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0ac      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800199e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80019a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019aa:	f7ff f9b1 	bl	8000d10 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff f9ad 	bl	8000d10 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e099      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <HAL_RCC_OscConfig+0x77c>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019ea:	0212      	lsls	r2, r2, #8
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019f2:	0852      	lsrs	r2, r2, #1
 80019f4:	3a01      	subs	r2, #1
 80019f6:	0552      	lsls	r2, r2, #21
 80019f8:	4311      	orrs	r1, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019fe:	0852      	lsrs	r2, r2, #1
 8001a00:	3a01      	subs	r2, #1
 8001a02:	0652      	lsls	r2, r2, #25
 8001a04:	4311      	orrs	r1, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a0a:	06d2      	lsls	r2, r2, #27
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	4912      	ldr	r1, [pc, #72]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a14:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a2c:	f7ff f970 	bl	8000d10 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f96c 	bl	8000d10 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e058      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <HAL_RCC_OscConfig+0x778>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a52:	e050      	b.n	8001af6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e04f      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d144      	bne.n	8001af6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a84:	f7ff f944 	bl	8000d10 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f940 	bl	8000d10 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e02c      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x7ac>
 8001aaa:	e024      	b.n	8001af6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d01f      	beq.n	8001af2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f927 	bl	8000d10 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f923 	bl	8000d10 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e00f      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	4905      	ldr	r1, [pc, #20]	@ (8001b00 <HAL_RCC_OscConfig+0x820>)
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_RCC_OscConfig+0x824>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
 8001af0:	e001      	b.n	8001af6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	feeefffc 	.word	0xfeeefffc

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0e7      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b75      	ldr	r3, [pc, #468]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d910      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b72      	ldr	r3, [pc, #456]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0207 	bic.w	r2, r3, #7
 8001b32:	4970      	ldr	r1, [pc, #448]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0cf      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d010      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b66      	ldr	r3, [pc, #408]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d908      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b63      	ldr	r3, [pc, #396]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4960      	ldr	r1, [pc, #384]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d04c      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d121      	bne.n	8001bde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0a6      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	4b54      	ldr	r3, [pc, #336]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d115      	bne.n	8001bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e09a      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e08e      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bce:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e086      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bde:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 0203 	bic.w	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4943      	ldr	r1, [pc, #268]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f88e 	bl	8000d10 <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7ff f88a 	bl	8000d10 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e06e      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 020c 	and.w	r2, r3, #12
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1eb      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d208      	bcs.n	8001c4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	492b      	ldr	r1, [pc, #172]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4e:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d210      	bcs.n	8001c7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 0207 	bic.w	r2, r3, #7
 8001c64:	4923      	ldr	r1, [pc, #140]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e036      	b.n	8001cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4918      	ldr	r1, [pc, #96]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4910      	ldr	r1, [pc, #64]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cbc:	f000 f824 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	490b      	ldr	r1, [pc, #44]	@ (8001cfc <HAL_RCC_ClockConfig+0x1f4>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd8:	4a09      	ldr	r2, [pc, #36]	@ (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_ClockConfig+0x1fc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ffc5 	bl	8000c70 <HAL_InitTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cea:	7afb      	ldrb	r3, [r7, #11]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003f90 	.word	0x08003f90
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b3e      	ldr	r3, [pc, #248]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d20:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x34>
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d121      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d11e      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d3c:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d48:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e005      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d64:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	e004      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d8c:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d134      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0xa6>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d003      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dac:	e005      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db0:	617b      	str	r3, [r7, #20]
      break;
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001db6:	617b      	str	r3, [r7, #20]
      break;
 8001db8:	e002      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	617b      	str	r3, [r7, #20]
      break;
 8001dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	3301      	adds	r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	fb03 f202 	mul.w	r2, r3, r2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	0e5b      	lsrs	r3, r3, #25
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	3301      	adds	r3, #1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e00:	69bb      	ldr	r3, [r7, #24]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08003fa8 	.word	0x08003fa8
 8001e18:	00f42400 	.word	0x00f42400
 8001e1c:	007a1200 	.word	0x007a1200

08001e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e3c:	f7ff fff0 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4904      	ldr	r1, [pc, #16]	@ (8001e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08003fa0 	.word	0x08003fa0

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e68:	f7ff ffda 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0adb      	lsrs	r3, r3, #11
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4904      	ldr	r1, [pc, #16]	@ (8001e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08003fa0 	.word	0x08003fa0

08001e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea8:	f7ff f9b6 	bl	8001218 <HAL_PWREx_GetVoltageRange>
 8001eac:	6178      	str	r0, [r7, #20]
 8001eae:	e014      	b.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	4a24      	ldr	r2, [pc, #144]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec8:	f7ff f9a6 	bl	8001218 <HAL_PWREx_GetVoltageRange>
 8001ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee0:	d10b      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	@ 0x80
 8001ee6:	d919      	bls.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eec:	d902      	bls.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eee:	2302      	movs	r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e013      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e010      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	@ 0x80
 8001efe:	d902      	bls.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f00:	2303      	movs	r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e00a      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b80      	cmp	r3, #128	@ 0x80
 8001f0a:	d102      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e004      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b70      	cmp	r3, #112	@ 0x70
 8001f16:	d101      	bne.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0207 	bic.w	r2, r3, #7
 8001f24:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d031      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f74:	d01a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f7a:	d814      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f84:	d10f      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f86:	4b5d      	ldr	r3, [pc, #372]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f92:	e00c      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fa22 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa4:	e003      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8001faa:	e000      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb4:	4b51      	ldr	r3, [pc, #324]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	494e      	ldr	r1, [pc, #312]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fca:	e001      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 809e 	beq.w	800211a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fe2:	4b46      	ldr	r3, [pc, #280]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00d      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002002:	6593      	str	r3, [r2, #88]	@ 0x58
 8002004:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002010:	2301      	movs	r3, #1
 8002012:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a39      	ldr	r2, [pc, #228]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002020:	f7fe fe76 	bl	8000d10 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002026:	e009      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe fe72 	bl	8000d10 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d902      	bls.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	74fb      	strb	r3, [r7, #19]
        break;
 800203a:	e005      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203c:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d15a      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204e:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002058:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01e      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	429a      	cmp	r2, r3
 8002068:	d019      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002074:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002096:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fe32 	bl	8000d10 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	e00b      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe fe2e 	bl	8000d10 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d902      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	74fb      	strb	r3, [r7, #19]
            break;
 80020c6:	e006      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ec      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	4904      	ldr	r1, [pc, #16]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
 80020f8:	e006      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b8d      	ldr	r3, [pc, #564]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	4a8c      	ldr	r2, [pc, #560]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002126:	4b87      	ldr	r3, [pc, #540]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4983      	ldr	r1, [pc, #524]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002148:	4b7e      	ldr	r3, [pc, #504]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 020c 	bic.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	497b      	ldr	r1, [pc, #492]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800216a:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	4972      	ldr	r1, [pc, #456]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218c:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	496a      	ldr	r1, [pc, #424]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	4961      	ldr	r1, [pc, #388]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4959      	ldr	r1, [pc, #356]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f2:	4b54      	ldr	r3, [pc, #336]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	4950      	ldr	r1, [pc, #320]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002214:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	4948      	ldr	r1, [pc, #288]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	493f      	ldr	r1, [pc, #252]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d028      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002258:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002266:	4937      	ldr	r1, [pc, #220]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800227e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002282:	60d3      	str	r3, [r2, #12]
 8002284:	e011      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800228e:	d10c      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f8a4 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d028      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	491f      	ldr	r1, [pc, #124]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d4:	d106      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e0:	60d3      	str	r3, [r2, #12]
 80022e2:	e011      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f875 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02b      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002332:	d109      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a02      	ldr	r2, [pc, #8]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233e:	60d3      	str	r3, [r2, #12]
 8002340:	e014      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002350:	d10c      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f843 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01c      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002396:	d10c      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f820 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	4904      	ldr	r1, [pc, #16]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000

080023e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f2:	4b74      	ldr	r3, [pc, #464]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d018      	beq.n	8002430 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023fe:	4b71      	ldr	r3, [pc, #452]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d10d      	bne.n	800242a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
       ||
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002416:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
       ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d047      	beq.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e044      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d018      	beq.n	800246a <RCCEx_PLLSAI1_Config+0x86>
 8002438:	2b03      	cmp	r3, #3
 800243a:	d825      	bhi.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d002      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x62>
 8002440:	2b02      	cmp	r3, #2
 8002442:	d009      	beq.n	8002458 <RCCEx_PLLSAI1_Config+0x74>
 8002444:	e020      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002446:	4b5f      	ldr	r3, [pc, #380]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e01a      	b.n	800248e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002458:	4b5a      	ldr	r3, [pc, #360]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d116      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e013      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800246a:	4b56      	ldr	r3, [pc, #344]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002476:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002486:	e006      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e004      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248e:	bf00      	nop
 8002490:	e002      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002496:	bf00      	nop
    }

    if(status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800249e:	4b49      	ldr	r3, [pc, #292]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	430b      	orrs	r3, r1
 80024b4:	4943      	ldr	r1, [pc, #268]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d17c      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fc20 	bl	8000d10 <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d2:	e009      	b.n	80024e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d4:	f7fe fc1c 	bl	8000d10 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	73fb      	strb	r3, [r7, #15]
        break;
 80024e6:	e005      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ef      	bne.n	80024d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d15f      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d110      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002508:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	0211      	lsls	r1, r2, #8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	06d2      	lsls	r2, r2, #27
 8002518:	430a      	orrs	r2, r1
 800251a:	492a      	ldr	r1, [pc, #168]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
 8002520:	e027      	b.n	8002572 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d112      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002528:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002530:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	0211      	lsls	r1, r2, #8
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6912      	ldr	r2, [r2, #16]
 800253e:	0852      	lsrs	r2, r2, #1
 8002540:	3a01      	subs	r2, #1
 8002542:	0552      	lsls	r2, r2, #21
 8002544:	430a      	orrs	r2, r1
 8002546:	491f      	ldr	r1, [pc, #124]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
 800254c:	e011      	b.n	8002572 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002556:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	0211      	lsls	r1, r2, #8
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6952      	ldr	r2, [r2, #20]
 8002564:	0852      	lsrs	r2, r2, #1
 8002566:	3a01      	subs	r2, #1
 8002568:	0652      	lsls	r2, r2, #25
 800256a:	430a      	orrs	r2, r1
 800256c:	4915      	ldr	r1, [pc, #84]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800257c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fbc7 	bl	8000d10 <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002584:	e009      	b.n	800259a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002586:	f7fe fbc3 	bl	8000d10 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d902      	bls.n	800259a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	73fb      	strb	r3, [r7, #15]
          break;
 8002598:	e005      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ef      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4903      	ldr	r1, [pc, #12]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e040      	b.n	800265c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe f994 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	@ 0x24
 80025f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa82 	bl	8002b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f825 	bl	8002664 <UART_SetConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e01b      	b.n	800265c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fb01 	bl	8002c5c <UART_CheckIdleState>
 800265a:	4603      	mov	r3, r0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002668:	b08a      	sub	sp, #40	@ 0x28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	431a      	orrs	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4313      	orrs	r3, r2
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b9e      	ldr	r3, [pc, #632]	@ (800290c <UART_SetConfig+0x2a8>)
 8002694:	4013      	ands	r3, r2
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800269c:	430b      	orrs	r3, r1
 800269e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a93      	ldr	r2, [pc, #588]	@ (8002910 <UART_SetConfig+0x2ac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	4313      	orrs	r3, r2
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a8a      	ldr	r2, [pc, #552]	@ (8002914 <UART_SetConfig+0x2b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d126      	bne.n	800273c <UART_SetConfig+0xd8>
 80026ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002918 <UART_SetConfig+0x2b4>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d81b      	bhi.n	8002734 <UART_SetConfig+0xd0>
 80026fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <UART_SetConfig+0xa0>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002715 	.word	0x08002715
 8002708:	08002725 	.word	0x08002725
 800270c:	0800271d 	.word	0x0800271d
 8002710:	0800272d 	.word	0x0800272d
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800271a:	e0ab      	b.n	8002874 <UART_SetConfig+0x210>
 800271c:	2302      	movs	r3, #2
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002722:	e0a7      	b.n	8002874 <UART_SetConfig+0x210>
 8002724:	2304      	movs	r3, #4
 8002726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800272a:	e0a3      	b.n	8002874 <UART_SetConfig+0x210>
 800272c:	2308      	movs	r3, #8
 800272e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002732:	e09f      	b.n	8002874 <UART_SetConfig+0x210>
 8002734:	2310      	movs	r3, #16
 8002736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800273a:	e09b      	b.n	8002874 <UART_SetConfig+0x210>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a76      	ldr	r2, [pc, #472]	@ (800291c <UART_SetConfig+0x2b8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d138      	bne.n	80027b8 <UART_SetConfig+0x154>
 8002746:	4b74      	ldr	r3, [pc, #464]	@ (8002918 <UART_SetConfig+0x2b4>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d82d      	bhi.n	80027b0 <UART_SetConfig+0x14c>
 8002754:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <UART_SetConfig+0xf8>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002791 	.word	0x08002791
 8002760:	080027b1 	.word	0x080027b1
 8002764:	080027b1 	.word	0x080027b1
 8002768:	080027b1 	.word	0x080027b1
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027b1 	.word	0x080027b1
 8002774:	080027b1 	.word	0x080027b1
 8002778:	080027b1 	.word	0x080027b1
 800277c:	08002799 	.word	0x08002799
 8002780:	080027b1 	.word	0x080027b1
 8002784:	080027b1 	.word	0x080027b1
 8002788:	080027b1 	.word	0x080027b1
 800278c:	080027a9 	.word	0x080027a9
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002796:	e06d      	b.n	8002874 <UART_SetConfig+0x210>
 8002798:	2302      	movs	r3, #2
 800279a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800279e:	e069      	b.n	8002874 <UART_SetConfig+0x210>
 80027a0:	2304      	movs	r3, #4
 80027a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027a6:	e065      	b.n	8002874 <UART_SetConfig+0x210>
 80027a8:	2308      	movs	r3, #8
 80027aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ae:	e061      	b.n	8002874 <UART_SetConfig+0x210>
 80027b0:	2310      	movs	r3, #16
 80027b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027b6:	e05d      	b.n	8002874 <UART_SetConfig+0x210>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a58      	ldr	r2, [pc, #352]	@ (8002920 <UART_SetConfig+0x2bc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d125      	bne.n	800280e <UART_SetConfig+0x1aa>
 80027c2:	4b55      	ldr	r3, [pc, #340]	@ (8002918 <UART_SetConfig+0x2b4>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80027cc:	2b30      	cmp	r3, #48	@ 0x30
 80027ce:	d016      	beq.n	80027fe <UART_SetConfig+0x19a>
 80027d0:	2b30      	cmp	r3, #48	@ 0x30
 80027d2:	d818      	bhi.n	8002806 <UART_SetConfig+0x1a2>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d00a      	beq.n	80027ee <UART_SetConfig+0x18a>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d814      	bhi.n	8002806 <UART_SetConfig+0x1a2>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <UART_SetConfig+0x182>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d008      	beq.n	80027f6 <UART_SetConfig+0x192>
 80027e4:	e00f      	b.n	8002806 <UART_SetConfig+0x1a2>
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027ec:	e042      	b.n	8002874 <UART_SetConfig+0x210>
 80027ee:	2302      	movs	r3, #2
 80027f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027f4:	e03e      	b.n	8002874 <UART_SetConfig+0x210>
 80027f6:	2304      	movs	r3, #4
 80027f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80027fc:	e03a      	b.n	8002874 <UART_SetConfig+0x210>
 80027fe:	2308      	movs	r3, #8
 8002800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002804:	e036      	b.n	8002874 <UART_SetConfig+0x210>
 8002806:	2310      	movs	r3, #16
 8002808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800280c:	e032      	b.n	8002874 <UART_SetConfig+0x210>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3f      	ldr	r2, [pc, #252]	@ (8002910 <UART_SetConfig+0x2ac>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d12a      	bne.n	800286e <UART_SetConfig+0x20a>
 8002818:	4b3f      	ldr	r3, [pc, #252]	@ (8002918 <UART_SetConfig+0x2b4>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002826:	d01a      	beq.n	800285e <UART_SetConfig+0x1fa>
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800282c:	d81b      	bhi.n	8002866 <UART_SetConfig+0x202>
 800282e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002832:	d00c      	beq.n	800284e <UART_SetConfig+0x1ea>
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002838:	d815      	bhi.n	8002866 <UART_SetConfig+0x202>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <UART_SetConfig+0x1e2>
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002842:	d008      	beq.n	8002856 <UART_SetConfig+0x1f2>
 8002844:	e00f      	b.n	8002866 <UART_SetConfig+0x202>
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800284c:	e012      	b.n	8002874 <UART_SetConfig+0x210>
 800284e:	2302      	movs	r3, #2
 8002850:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002854:	e00e      	b.n	8002874 <UART_SetConfig+0x210>
 8002856:	2304      	movs	r3, #4
 8002858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800285c:	e00a      	b.n	8002874 <UART_SetConfig+0x210>
 800285e:	2308      	movs	r3, #8
 8002860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002864:	e006      	b.n	8002874 <UART_SetConfig+0x210>
 8002866:	2310      	movs	r3, #16
 8002868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800286c:	e002      	b.n	8002874 <UART_SetConfig+0x210>
 800286e:	2310      	movs	r3, #16
 8002870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a25      	ldr	r2, [pc, #148]	@ (8002910 <UART_SetConfig+0x2ac>)
 800287a:	4293      	cmp	r3, r2
 800287c:	f040 808a 	bne.w	8002994 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002884:	2b08      	cmp	r3, #8
 8002886:	d824      	bhi.n	80028d2 <UART_SetConfig+0x26e>
 8002888:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <UART_SetConfig+0x22c>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	080028b5 	.word	0x080028b5
 8002894:	080028d3 	.word	0x080028d3
 8002898:	080028bd 	.word	0x080028bd
 800289c:	080028d3 	.word	0x080028d3
 80028a0:	080028c3 	.word	0x080028c3
 80028a4:	080028d3 	.word	0x080028d3
 80028a8:	080028d3 	.word	0x080028d3
 80028ac:	080028d3 	.word	0x080028d3
 80028b0:	080028cb 	.word	0x080028cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b4:	f7ff fac0 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 80028b8:	61f8      	str	r0, [r7, #28]
        break;
 80028ba:	e010      	b.n	80028de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028bc:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <UART_SetConfig+0x2c0>)
 80028be:	61fb      	str	r3, [r7, #28]
        break;
 80028c0:	e00d      	b.n	80028de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c2:	f7ff fa21 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 80028c6:	61f8      	str	r0, [r7, #28]
        break;
 80028c8:	e009      	b.n	80028de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028ce:	61fb      	str	r3, [r7, #28]
        break;
 80028d0:	e005      	b.n	80028de <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80028dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8109 	beq.w	8002af8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d305      	bcc.n	8002902 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d912      	bls.n	8002928 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002908:	e0f6      	b.n	8002af8 <UART_SetConfig+0x494>
 800290a:	bf00      	nop
 800290c:	efff69f3 	.word	0xefff69f3
 8002910:	40008000 	.word	0x40008000
 8002914:	40013800 	.word	0x40013800
 8002918:	40021000 	.word	0x40021000
 800291c:	40004400 	.word	0x40004400
 8002920:	40004800 	.word	0x40004800
 8002924:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2200      	movs	r2, #0
 800292c:	461c      	mov	r4, r3
 800292e:	4615      	mov	r5, r2
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	022b      	lsls	r3, r5, #8
 800293a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800293e:	0222      	lsls	r2, r4, #8
 8002940:	68f9      	ldr	r1, [r7, #12]
 8002942:	6849      	ldr	r1, [r1, #4]
 8002944:	0849      	lsrs	r1, r1, #1
 8002946:	2000      	movs	r0, #0
 8002948:	4688      	mov	r8, r1
 800294a:	4681      	mov	r9, r0
 800294c:	eb12 0a08 	adds.w	sl, r2, r8
 8002950:	eb43 0b09 	adc.w	fp, r3, r9
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002962:	4650      	mov	r0, sl
 8002964:	4659      	mov	r1, fp
 8002966:	f7fd fc83 	bl	8000270 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4613      	mov	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002978:	d308      	bcc.n	800298c <UART_SetConfig+0x328>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002980:	d204      	bcs.n	800298c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e0b5      	b.n	8002af8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002992:	e0b1      	b.n	8002af8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299c:	d15d      	bne.n	8002a5a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800299e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d827      	bhi.n	80029f6 <UART_SetConfig+0x392>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <UART_SetConfig+0x348>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029d1 	.word	0x080029d1
 80029b0:	080029d9 	.word	0x080029d9
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029f7 	.word	0x080029f7
 80029bc:	080029e7 	.word	0x080029e7
 80029c0:	080029f7 	.word	0x080029f7
 80029c4:	080029f7 	.word	0x080029f7
 80029c8:	080029f7 	.word	0x080029f7
 80029cc:	080029ef 	.word	0x080029ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029d0:	f7ff fa32 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 80029d4:	61f8      	str	r0, [r7, #28]
        break;
 80029d6:	e014      	b.n	8002a02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff fa44 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80029dc:	61f8      	str	r0, [r7, #28]
        break;
 80029de:	e010      	b.n	8002a02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b14 <UART_SetConfig+0x4b0>)
 80029e2:	61fb      	str	r3, [r7, #28]
        break;
 80029e4:	e00d      	b.n	8002a02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e6:	f7ff f98f 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 80029ea:	61f8      	str	r0, [r7, #28]
        break;
 80029ec:	e009      	b.n	8002a02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f2:	61fb      	str	r3, [r7, #28]
        break;
 80029f4:	e005      	b.n	8002a02 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d077      	beq.n	8002af8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005a      	lsls	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d916      	bls.n	8002a52 <UART_SetConfig+0x3ee>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2a:	d212      	bcs.n	8002a52 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f023 030f 	bic.w	r3, r3, #15
 8002a34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	8afb      	ldrh	r3, [r7, #22]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	8afa      	ldrh	r2, [r7, #22]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	e052      	b.n	8002af8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002a58:	e04e      	b.n	8002af8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d827      	bhi.n	8002ab2 <UART_SetConfig+0x44e>
 8002a62:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <UART_SetConfig+0x404>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002a8d 	.word	0x08002a8d
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	08002a9d 	.word	0x08002a9d
 8002a74:	08002ab3 	.word	0x08002ab3
 8002a78:	08002aa3 	.word	0x08002aa3
 8002a7c:	08002ab3 	.word	0x08002ab3
 8002a80:	08002ab3 	.word	0x08002ab3
 8002a84:	08002ab3 	.word	0x08002ab3
 8002a88:	08002aab 	.word	0x08002aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8c:	f7ff f9d4 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8002a90:	61f8      	str	r0, [r7, #28]
        break;
 8002a92:	e014      	b.n	8002abe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7ff f9e6 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 8002a98:	61f8      	str	r0, [r7, #28]
        break;
 8002a9a:	e010      	b.n	8002abe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <UART_SetConfig+0x4b0>)
 8002a9e:	61fb      	str	r3, [r7, #28]
        break;
 8002aa0:	e00d      	b.n	8002abe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7ff f931 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8002aa6:	61f8      	str	r0, [r7, #28]
        break;
 8002aa8:	e009      	b.n	8002abe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aae:	61fb      	str	r3, [r7, #28]
        break;
 8002ab0:	e005      	b.n	8002abe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002abc:	bf00      	nop
    }

    if (pclk != 0U)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d019      	beq.n	8002af8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	085a      	lsrs	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	441a      	add	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	d909      	bls.n	8002af2 <UART_SetConfig+0x48e>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae4:	d205      	bcs.n	8002af2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	e002      	b.n	8002af8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3728      	adds	r7, #40	@ 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	00f42400 	.word	0x00f42400

08002b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01a      	beq.n	8002c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c16:	d10a      	bne.n	8002c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b098      	sub	sp, #96	@ 0x60
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c6c:	f7fe f850 	bl	8000d10 <HAL_GetTick>
 8002c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d12e      	bne.n	8002cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f88c 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d021      	beq.n	8002cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e6      	bne.n	8002c9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e062      	b.n	8002da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d149      	bne.n	8002d80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f856 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03c      	beq.n	8002d80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	623b      	str	r3, [r7, #32]
   return(result);
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e6      	bne.n	8002d06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3308      	adds	r3, #8
 8002d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d58:	61fa      	str	r2, [r7, #28]
 8002d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	617b      	str	r3, [r7, #20]
   return(result);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e011      	b.n	8002da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3758      	adds	r7, #88	@ 0x58
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	e04f      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d04b      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fd ffa3 	bl	8000d10 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e04e      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d037      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b80      	cmp	r3, #128	@ 0x80
 8002df2:	d034      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b40      	cmp	r3, #64	@ 0x40
 8002df8:	d031      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d110      	bne.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f838 	bl	8002e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e029      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e38:	d111      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f81e 	bl	8002e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e00f      	b.n	8002e7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d0a0      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b095      	sub	sp, #84	@ 0x54
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e6      	bne.n	8002e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3308      	adds	r3, #8
 8002ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d118      	bne.n	8002f2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f023 0310 	bic.w	r3, r3, #16
 8002f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6979      	ldr	r1, [r7, #20]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	613b      	str	r3, [r7, #16]
   return(result);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e6      	bne.n	8002efc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f42:	bf00      	nop
 8002f44:	3754      	adds	r7, #84	@ 0x54
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <srand>:
 8002f50:	b538      	push	{r3, r4, r5, lr}
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <srand+0x44>)
 8002f54:	681d      	ldr	r5, [r3, #0]
 8002f56:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002f58:	4604      	mov	r4, r0
 8002f5a:	b9b3      	cbnz	r3, 8002f8a <srand+0x3a>
 8002f5c:	2018      	movs	r0, #24
 8002f5e:	f000 fa4d 	bl	80033fc <malloc>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6328      	str	r0, [r5, #48]	@ 0x30
 8002f66:	b920      	cbnz	r0, 8002f72 <srand+0x22>
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <srand+0x48>)
 8002f6a:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <srand+0x4c>)
 8002f6c:	2146      	movs	r1, #70	@ 0x46
 8002f6e:	f000 f9dd 	bl	800332c <__assert_func>
 8002f72:	490b      	ldr	r1, [pc, #44]	@ (8002fa0 <srand+0x50>)
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <srand+0x54>)
 8002f76:	e9c0 1300 	strd	r1, r3, [r0]
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <srand+0x58>)
 8002f7c:	6083      	str	r3, [r0, #8]
 8002f7e:	230b      	movs	r3, #11
 8002f80:	8183      	strh	r3, [r0, #12]
 8002f82:	2100      	movs	r1, #0
 8002f84:	2001      	movs	r0, #1
 8002f86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002f8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611c      	str	r4, [r3, #16]
 8002f90:	615a      	str	r2, [r3, #20]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20000018 	.word	0x20000018
 8002f98:	08003fd8 	.word	0x08003fd8
 8002f9c:	08003fef 	.word	0x08003fef
 8002fa0:	abcd330e 	.word	0xabcd330e
 8002fa4:	e66d1234 	.word	0xe66d1234
 8002fa8:	0005deec 	.word	0x0005deec

08002fac <rand>:
 8002fac:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <rand+0x5c>)
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	681c      	ldr	r4, [r3, #0]
 8002fb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fb4:	b9b3      	cbnz	r3, 8002fe4 <rand+0x38>
 8002fb6:	2018      	movs	r0, #24
 8002fb8:	f000 fa20 	bl	80033fc <malloc>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6320      	str	r0, [r4, #48]	@ 0x30
 8002fc0:	b920      	cbnz	r0, 8002fcc <rand+0x20>
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <rand+0x60>)
 8002fc4:	4812      	ldr	r0, [pc, #72]	@ (8003010 <rand+0x64>)
 8002fc6:	2152      	movs	r1, #82	@ 0x52
 8002fc8:	f000 f9b0 	bl	800332c <__assert_func>
 8002fcc:	4911      	ldr	r1, [pc, #68]	@ (8003014 <rand+0x68>)
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <rand+0x6c>)
 8002fd0:	e9c0 1300 	strd	r1, r3, [r0]
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <rand+0x70>)
 8002fd6:	6083      	str	r3, [r0, #8]
 8002fd8:	230b      	movs	r3, #11
 8002fda:	8183      	strh	r3, [r0, #12]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2001      	movs	r0, #1
 8002fe0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002fe4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002fe6:	480e      	ldr	r0, [pc, #56]	@ (8003020 <rand+0x74>)
 8002fe8:	690b      	ldr	r3, [r1, #16]
 8002fea:	694c      	ldr	r4, [r1, #20]
 8002fec:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <rand+0x78>)
 8002fee:	4358      	muls	r0, r3
 8002ff0:	fb02 0004 	mla	r0, r2, r4, r0
 8002ff4:	fba3 3202 	umull	r3, r2, r3, r2
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	eb40 0002 	adc.w	r0, r0, r2
 8002ffe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003002:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003006:	bd10      	pop	{r4, pc}
 8003008:	20000018 	.word	0x20000018
 800300c:	08003fd8 	.word	0x08003fd8
 8003010:	08003fef 	.word	0x08003fef
 8003014:	abcd330e 	.word	0xabcd330e
 8003018:	e66d1234 	.word	0xe66d1234
 800301c:	0005deec 	.word	0x0005deec
 8003020:	5851f42d 	.word	0x5851f42d
 8003024:	4c957f2d 	.word	0x4c957f2d

08003028 <std>:
 8003028:	2300      	movs	r3, #0
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
 800302e:	e9c0 3300 	strd	r3, r3, [r0]
 8003032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003036:	6083      	str	r3, [r0, #8]
 8003038:	8181      	strh	r1, [r0, #12]
 800303a:	6643      	str	r3, [r0, #100]	@ 0x64
 800303c:	81c2      	strh	r2, [r0, #14]
 800303e:	6183      	str	r3, [r0, #24]
 8003040:	4619      	mov	r1, r3
 8003042:	2208      	movs	r2, #8
 8003044:	305c      	adds	r0, #92	@ 0x5c
 8003046:	f000 f8f4 	bl	8003232 <memset>
 800304a:	4b0d      	ldr	r3, [pc, #52]	@ (8003080 <std+0x58>)
 800304c:	6263      	str	r3, [r4, #36]	@ 0x24
 800304e:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <std+0x5c>)
 8003050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <std+0x60>)
 8003054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <std+0x64>)
 8003058:	6323      	str	r3, [r4, #48]	@ 0x30
 800305a:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <std+0x68>)
 800305c:	6224      	str	r4, [r4, #32]
 800305e:	429c      	cmp	r4, r3
 8003060:	d006      	beq.n	8003070 <std+0x48>
 8003062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003066:	4294      	cmp	r4, r2
 8003068:	d002      	beq.n	8003070 <std+0x48>
 800306a:	33d0      	adds	r3, #208	@ 0xd0
 800306c:	429c      	cmp	r4, r3
 800306e:	d105      	bne.n	800307c <std+0x54>
 8003070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003078:	f000 b954 	b.w	8003324 <__retarget_lock_init_recursive>
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	080031ad 	.word	0x080031ad
 8003084:	080031cf 	.word	0x080031cf
 8003088:	08003207 	.word	0x08003207
 800308c:	0800322b 	.word	0x0800322b
 8003090:	20000114 	.word	0x20000114

08003094 <stdio_exit_handler>:
 8003094:	4a02      	ldr	r2, [pc, #8]	@ (80030a0 <stdio_exit_handler+0xc>)
 8003096:	4903      	ldr	r1, [pc, #12]	@ (80030a4 <stdio_exit_handler+0x10>)
 8003098:	4803      	ldr	r0, [pc, #12]	@ (80030a8 <stdio_exit_handler+0x14>)
 800309a:	f000 b869 	b.w	8003170 <_fwalk_sglue>
 800309e:	bf00      	nop
 80030a0:	2000000c 	.word	0x2000000c
 80030a4:	08003671 	.word	0x08003671
 80030a8:	2000001c 	.word	0x2000001c

080030ac <cleanup_stdio>:
 80030ac:	6841      	ldr	r1, [r0, #4]
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <cleanup_stdio+0x34>)
 80030b0:	4299      	cmp	r1, r3
 80030b2:	b510      	push	{r4, lr}
 80030b4:	4604      	mov	r4, r0
 80030b6:	d001      	beq.n	80030bc <cleanup_stdio+0x10>
 80030b8:	f000 fada 	bl	8003670 <_fflush_r>
 80030bc:	68a1      	ldr	r1, [r4, #8]
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <cleanup_stdio+0x38>)
 80030c0:	4299      	cmp	r1, r3
 80030c2:	d002      	beq.n	80030ca <cleanup_stdio+0x1e>
 80030c4:	4620      	mov	r0, r4
 80030c6:	f000 fad3 	bl	8003670 <_fflush_r>
 80030ca:	68e1      	ldr	r1, [r4, #12]
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <cleanup_stdio+0x3c>)
 80030ce:	4299      	cmp	r1, r3
 80030d0:	d004      	beq.n	80030dc <cleanup_stdio+0x30>
 80030d2:	4620      	mov	r0, r4
 80030d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d8:	f000 baca 	b.w	8003670 <_fflush_r>
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	bf00      	nop
 80030e0:	20000114 	.word	0x20000114
 80030e4:	2000017c 	.word	0x2000017c
 80030e8:	200001e4 	.word	0x200001e4

080030ec <global_stdio_init.part.0>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <global_stdio_init.part.0+0x30>)
 80030f0:	4c0b      	ldr	r4, [pc, #44]	@ (8003120 <global_stdio_init.part.0+0x34>)
 80030f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003124 <global_stdio_init.part.0+0x38>)
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	4620      	mov	r0, r4
 80030f8:	2200      	movs	r2, #0
 80030fa:	2104      	movs	r1, #4
 80030fc:	f7ff ff94 	bl	8003028 <std>
 8003100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003104:	2201      	movs	r2, #1
 8003106:	2109      	movs	r1, #9
 8003108:	f7ff ff8e 	bl	8003028 <std>
 800310c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003110:	2202      	movs	r2, #2
 8003112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003116:	2112      	movs	r1, #18
 8003118:	f7ff bf86 	b.w	8003028 <std>
 800311c:	2000024c 	.word	0x2000024c
 8003120:	20000114 	.word	0x20000114
 8003124:	08003095 	.word	0x08003095

08003128 <__sfp_lock_acquire>:
 8003128:	4801      	ldr	r0, [pc, #4]	@ (8003130 <__sfp_lock_acquire+0x8>)
 800312a:	f000 b8fc 	b.w	8003326 <__retarget_lock_acquire_recursive>
 800312e:	bf00      	nop
 8003130:	20000255 	.word	0x20000255

08003134 <__sfp_lock_release>:
 8003134:	4801      	ldr	r0, [pc, #4]	@ (800313c <__sfp_lock_release+0x8>)
 8003136:	f000 b8f7 	b.w	8003328 <__retarget_lock_release_recursive>
 800313a:	bf00      	nop
 800313c:	20000255 	.word	0x20000255

08003140 <__sinit>:
 8003140:	b510      	push	{r4, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	f7ff fff0 	bl	8003128 <__sfp_lock_acquire>
 8003148:	6a23      	ldr	r3, [r4, #32]
 800314a:	b11b      	cbz	r3, 8003154 <__sinit+0x14>
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003150:	f7ff bff0 	b.w	8003134 <__sfp_lock_release>
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__sinit+0x28>)
 8003156:	6223      	str	r3, [r4, #32]
 8003158:	4b04      	ldr	r3, [pc, #16]	@ (800316c <__sinit+0x2c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f5      	bne.n	800314c <__sinit+0xc>
 8003160:	f7ff ffc4 	bl	80030ec <global_stdio_init.part.0>
 8003164:	e7f2      	b.n	800314c <__sinit+0xc>
 8003166:	bf00      	nop
 8003168:	080030ad 	.word	0x080030ad
 800316c:	2000024c 	.word	0x2000024c

08003170 <_fwalk_sglue>:
 8003170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003174:	4607      	mov	r7, r0
 8003176:	4688      	mov	r8, r1
 8003178:	4614      	mov	r4, r2
 800317a:	2600      	movs	r6, #0
 800317c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003180:	f1b9 0901 	subs.w	r9, r9, #1
 8003184:	d505      	bpl.n	8003192 <_fwalk_sglue+0x22>
 8003186:	6824      	ldr	r4, [r4, #0]
 8003188:	2c00      	cmp	r4, #0
 800318a:	d1f7      	bne.n	800317c <_fwalk_sglue+0xc>
 800318c:	4630      	mov	r0, r6
 800318e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003192:	89ab      	ldrh	r3, [r5, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d907      	bls.n	80031a8 <_fwalk_sglue+0x38>
 8003198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800319c:	3301      	adds	r3, #1
 800319e:	d003      	beq.n	80031a8 <_fwalk_sglue+0x38>
 80031a0:	4629      	mov	r1, r5
 80031a2:	4638      	mov	r0, r7
 80031a4:	47c0      	blx	r8
 80031a6:	4306      	orrs	r6, r0
 80031a8:	3568      	adds	r5, #104	@ 0x68
 80031aa:	e7e9      	b.n	8003180 <_fwalk_sglue+0x10>

080031ac <__sread>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	460c      	mov	r4, r1
 80031b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b4:	f000 f868 	bl	8003288 <_read_r>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	bfab      	itete	ge
 80031bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031be:	89a3      	ldrhlt	r3, [r4, #12]
 80031c0:	181b      	addge	r3, r3, r0
 80031c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031c6:	bfac      	ite	ge
 80031c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031ca:	81a3      	strhlt	r3, [r4, #12]
 80031cc:	bd10      	pop	{r4, pc}

080031ce <__swrite>:
 80031ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d2:	461f      	mov	r7, r3
 80031d4:	898b      	ldrh	r3, [r1, #12]
 80031d6:	05db      	lsls	r3, r3, #23
 80031d8:	4605      	mov	r5, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	4616      	mov	r6, r2
 80031de:	d505      	bpl.n	80031ec <__swrite+0x1e>
 80031e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e4:	2302      	movs	r3, #2
 80031e6:	2200      	movs	r2, #0
 80031e8:	f000 f83c 	bl	8003264 <_lseek_r>
 80031ec:	89a3      	ldrh	r3, [r4, #12]
 80031ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031f6:	81a3      	strh	r3, [r4, #12]
 80031f8:	4632      	mov	r2, r6
 80031fa:	463b      	mov	r3, r7
 80031fc:	4628      	mov	r0, r5
 80031fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003202:	f000 b853 	b.w	80032ac <_write_r>

08003206 <__sseek>:
 8003206:	b510      	push	{r4, lr}
 8003208:	460c      	mov	r4, r1
 800320a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800320e:	f000 f829 	bl	8003264 <_lseek_r>
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	bf15      	itete	ne
 8003218:	6560      	strne	r0, [r4, #84]	@ 0x54
 800321a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800321e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003222:	81a3      	strheq	r3, [r4, #12]
 8003224:	bf18      	it	ne
 8003226:	81a3      	strhne	r3, [r4, #12]
 8003228:	bd10      	pop	{r4, pc}

0800322a <__sclose>:
 800322a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322e:	f000 b809 	b.w	8003244 <_close_r>

08003232 <memset>:
 8003232:	4402      	add	r2, r0
 8003234:	4603      	mov	r3, r0
 8003236:	4293      	cmp	r3, r2
 8003238:	d100      	bne.n	800323c <memset+0xa>
 800323a:	4770      	bx	lr
 800323c:	f803 1b01 	strb.w	r1, [r3], #1
 8003240:	e7f9      	b.n	8003236 <memset+0x4>
	...

08003244 <_close_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4d06      	ldr	r5, [pc, #24]	@ (8003260 <_close_r+0x1c>)
 8003248:	2300      	movs	r3, #0
 800324a:	4604      	mov	r4, r0
 800324c:	4608      	mov	r0, r1
 800324e:	602b      	str	r3, [r5, #0]
 8003250:	f7fd fc47 	bl	8000ae2 <_close>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d102      	bne.n	800325e <_close_r+0x1a>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	b103      	cbz	r3, 800325e <_close_r+0x1a>
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	bd38      	pop	{r3, r4, r5, pc}
 8003260:	20000250 	.word	0x20000250

08003264 <_lseek_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	4d07      	ldr	r5, [pc, #28]	@ (8003284 <_lseek_r+0x20>)
 8003268:	4604      	mov	r4, r0
 800326a:	4608      	mov	r0, r1
 800326c:	4611      	mov	r1, r2
 800326e:	2200      	movs	r2, #0
 8003270:	602a      	str	r2, [r5, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f7fd fc5c 	bl	8000b30 <_lseek>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d102      	bne.n	8003282 <_lseek_r+0x1e>
 800327c:	682b      	ldr	r3, [r5, #0]
 800327e:	b103      	cbz	r3, 8003282 <_lseek_r+0x1e>
 8003280:	6023      	str	r3, [r4, #0]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	20000250 	.word	0x20000250

08003288 <_read_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4d07      	ldr	r5, [pc, #28]	@ (80032a8 <_read_r+0x20>)
 800328c:	4604      	mov	r4, r0
 800328e:	4608      	mov	r0, r1
 8003290:	4611      	mov	r1, r2
 8003292:	2200      	movs	r2, #0
 8003294:	602a      	str	r2, [r5, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	f7fd fbea 	bl	8000a70 <_read>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d102      	bne.n	80032a6 <_read_r+0x1e>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	b103      	cbz	r3, 80032a6 <_read_r+0x1e>
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
 80032a8:	20000250 	.word	0x20000250

080032ac <_write_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4d07      	ldr	r5, [pc, #28]	@ (80032cc <_write_r+0x20>)
 80032b0:	4604      	mov	r4, r0
 80032b2:	4608      	mov	r0, r1
 80032b4:	4611      	mov	r1, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	602a      	str	r2, [r5, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f7fd fbf5 	bl	8000aaa <_write>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d102      	bne.n	80032ca <_write_r+0x1e>
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	b103      	cbz	r3, 80032ca <_write_r+0x1e>
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	20000250 	.word	0x20000250

080032d0 <__errno>:
 80032d0:	4b01      	ldr	r3, [pc, #4]	@ (80032d8 <__errno+0x8>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000018 	.word	0x20000018

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	4d0d      	ldr	r5, [pc, #52]	@ (8003314 <__libc_init_array+0x38>)
 80032e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003318 <__libc_init_array+0x3c>)
 80032e2:	1b64      	subs	r4, r4, r5
 80032e4:	10a4      	asrs	r4, r4, #2
 80032e6:	2600      	movs	r6, #0
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	4d0b      	ldr	r5, [pc, #44]	@ (800331c <__libc_init_array+0x40>)
 80032ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003320 <__libc_init_array+0x44>)
 80032f0:	f000 fe38 	bl	8003f64 <_init>
 80032f4:	1b64      	subs	r4, r4, r5
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	2600      	movs	r6, #0
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	f855 3b04 	ldr.w	r3, [r5], #4
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	f855 3b04 	ldr.w	r3, [r5], #4
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	080040c0 	.word	0x080040c0
 8003318:	080040c0 	.word	0x080040c0
 800331c:	080040c0 	.word	0x080040c0
 8003320:	080040c4 	.word	0x080040c4

08003324 <__retarget_lock_init_recursive>:
 8003324:	4770      	bx	lr

08003326 <__retarget_lock_acquire_recursive>:
 8003326:	4770      	bx	lr

08003328 <__retarget_lock_release_recursive>:
 8003328:	4770      	bx	lr
	...

0800332c <__assert_func>:
 800332c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800332e:	4614      	mov	r4, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <__assert_func+0x2c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4605      	mov	r5, r0
 8003338:	68d8      	ldr	r0, [r3, #12]
 800333a:	b14c      	cbz	r4, 8003350 <__assert_func+0x24>
 800333c:	4b07      	ldr	r3, [pc, #28]	@ (800335c <__assert_func+0x30>)
 800333e:	9100      	str	r1, [sp, #0]
 8003340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003344:	4906      	ldr	r1, [pc, #24]	@ (8003360 <__assert_func+0x34>)
 8003346:	462b      	mov	r3, r5
 8003348:	f000 f9ba 	bl	80036c0 <fiprintf>
 800334c:	f000 f9da 	bl	8003704 <abort>
 8003350:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <__assert_func+0x38>)
 8003352:	461c      	mov	r4, r3
 8003354:	e7f3      	b.n	800333e <__assert_func+0x12>
 8003356:	bf00      	nop
 8003358:	20000018 	.word	0x20000018
 800335c:	08004047 	.word	0x08004047
 8003360:	08004054 	.word	0x08004054
 8003364:	08004082 	.word	0x08004082

08003368 <_free_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4605      	mov	r5, r0
 800336c:	2900      	cmp	r1, #0
 800336e:	d041      	beq.n	80033f4 <_free_r+0x8c>
 8003370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003374:	1f0c      	subs	r4, r1, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	bfb8      	it	lt
 800337a:	18e4      	addlt	r4, r4, r3
 800337c:	f000 f8e8 	bl	8003550 <__malloc_lock>
 8003380:	4a1d      	ldr	r2, [pc, #116]	@ (80033f8 <_free_r+0x90>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	b933      	cbnz	r3, 8003394 <_free_r+0x2c>
 8003386:	6063      	str	r3, [r4, #4]
 8003388:	6014      	str	r4, [r2, #0]
 800338a:	4628      	mov	r0, r5
 800338c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003390:	f000 b8e4 	b.w	800355c <__malloc_unlock>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d908      	bls.n	80033aa <_free_r+0x42>
 8003398:	6820      	ldr	r0, [r4, #0]
 800339a:	1821      	adds	r1, r4, r0
 800339c:	428b      	cmp	r3, r1
 800339e:	bf01      	itttt	eq
 80033a0:	6819      	ldreq	r1, [r3, #0]
 80033a2:	685b      	ldreq	r3, [r3, #4]
 80033a4:	1809      	addeq	r1, r1, r0
 80033a6:	6021      	streq	r1, [r4, #0]
 80033a8:	e7ed      	b.n	8003386 <_free_r+0x1e>
 80033aa:	461a      	mov	r2, r3
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	b10b      	cbz	r3, 80033b4 <_free_r+0x4c>
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	d9fa      	bls.n	80033aa <_free_r+0x42>
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	1850      	adds	r0, r2, r1
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d10b      	bne.n	80033d4 <_free_r+0x6c>
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	4401      	add	r1, r0
 80033c0:	1850      	adds	r0, r2, r1
 80033c2:	4283      	cmp	r3, r0
 80033c4:	6011      	str	r1, [r2, #0]
 80033c6:	d1e0      	bne.n	800338a <_free_r+0x22>
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	6053      	str	r3, [r2, #4]
 80033ce:	4408      	add	r0, r1
 80033d0:	6010      	str	r0, [r2, #0]
 80033d2:	e7da      	b.n	800338a <_free_r+0x22>
 80033d4:	d902      	bls.n	80033dc <_free_r+0x74>
 80033d6:	230c      	movs	r3, #12
 80033d8:	602b      	str	r3, [r5, #0]
 80033da:	e7d6      	b.n	800338a <_free_r+0x22>
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	1821      	adds	r1, r4, r0
 80033e0:	428b      	cmp	r3, r1
 80033e2:	bf04      	itt	eq
 80033e4:	6819      	ldreq	r1, [r3, #0]
 80033e6:	685b      	ldreq	r3, [r3, #4]
 80033e8:	6063      	str	r3, [r4, #4]
 80033ea:	bf04      	itt	eq
 80033ec:	1809      	addeq	r1, r1, r0
 80033ee:	6021      	streq	r1, [r4, #0]
 80033f0:	6054      	str	r4, [r2, #4]
 80033f2:	e7ca      	b.n	800338a <_free_r+0x22>
 80033f4:	bd38      	pop	{r3, r4, r5, pc}
 80033f6:	bf00      	nop
 80033f8:	2000025c 	.word	0x2000025c

080033fc <malloc>:
 80033fc:	4b02      	ldr	r3, [pc, #8]	@ (8003408 <malloc+0xc>)
 80033fe:	4601      	mov	r1, r0
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	f000 b825 	b.w	8003450 <_malloc_r>
 8003406:	bf00      	nop
 8003408:	20000018 	.word	0x20000018

0800340c <sbrk_aligned>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4e0f      	ldr	r6, [pc, #60]	@ (800344c <sbrk_aligned+0x40>)
 8003410:	460c      	mov	r4, r1
 8003412:	6831      	ldr	r1, [r6, #0]
 8003414:	4605      	mov	r5, r0
 8003416:	b911      	cbnz	r1, 800341e <sbrk_aligned+0x12>
 8003418:	f000 f964 	bl	80036e4 <_sbrk_r>
 800341c:	6030      	str	r0, [r6, #0]
 800341e:	4621      	mov	r1, r4
 8003420:	4628      	mov	r0, r5
 8003422:	f000 f95f 	bl	80036e4 <_sbrk_r>
 8003426:	1c43      	adds	r3, r0, #1
 8003428:	d103      	bne.n	8003432 <sbrk_aligned+0x26>
 800342a:	f04f 34ff 	mov.w	r4, #4294967295
 800342e:	4620      	mov	r0, r4
 8003430:	bd70      	pop	{r4, r5, r6, pc}
 8003432:	1cc4      	adds	r4, r0, #3
 8003434:	f024 0403 	bic.w	r4, r4, #3
 8003438:	42a0      	cmp	r0, r4
 800343a:	d0f8      	beq.n	800342e <sbrk_aligned+0x22>
 800343c:	1a21      	subs	r1, r4, r0
 800343e:	4628      	mov	r0, r5
 8003440:	f000 f950 	bl	80036e4 <_sbrk_r>
 8003444:	3001      	adds	r0, #1
 8003446:	d1f2      	bne.n	800342e <sbrk_aligned+0x22>
 8003448:	e7ef      	b.n	800342a <sbrk_aligned+0x1e>
 800344a:	bf00      	nop
 800344c:	20000258 	.word	0x20000258

08003450 <_malloc_r>:
 8003450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003454:	1ccd      	adds	r5, r1, #3
 8003456:	f025 0503 	bic.w	r5, r5, #3
 800345a:	3508      	adds	r5, #8
 800345c:	2d0c      	cmp	r5, #12
 800345e:	bf38      	it	cc
 8003460:	250c      	movcc	r5, #12
 8003462:	2d00      	cmp	r5, #0
 8003464:	4606      	mov	r6, r0
 8003466:	db01      	blt.n	800346c <_malloc_r+0x1c>
 8003468:	42a9      	cmp	r1, r5
 800346a:	d904      	bls.n	8003476 <_malloc_r+0x26>
 800346c:	230c      	movs	r3, #12
 800346e:	6033      	str	r3, [r6, #0]
 8003470:	2000      	movs	r0, #0
 8003472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800354c <_malloc_r+0xfc>
 800347a:	f000 f869 	bl	8003550 <__malloc_lock>
 800347e:	f8d8 3000 	ldr.w	r3, [r8]
 8003482:	461c      	mov	r4, r3
 8003484:	bb44      	cbnz	r4, 80034d8 <_malloc_r+0x88>
 8003486:	4629      	mov	r1, r5
 8003488:	4630      	mov	r0, r6
 800348a:	f7ff ffbf 	bl	800340c <sbrk_aligned>
 800348e:	1c43      	adds	r3, r0, #1
 8003490:	4604      	mov	r4, r0
 8003492:	d158      	bne.n	8003546 <_malloc_r+0xf6>
 8003494:	f8d8 4000 	ldr.w	r4, [r8]
 8003498:	4627      	mov	r7, r4
 800349a:	2f00      	cmp	r7, #0
 800349c:	d143      	bne.n	8003526 <_malloc_r+0xd6>
 800349e:	2c00      	cmp	r4, #0
 80034a0:	d04b      	beq.n	800353a <_malloc_r+0xea>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	4639      	mov	r1, r7
 80034a6:	4630      	mov	r0, r6
 80034a8:	eb04 0903 	add.w	r9, r4, r3
 80034ac:	f000 f91a 	bl	80036e4 <_sbrk_r>
 80034b0:	4581      	cmp	r9, r0
 80034b2:	d142      	bne.n	800353a <_malloc_r+0xea>
 80034b4:	6821      	ldr	r1, [r4, #0]
 80034b6:	1a6d      	subs	r5, r5, r1
 80034b8:	4629      	mov	r1, r5
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7ff ffa6 	bl	800340c <sbrk_aligned>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d03a      	beq.n	800353a <_malloc_r+0xea>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	442b      	add	r3, r5
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	f8d8 3000 	ldr.w	r3, [r8]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	bb62      	cbnz	r2, 800352c <_malloc_r+0xdc>
 80034d2:	f8c8 7000 	str.w	r7, [r8]
 80034d6:	e00f      	b.n	80034f8 <_malloc_r+0xa8>
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	1b52      	subs	r2, r2, r5
 80034dc:	d420      	bmi.n	8003520 <_malloc_r+0xd0>
 80034de:	2a0b      	cmp	r2, #11
 80034e0:	d917      	bls.n	8003512 <_malloc_r+0xc2>
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	bf18      	it	ne
 80034ea:	6059      	strne	r1, [r3, #4]
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	bf08      	it	eq
 80034f0:	f8c8 1000 	streq.w	r1, [r8]
 80034f4:	5162      	str	r2, [r4, r5]
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 f82f 	bl	800355c <__malloc_unlock>
 80034fe:	f104 000b 	add.w	r0, r4, #11
 8003502:	1d23      	adds	r3, r4, #4
 8003504:	f020 0007 	bic.w	r0, r0, #7
 8003508:	1ac2      	subs	r2, r0, r3
 800350a:	bf1c      	itt	ne
 800350c:	1a1b      	subne	r3, r3, r0
 800350e:	50a3      	strne	r3, [r4, r2]
 8003510:	e7af      	b.n	8003472 <_malloc_r+0x22>
 8003512:	6862      	ldr	r2, [r4, #4]
 8003514:	42a3      	cmp	r3, r4
 8003516:	bf0c      	ite	eq
 8003518:	f8c8 2000 	streq.w	r2, [r8]
 800351c:	605a      	strne	r2, [r3, #4]
 800351e:	e7eb      	b.n	80034f8 <_malloc_r+0xa8>
 8003520:	4623      	mov	r3, r4
 8003522:	6864      	ldr	r4, [r4, #4]
 8003524:	e7ae      	b.n	8003484 <_malloc_r+0x34>
 8003526:	463c      	mov	r4, r7
 8003528:	687f      	ldr	r7, [r7, #4]
 800352a:	e7b6      	b.n	800349a <_malloc_r+0x4a>
 800352c:	461a      	mov	r2, r3
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	42a3      	cmp	r3, r4
 8003532:	d1fb      	bne.n	800352c <_malloc_r+0xdc>
 8003534:	2300      	movs	r3, #0
 8003536:	6053      	str	r3, [r2, #4]
 8003538:	e7de      	b.n	80034f8 <_malloc_r+0xa8>
 800353a:	230c      	movs	r3, #12
 800353c:	6033      	str	r3, [r6, #0]
 800353e:	4630      	mov	r0, r6
 8003540:	f000 f80c 	bl	800355c <__malloc_unlock>
 8003544:	e794      	b.n	8003470 <_malloc_r+0x20>
 8003546:	6005      	str	r5, [r0, #0]
 8003548:	e7d6      	b.n	80034f8 <_malloc_r+0xa8>
 800354a:	bf00      	nop
 800354c:	2000025c 	.word	0x2000025c

08003550 <__malloc_lock>:
 8003550:	4801      	ldr	r0, [pc, #4]	@ (8003558 <__malloc_lock+0x8>)
 8003552:	f7ff bee8 	b.w	8003326 <__retarget_lock_acquire_recursive>
 8003556:	bf00      	nop
 8003558:	20000254 	.word	0x20000254

0800355c <__malloc_unlock>:
 800355c:	4801      	ldr	r0, [pc, #4]	@ (8003564 <__malloc_unlock+0x8>)
 800355e:	f7ff bee3 	b.w	8003328 <__retarget_lock_release_recursive>
 8003562:	bf00      	nop
 8003564:	20000254 	.word	0x20000254

08003568 <__sflush_r>:
 8003568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003570:	0716      	lsls	r6, r2, #28
 8003572:	4605      	mov	r5, r0
 8003574:	460c      	mov	r4, r1
 8003576:	d454      	bmi.n	8003622 <__sflush_r+0xba>
 8003578:	684b      	ldr	r3, [r1, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	dc02      	bgt.n	8003584 <__sflush_r+0x1c>
 800357e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	dd48      	ble.n	8003616 <__sflush_r+0xae>
 8003584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003586:	2e00      	cmp	r6, #0
 8003588:	d045      	beq.n	8003616 <__sflush_r+0xae>
 800358a:	2300      	movs	r3, #0
 800358c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003590:	682f      	ldr	r7, [r5, #0]
 8003592:	6a21      	ldr	r1, [r4, #32]
 8003594:	602b      	str	r3, [r5, #0]
 8003596:	d030      	beq.n	80035fa <__sflush_r+0x92>
 8003598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	0759      	lsls	r1, r3, #29
 800359e:	d505      	bpl.n	80035ac <__sflush_r+0x44>
 80035a0:	6863      	ldr	r3, [r4, #4]
 80035a2:	1ad2      	subs	r2, r2, r3
 80035a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035a6:	b10b      	cbz	r3, 80035ac <__sflush_r+0x44>
 80035a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035aa:	1ad2      	subs	r2, r2, r3
 80035ac:	2300      	movs	r3, #0
 80035ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035b0:	6a21      	ldr	r1, [r4, #32]
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b0      	blx	r6
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	d106      	bne.n	80035ca <__sflush_r+0x62>
 80035bc:	6829      	ldr	r1, [r5, #0]
 80035be:	291d      	cmp	r1, #29
 80035c0:	d82b      	bhi.n	800361a <__sflush_r+0xb2>
 80035c2:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <__sflush_r+0x104>)
 80035c4:	40ca      	lsrs	r2, r1
 80035c6:	07d6      	lsls	r6, r2, #31
 80035c8:	d527      	bpl.n	800361a <__sflush_r+0xb2>
 80035ca:	2200      	movs	r2, #0
 80035cc:	6062      	str	r2, [r4, #4]
 80035ce:	04d9      	lsls	r1, r3, #19
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	d504      	bpl.n	80035e0 <__sflush_r+0x78>
 80035d6:	1c42      	adds	r2, r0, #1
 80035d8:	d101      	bne.n	80035de <__sflush_r+0x76>
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	b903      	cbnz	r3, 80035e0 <__sflush_r+0x78>
 80035de:	6560      	str	r0, [r4, #84]	@ 0x54
 80035e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035e2:	602f      	str	r7, [r5, #0]
 80035e4:	b1b9      	cbz	r1, 8003616 <__sflush_r+0xae>
 80035e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035ea:	4299      	cmp	r1, r3
 80035ec:	d002      	beq.n	80035f4 <__sflush_r+0x8c>
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7ff feba 	bl	8003368 <_free_r>
 80035f4:	2300      	movs	r3, #0
 80035f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80035f8:	e00d      	b.n	8003616 <__sflush_r+0xae>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b0      	blx	r6
 8003600:	4602      	mov	r2, r0
 8003602:	1c50      	adds	r0, r2, #1
 8003604:	d1c9      	bne.n	800359a <__sflush_r+0x32>
 8003606:	682b      	ldr	r3, [r5, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0c6      	beq.n	800359a <__sflush_r+0x32>
 800360c:	2b1d      	cmp	r3, #29
 800360e:	d001      	beq.n	8003614 <__sflush_r+0xac>
 8003610:	2b16      	cmp	r3, #22
 8003612:	d11e      	bne.n	8003652 <__sflush_r+0xea>
 8003614:	602f      	str	r7, [r5, #0]
 8003616:	2000      	movs	r0, #0
 8003618:	e022      	b.n	8003660 <__sflush_r+0xf8>
 800361a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800361e:	b21b      	sxth	r3, r3
 8003620:	e01b      	b.n	800365a <__sflush_r+0xf2>
 8003622:	690f      	ldr	r7, [r1, #16]
 8003624:	2f00      	cmp	r7, #0
 8003626:	d0f6      	beq.n	8003616 <__sflush_r+0xae>
 8003628:	0793      	lsls	r3, r2, #30
 800362a:	680e      	ldr	r6, [r1, #0]
 800362c:	bf08      	it	eq
 800362e:	694b      	ldreq	r3, [r1, #20]
 8003630:	600f      	str	r7, [r1, #0]
 8003632:	bf18      	it	ne
 8003634:	2300      	movne	r3, #0
 8003636:	eba6 0807 	sub.w	r8, r6, r7
 800363a:	608b      	str	r3, [r1, #8]
 800363c:	f1b8 0f00 	cmp.w	r8, #0
 8003640:	dde9      	ble.n	8003616 <__sflush_r+0xae>
 8003642:	6a21      	ldr	r1, [r4, #32]
 8003644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003646:	4643      	mov	r3, r8
 8003648:	463a      	mov	r2, r7
 800364a:	4628      	mov	r0, r5
 800364c:	47b0      	blx	r6
 800364e:	2800      	cmp	r0, #0
 8003650:	dc08      	bgt.n	8003664 <__sflush_r+0xfc>
 8003652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003664:	4407      	add	r7, r0
 8003666:	eba8 0800 	sub.w	r8, r8, r0
 800366a:	e7e7      	b.n	800363c <__sflush_r+0xd4>
 800366c:	20400001 	.word	0x20400001

08003670 <_fflush_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	4605      	mov	r5, r0
 8003676:	460c      	mov	r4, r1
 8003678:	b913      	cbnz	r3, 8003680 <_fflush_r+0x10>
 800367a:	2500      	movs	r5, #0
 800367c:	4628      	mov	r0, r5
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	b118      	cbz	r0, 800368a <_fflush_r+0x1a>
 8003682:	6a03      	ldr	r3, [r0, #32]
 8003684:	b90b      	cbnz	r3, 800368a <_fflush_r+0x1a>
 8003686:	f7ff fd5b 	bl	8003140 <__sinit>
 800368a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f3      	beq.n	800367a <_fflush_r+0xa>
 8003692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003694:	07d0      	lsls	r0, r2, #31
 8003696:	d404      	bmi.n	80036a2 <_fflush_r+0x32>
 8003698:	0599      	lsls	r1, r3, #22
 800369a:	d402      	bmi.n	80036a2 <_fflush_r+0x32>
 800369c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800369e:	f7ff fe42 	bl	8003326 <__retarget_lock_acquire_recursive>
 80036a2:	4628      	mov	r0, r5
 80036a4:	4621      	mov	r1, r4
 80036a6:	f7ff ff5f 	bl	8003568 <__sflush_r>
 80036aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ac:	07da      	lsls	r2, r3, #31
 80036ae:	4605      	mov	r5, r0
 80036b0:	d4e4      	bmi.n	800367c <_fflush_r+0xc>
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	059b      	lsls	r3, r3, #22
 80036b6:	d4e1      	bmi.n	800367c <_fflush_r+0xc>
 80036b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ba:	f7ff fe35 	bl	8003328 <__retarget_lock_release_recursive>
 80036be:	e7dd      	b.n	800367c <_fflush_r+0xc>

080036c0 <fiprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b503      	push	{r0, r1, lr}
 80036c4:	4601      	mov	r1, r0
 80036c6:	ab03      	add	r3, sp, #12
 80036c8:	4805      	ldr	r0, [pc, #20]	@ (80036e0 <fiprintf+0x20>)
 80036ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	f000 f847 	bl	8003764 <_vfiprintf_r>
 80036d6:	b002      	add	sp, #8
 80036d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036dc:	b003      	add	sp, #12
 80036de:	4770      	bx	lr
 80036e0:	20000018 	.word	0x20000018

080036e4 <_sbrk_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4d06      	ldr	r5, [pc, #24]	@ (8003700 <_sbrk_r+0x1c>)
 80036e8:	2300      	movs	r3, #0
 80036ea:	4604      	mov	r4, r0
 80036ec:	4608      	mov	r0, r1
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	f7fd fa2c 	bl	8000b4c <_sbrk>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_sbrk_r+0x1a>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_sbrk_r+0x1a>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20000250 	.word	0x20000250

08003704 <abort>:
 8003704:	b508      	push	{r3, lr}
 8003706:	2006      	movs	r0, #6
 8003708:	f000 fb8c 	bl	8003e24 <raise>
 800370c:	2001      	movs	r0, #1
 800370e:	f7fd f9a4 	bl	8000a5a <_exit>

08003712 <__sfputc_r>:
 8003712:	6893      	ldr	r3, [r2, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	b410      	push	{r4}
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	da08      	bge.n	8003730 <__sfputc_r+0x1e>
 800371e:	6994      	ldr	r4, [r2, #24]
 8003720:	42a3      	cmp	r3, r4
 8003722:	db01      	blt.n	8003728 <__sfputc_r+0x16>
 8003724:	290a      	cmp	r1, #10
 8003726:	d103      	bne.n	8003730 <__sfputc_r+0x1e>
 8003728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800372c:	f000 babe 	b.w	8003cac <__swbuf_r>
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	1c58      	adds	r0, r3, #1
 8003734:	6010      	str	r0, [r2, #0]
 8003736:	7019      	strb	r1, [r3, #0]
 8003738:	4608      	mov	r0, r1
 800373a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800373e:	4770      	bx	lr

08003740 <__sfputs_r>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	4606      	mov	r6, r0
 8003744:	460f      	mov	r7, r1
 8003746:	4614      	mov	r4, r2
 8003748:	18d5      	adds	r5, r2, r3
 800374a:	42ac      	cmp	r4, r5
 800374c:	d101      	bne.n	8003752 <__sfputs_r+0x12>
 800374e:	2000      	movs	r0, #0
 8003750:	e007      	b.n	8003762 <__sfputs_r+0x22>
 8003752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003756:	463a      	mov	r2, r7
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff ffda 	bl	8003712 <__sfputc_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d1f3      	bne.n	800374a <__sfputs_r+0xa>
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003764 <_vfiprintf_r>:
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	460d      	mov	r5, r1
 800376a:	b09d      	sub	sp, #116	@ 0x74
 800376c:	4614      	mov	r4, r2
 800376e:	4698      	mov	r8, r3
 8003770:	4606      	mov	r6, r0
 8003772:	b118      	cbz	r0, 800377c <_vfiprintf_r+0x18>
 8003774:	6a03      	ldr	r3, [r0, #32]
 8003776:	b90b      	cbnz	r3, 800377c <_vfiprintf_r+0x18>
 8003778:	f7ff fce2 	bl	8003140 <__sinit>
 800377c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800377e:	07d9      	lsls	r1, r3, #31
 8003780:	d405      	bmi.n	800378e <_vfiprintf_r+0x2a>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	059a      	lsls	r2, r3, #22
 8003786:	d402      	bmi.n	800378e <_vfiprintf_r+0x2a>
 8003788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800378a:	f7ff fdcc 	bl	8003326 <__retarget_lock_acquire_recursive>
 800378e:	89ab      	ldrh	r3, [r5, #12]
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	d501      	bpl.n	8003798 <_vfiprintf_r+0x34>
 8003794:	692b      	ldr	r3, [r5, #16]
 8003796:	b99b      	cbnz	r3, 80037c0 <_vfiprintf_r+0x5c>
 8003798:	4629      	mov	r1, r5
 800379a:	4630      	mov	r0, r6
 800379c:	f000 fac4 	bl	8003d28 <__swsetup_r>
 80037a0:	b170      	cbz	r0, 80037c0 <_vfiprintf_r+0x5c>
 80037a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037a4:	07dc      	lsls	r4, r3, #31
 80037a6:	d504      	bpl.n	80037b2 <_vfiprintf_r+0x4e>
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	b01d      	add	sp, #116	@ 0x74
 80037ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b2:	89ab      	ldrh	r3, [r5, #12]
 80037b4:	0598      	lsls	r0, r3, #22
 80037b6:	d4f7      	bmi.n	80037a8 <_vfiprintf_r+0x44>
 80037b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037ba:	f7ff fdb5 	bl	8003328 <__retarget_lock_release_recursive>
 80037be:	e7f3      	b.n	80037a8 <_vfiprintf_r+0x44>
 80037c0:	2300      	movs	r3, #0
 80037c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80037c4:	2320      	movs	r3, #32
 80037c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80037ce:	2330      	movs	r3, #48	@ 0x30
 80037d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003980 <_vfiprintf_r+0x21c>
 80037d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037d8:	f04f 0901 	mov.w	r9, #1
 80037dc:	4623      	mov	r3, r4
 80037de:	469a      	mov	sl, r3
 80037e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037e4:	b10a      	cbz	r2, 80037ea <_vfiprintf_r+0x86>
 80037e6:	2a25      	cmp	r2, #37	@ 0x25
 80037e8:	d1f9      	bne.n	80037de <_vfiprintf_r+0x7a>
 80037ea:	ebba 0b04 	subs.w	fp, sl, r4
 80037ee:	d00b      	beq.n	8003808 <_vfiprintf_r+0xa4>
 80037f0:	465b      	mov	r3, fp
 80037f2:	4622      	mov	r2, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7ff ffa2 	bl	8003740 <__sfputs_r>
 80037fc:	3001      	adds	r0, #1
 80037fe:	f000 80a7 	beq.w	8003950 <_vfiprintf_r+0x1ec>
 8003802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003804:	445a      	add	r2, fp
 8003806:	9209      	str	r2, [sp, #36]	@ 0x24
 8003808:	f89a 3000 	ldrb.w	r3, [sl]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 809f 	beq.w	8003950 <_vfiprintf_r+0x1ec>
 8003812:	2300      	movs	r3, #0
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800381c:	f10a 0a01 	add.w	sl, sl, #1
 8003820:	9304      	str	r3, [sp, #16]
 8003822:	9307      	str	r3, [sp, #28]
 8003824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003828:	931a      	str	r3, [sp, #104]	@ 0x68
 800382a:	4654      	mov	r4, sl
 800382c:	2205      	movs	r2, #5
 800382e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003832:	4853      	ldr	r0, [pc, #332]	@ (8003980 <_vfiprintf_r+0x21c>)
 8003834:	f7fc fccc 	bl	80001d0 <memchr>
 8003838:	9a04      	ldr	r2, [sp, #16]
 800383a:	b9d8      	cbnz	r0, 8003874 <_vfiprintf_r+0x110>
 800383c:	06d1      	lsls	r1, r2, #27
 800383e:	bf44      	itt	mi
 8003840:	2320      	movmi	r3, #32
 8003842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003846:	0713      	lsls	r3, r2, #28
 8003848:	bf44      	itt	mi
 800384a:	232b      	movmi	r3, #43	@ 0x2b
 800384c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003850:	f89a 3000 	ldrb.w	r3, [sl]
 8003854:	2b2a      	cmp	r3, #42	@ 0x2a
 8003856:	d015      	beq.n	8003884 <_vfiprintf_r+0x120>
 8003858:	9a07      	ldr	r2, [sp, #28]
 800385a:	4654      	mov	r4, sl
 800385c:	2000      	movs	r0, #0
 800385e:	f04f 0c0a 	mov.w	ip, #10
 8003862:	4621      	mov	r1, r4
 8003864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003868:	3b30      	subs	r3, #48	@ 0x30
 800386a:	2b09      	cmp	r3, #9
 800386c:	d94b      	bls.n	8003906 <_vfiprintf_r+0x1a2>
 800386e:	b1b0      	cbz	r0, 800389e <_vfiprintf_r+0x13a>
 8003870:	9207      	str	r2, [sp, #28]
 8003872:	e014      	b.n	800389e <_vfiprintf_r+0x13a>
 8003874:	eba0 0308 	sub.w	r3, r0, r8
 8003878:	fa09 f303 	lsl.w	r3, r9, r3
 800387c:	4313      	orrs	r3, r2
 800387e:	9304      	str	r3, [sp, #16]
 8003880:	46a2      	mov	sl, r4
 8003882:	e7d2      	b.n	800382a <_vfiprintf_r+0xc6>
 8003884:	9b03      	ldr	r3, [sp, #12]
 8003886:	1d19      	adds	r1, r3, #4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	9103      	str	r1, [sp, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	bfbb      	ittet	lt
 8003890:	425b      	neglt	r3, r3
 8003892:	f042 0202 	orrlt.w	r2, r2, #2
 8003896:	9307      	strge	r3, [sp, #28]
 8003898:	9307      	strlt	r3, [sp, #28]
 800389a:	bfb8      	it	lt
 800389c:	9204      	strlt	r2, [sp, #16]
 800389e:	7823      	ldrb	r3, [r4, #0]
 80038a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80038a2:	d10a      	bne.n	80038ba <_vfiprintf_r+0x156>
 80038a4:	7863      	ldrb	r3, [r4, #1]
 80038a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038a8:	d132      	bne.n	8003910 <_vfiprintf_r+0x1ac>
 80038aa:	9b03      	ldr	r3, [sp, #12]
 80038ac:	1d1a      	adds	r2, r3, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	9203      	str	r2, [sp, #12]
 80038b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038b6:	3402      	adds	r4, #2
 80038b8:	9305      	str	r3, [sp, #20]
 80038ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003990 <_vfiprintf_r+0x22c>
 80038be:	7821      	ldrb	r1, [r4, #0]
 80038c0:	2203      	movs	r2, #3
 80038c2:	4650      	mov	r0, sl
 80038c4:	f7fc fc84 	bl	80001d0 <memchr>
 80038c8:	b138      	cbz	r0, 80038da <_vfiprintf_r+0x176>
 80038ca:	9b04      	ldr	r3, [sp, #16]
 80038cc:	eba0 000a 	sub.w	r0, r0, sl
 80038d0:	2240      	movs	r2, #64	@ 0x40
 80038d2:	4082      	lsls	r2, r0
 80038d4:	4313      	orrs	r3, r2
 80038d6:	3401      	adds	r4, #1
 80038d8:	9304      	str	r3, [sp, #16]
 80038da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038de:	4829      	ldr	r0, [pc, #164]	@ (8003984 <_vfiprintf_r+0x220>)
 80038e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038e4:	2206      	movs	r2, #6
 80038e6:	f7fc fc73 	bl	80001d0 <memchr>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d03f      	beq.n	800396e <_vfiprintf_r+0x20a>
 80038ee:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <_vfiprintf_r+0x224>)
 80038f0:	bb1b      	cbnz	r3, 800393a <_vfiprintf_r+0x1d6>
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	3307      	adds	r3, #7
 80038f6:	f023 0307 	bic.w	r3, r3, #7
 80038fa:	3308      	adds	r3, #8
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003900:	443b      	add	r3, r7
 8003902:	9309      	str	r3, [sp, #36]	@ 0x24
 8003904:	e76a      	b.n	80037dc <_vfiprintf_r+0x78>
 8003906:	fb0c 3202 	mla	r2, ip, r2, r3
 800390a:	460c      	mov	r4, r1
 800390c:	2001      	movs	r0, #1
 800390e:	e7a8      	b.n	8003862 <_vfiprintf_r+0xfe>
 8003910:	2300      	movs	r3, #0
 8003912:	3401      	adds	r4, #1
 8003914:	9305      	str	r3, [sp, #20]
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 0c0a 	mov.w	ip, #10
 800391c:	4620      	mov	r0, r4
 800391e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003922:	3a30      	subs	r2, #48	@ 0x30
 8003924:	2a09      	cmp	r2, #9
 8003926:	d903      	bls.n	8003930 <_vfiprintf_r+0x1cc>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0c6      	beq.n	80038ba <_vfiprintf_r+0x156>
 800392c:	9105      	str	r1, [sp, #20]
 800392e:	e7c4      	b.n	80038ba <_vfiprintf_r+0x156>
 8003930:	fb0c 2101 	mla	r1, ip, r1, r2
 8003934:	4604      	mov	r4, r0
 8003936:	2301      	movs	r3, #1
 8003938:	e7f0      	b.n	800391c <_vfiprintf_r+0x1b8>
 800393a:	ab03      	add	r3, sp, #12
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	462a      	mov	r2, r5
 8003940:	4b12      	ldr	r3, [pc, #72]	@ (800398c <_vfiprintf_r+0x228>)
 8003942:	a904      	add	r1, sp, #16
 8003944:	4630      	mov	r0, r6
 8003946:	f3af 8000 	nop.w
 800394a:	4607      	mov	r7, r0
 800394c:	1c78      	adds	r0, r7, #1
 800394e:	d1d6      	bne.n	80038fe <_vfiprintf_r+0x19a>
 8003950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003952:	07d9      	lsls	r1, r3, #31
 8003954:	d405      	bmi.n	8003962 <_vfiprintf_r+0x1fe>
 8003956:	89ab      	ldrh	r3, [r5, #12]
 8003958:	059a      	lsls	r2, r3, #22
 800395a:	d402      	bmi.n	8003962 <_vfiprintf_r+0x1fe>
 800395c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800395e:	f7ff fce3 	bl	8003328 <__retarget_lock_release_recursive>
 8003962:	89ab      	ldrh	r3, [r5, #12]
 8003964:	065b      	lsls	r3, r3, #25
 8003966:	f53f af1f 	bmi.w	80037a8 <_vfiprintf_r+0x44>
 800396a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800396c:	e71e      	b.n	80037ac <_vfiprintf_r+0x48>
 800396e:	ab03      	add	r3, sp, #12
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	462a      	mov	r2, r5
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <_vfiprintf_r+0x228>)
 8003976:	a904      	add	r1, sp, #16
 8003978:	4630      	mov	r0, r6
 800397a:	f000 f879 	bl	8003a70 <_printf_i>
 800397e:	e7e4      	b.n	800394a <_vfiprintf_r+0x1e6>
 8003980:	08004083 	.word	0x08004083
 8003984:	0800408d 	.word	0x0800408d
 8003988:	00000000 	.word	0x00000000
 800398c:	08003741 	.word	0x08003741
 8003990:	08004089 	.word	0x08004089

08003994 <_printf_common>:
 8003994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	4616      	mov	r6, r2
 800399a:	4698      	mov	r8, r3
 800399c:	688a      	ldr	r2, [r1, #8]
 800399e:	690b      	ldr	r3, [r1, #16]
 80039a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bfb8      	it	lt
 80039a8:	4613      	movlt	r3, r2
 80039aa:	6033      	str	r3, [r6, #0]
 80039ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039b0:	4607      	mov	r7, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	b10a      	cbz	r2, 80039ba <_printf_common+0x26>
 80039b6:	3301      	adds	r3, #1
 80039b8:	6033      	str	r3, [r6, #0]
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	0699      	lsls	r1, r3, #26
 80039be:	bf42      	ittt	mi
 80039c0:	6833      	ldrmi	r3, [r6, #0]
 80039c2:	3302      	addmi	r3, #2
 80039c4:	6033      	strmi	r3, [r6, #0]
 80039c6:	6825      	ldr	r5, [r4, #0]
 80039c8:	f015 0506 	ands.w	r5, r5, #6
 80039cc:	d106      	bne.n	80039dc <_printf_common+0x48>
 80039ce:	f104 0a19 	add.w	sl, r4, #25
 80039d2:	68e3      	ldr	r3, [r4, #12]
 80039d4:	6832      	ldr	r2, [r6, #0]
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	42ab      	cmp	r3, r5
 80039da:	dc26      	bgt.n	8003a2a <_printf_common+0x96>
 80039dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	3b00      	subs	r3, #0
 80039e4:	bf18      	it	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	0692      	lsls	r2, r2, #26
 80039ea:	d42b      	bmi.n	8003a44 <_printf_common+0xb0>
 80039ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039f0:	4641      	mov	r1, r8
 80039f2:	4638      	mov	r0, r7
 80039f4:	47c8      	blx	r9
 80039f6:	3001      	adds	r0, #1
 80039f8:	d01e      	beq.n	8003a38 <_printf_common+0xa4>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6922      	ldr	r2, [r4, #16]
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf02      	ittt	eq
 8003a06:	68e5      	ldreq	r5, [r4, #12]
 8003a08:	6833      	ldreq	r3, [r6, #0]
 8003a0a:	1aed      	subeq	r5, r5, r3
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	bf0c      	ite	eq
 8003a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a14:	2500      	movne	r5, #0
 8003a16:	4293      	cmp	r3, r2
 8003a18:	bfc4      	itt	gt
 8003a1a:	1a9b      	subgt	r3, r3, r2
 8003a1c:	18ed      	addgt	r5, r5, r3
 8003a1e:	2600      	movs	r6, #0
 8003a20:	341a      	adds	r4, #26
 8003a22:	42b5      	cmp	r5, r6
 8003a24:	d11a      	bne.n	8003a5c <_printf_common+0xc8>
 8003a26:	2000      	movs	r0, #0
 8003a28:	e008      	b.n	8003a3c <_printf_common+0xa8>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4652      	mov	r2, sl
 8003a2e:	4641      	mov	r1, r8
 8003a30:	4638      	mov	r0, r7
 8003a32:	47c8      	blx	r9
 8003a34:	3001      	adds	r0, #1
 8003a36:	d103      	bne.n	8003a40 <_printf_common+0xac>
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a40:	3501      	adds	r5, #1
 8003a42:	e7c6      	b.n	80039d2 <_printf_common+0x3e>
 8003a44:	18e1      	adds	r1, r4, r3
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	2030      	movs	r0, #48	@ 0x30
 8003a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a4e:	4422      	add	r2, r4
 8003a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a58:	3302      	adds	r3, #2
 8003a5a:	e7c7      	b.n	80039ec <_printf_common+0x58>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	4622      	mov	r2, r4
 8003a60:	4641      	mov	r1, r8
 8003a62:	4638      	mov	r0, r7
 8003a64:	47c8      	blx	r9
 8003a66:	3001      	adds	r0, #1
 8003a68:	d0e6      	beq.n	8003a38 <_printf_common+0xa4>
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7d9      	b.n	8003a22 <_printf_common+0x8e>
	...

08003a70 <_printf_i>:
 8003a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a74:	7e0f      	ldrb	r7, [r1, #24]
 8003a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a78:	2f78      	cmp	r7, #120	@ 0x78
 8003a7a:	4691      	mov	r9, r2
 8003a7c:	4680      	mov	r8, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	469a      	mov	sl, r3
 8003a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a86:	d807      	bhi.n	8003a98 <_printf_i+0x28>
 8003a88:	2f62      	cmp	r7, #98	@ 0x62
 8003a8a:	d80a      	bhi.n	8003aa2 <_printf_i+0x32>
 8003a8c:	2f00      	cmp	r7, #0
 8003a8e:	f000 80d1 	beq.w	8003c34 <_printf_i+0x1c4>
 8003a92:	2f58      	cmp	r7, #88	@ 0x58
 8003a94:	f000 80b8 	beq.w	8003c08 <_printf_i+0x198>
 8003a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003aa0:	e03a      	b.n	8003b18 <_printf_i+0xa8>
 8003aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aa6:	2b15      	cmp	r3, #21
 8003aa8:	d8f6      	bhi.n	8003a98 <_printf_i+0x28>
 8003aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8003ab0 <_printf_i+0x40>)
 8003aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ab0:	08003b09 	.word	0x08003b09
 8003ab4:	08003b1d 	.word	0x08003b1d
 8003ab8:	08003a99 	.word	0x08003a99
 8003abc:	08003a99 	.word	0x08003a99
 8003ac0:	08003a99 	.word	0x08003a99
 8003ac4:	08003a99 	.word	0x08003a99
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003a99 	.word	0x08003a99
 8003ad0:	08003a99 	.word	0x08003a99
 8003ad4:	08003a99 	.word	0x08003a99
 8003ad8:	08003a99 	.word	0x08003a99
 8003adc:	08003c1b 	.word	0x08003c1b
 8003ae0:	08003b47 	.word	0x08003b47
 8003ae4:	08003bd5 	.word	0x08003bd5
 8003ae8:	08003a99 	.word	0x08003a99
 8003aec:	08003a99 	.word	0x08003a99
 8003af0:	08003c3d 	.word	0x08003c3d
 8003af4:	08003a99 	.word	0x08003a99
 8003af8:	08003b47 	.word	0x08003b47
 8003afc:	08003a99 	.word	0x08003a99
 8003b00:	08003a99 	.word	0x08003a99
 8003b04:	08003bdd 	.word	0x08003bdd
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6032      	str	r2, [r6, #0]
 8003b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e09c      	b.n	8003c56 <_printf_i+0x1e6>
 8003b1c:	6833      	ldr	r3, [r6, #0]
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	1d19      	adds	r1, r3, #4
 8003b22:	6031      	str	r1, [r6, #0]
 8003b24:	0606      	lsls	r6, r0, #24
 8003b26:	d501      	bpl.n	8003b2c <_printf_i+0xbc>
 8003b28:	681d      	ldr	r5, [r3, #0]
 8003b2a:	e003      	b.n	8003b34 <_printf_i+0xc4>
 8003b2c:	0645      	lsls	r5, r0, #25
 8003b2e:	d5fb      	bpl.n	8003b28 <_printf_i+0xb8>
 8003b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b34:	2d00      	cmp	r5, #0
 8003b36:	da03      	bge.n	8003b40 <_printf_i+0xd0>
 8003b38:	232d      	movs	r3, #45	@ 0x2d
 8003b3a:	426d      	negs	r5, r5
 8003b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b40:	4858      	ldr	r0, [pc, #352]	@ (8003ca4 <_printf_i+0x234>)
 8003b42:	230a      	movs	r3, #10
 8003b44:	e011      	b.n	8003b6a <_printf_i+0xfa>
 8003b46:	6821      	ldr	r1, [r4, #0]
 8003b48:	6833      	ldr	r3, [r6, #0]
 8003b4a:	0608      	lsls	r0, r1, #24
 8003b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b50:	d402      	bmi.n	8003b58 <_printf_i+0xe8>
 8003b52:	0649      	lsls	r1, r1, #25
 8003b54:	bf48      	it	mi
 8003b56:	b2ad      	uxthmi	r5, r5
 8003b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b5a:	4852      	ldr	r0, [pc, #328]	@ (8003ca4 <_printf_i+0x234>)
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	bf14      	ite	ne
 8003b60:	230a      	movne	r3, #10
 8003b62:	2308      	moveq	r3, #8
 8003b64:	2100      	movs	r1, #0
 8003b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b6a:	6866      	ldr	r6, [r4, #4]
 8003b6c:	60a6      	str	r6, [r4, #8]
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	db05      	blt.n	8003b7e <_printf_i+0x10e>
 8003b72:	6821      	ldr	r1, [r4, #0]
 8003b74:	432e      	orrs	r6, r5
 8003b76:	f021 0104 	bic.w	r1, r1, #4
 8003b7a:	6021      	str	r1, [r4, #0]
 8003b7c:	d04b      	beq.n	8003c16 <_printf_i+0x1a6>
 8003b7e:	4616      	mov	r6, r2
 8003b80:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b84:	fb03 5711 	mls	r7, r3, r1, r5
 8003b88:	5dc7      	ldrb	r7, [r0, r7]
 8003b8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b8e:	462f      	mov	r7, r5
 8003b90:	42bb      	cmp	r3, r7
 8003b92:	460d      	mov	r5, r1
 8003b94:	d9f4      	bls.n	8003b80 <_printf_i+0x110>
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d10b      	bne.n	8003bb2 <_printf_i+0x142>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	07df      	lsls	r7, r3, #31
 8003b9e:	d508      	bpl.n	8003bb2 <_printf_i+0x142>
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	6861      	ldr	r1, [r4, #4]
 8003ba4:	4299      	cmp	r1, r3
 8003ba6:	bfde      	ittt	le
 8003ba8:	2330      	movle	r3, #48	@ 0x30
 8003baa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bb2:	1b92      	subs	r2, r2, r6
 8003bb4:	6122      	str	r2, [r4, #16]
 8003bb6:	f8cd a000 	str.w	sl, [sp]
 8003bba:	464b      	mov	r3, r9
 8003bbc:	aa03      	add	r2, sp, #12
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	f7ff fee7 	bl	8003994 <_printf_common>
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d14a      	bne.n	8003c60 <_printf_i+0x1f0>
 8003bca:	f04f 30ff 	mov.w	r0, #4294967295
 8003bce:	b004      	add	sp, #16
 8003bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	f043 0320 	orr.w	r3, r3, #32
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	4832      	ldr	r0, [pc, #200]	@ (8003ca8 <_printf_i+0x238>)
 8003bde:	2778      	movs	r7, #120	@ 0x78
 8003be0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	6831      	ldr	r1, [r6, #0]
 8003be8:	061f      	lsls	r7, r3, #24
 8003bea:	f851 5b04 	ldr.w	r5, [r1], #4
 8003bee:	d402      	bmi.n	8003bf6 <_printf_i+0x186>
 8003bf0:	065f      	lsls	r7, r3, #25
 8003bf2:	bf48      	it	mi
 8003bf4:	b2ad      	uxthmi	r5, r5
 8003bf6:	6031      	str	r1, [r6, #0]
 8003bf8:	07d9      	lsls	r1, r3, #31
 8003bfa:	bf44      	itt	mi
 8003bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8003c00:	6023      	strmi	r3, [r4, #0]
 8003c02:	b11d      	cbz	r5, 8003c0c <_printf_i+0x19c>
 8003c04:	2310      	movs	r3, #16
 8003c06:	e7ad      	b.n	8003b64 <_printf_i+0xf4>
 8003c08:	4826      	ldr	r0, [pc, #152]	@ (8003ca4 <_printf_i+0x234>)
 8003c0a:	e7e9      	b.n	8003be0 <_printf_i+0x170>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	f023 0320 	bic.w	r3, r3, #32
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	e7f6      	b.n	8003c04 <_printf_i+0x194>
 8003c16:	4616      	mov	r6, r2
 8003c18:	e7bd      	b.n	8003b96 <_printf_i+0x126>
 8003c1a:	6833      	ldr	r3, [r6, #0]
 8003c1c:	6825      	ldr	r5, [r4, #0]
 8003c1e:	6961      	ldr	r1, [r4, #20]
 8003c20:	1d18      	adds	r0, r3, #4
 8003c22:	6030      	str	r0, [r6, #0]
 8003c24:	062e      	lsls	r6, r5, #24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	d501      	bpl.n	8003c2e <_printf_i+0x1be>
 8003c2a:	6019      	str	r1, [r3, #0]
 8003c2c:	e002      	b.n	8003c34 <_printf_i+0x1c4>
 8003c2e:	0668      	lsls	r0, r5, #25
 8003c30:	d5fb      	bpl.n	8003c2a <_printf_i+0x1ba>
 8003c32:	8019      	strh	r1, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	6123      	str	r3, [r4, #16]
 8003c38:	4616      	mov	r6, r2
 8003c3a:	e7bc      	b.n	8003bb6 <_printf_i+0x146>
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	1d1a      	adds	r2, r3, #4
 8003c40:	6032      	str	r2, [r6, #0]
 8003c42:	681e      	ldr	r6, [r3, #0]
 8003c44:	6862      	ldr	r2, [r4, #4]
 8003c46:	2100      	movs	r1, #0
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f7fc fac1 	bl	80001d0 <memchr>
 8003c4e:	b108      	cbz	r0, 8003c54 <_printf_i+0x1e4>
 8003c50:	1b80      	subs	r0, r0, r6
 8003c52:	6060      	str	r0, [r4, #4]
 8003c54:	6863      	ldr	r3, [r4, #4]
 8003c56:	6123      	str	r3, [r4, #16]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c5e:	e7aa      	b.n	8003bb6 <_printf_i+0x146>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	4632      	mov	r2, r6
 8003c64:	4649      	mov	r1, r9
 8003c66:	4640      	mov	r0, r8
 8003c68:	47d0      	blx	sl
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d0ad      	beq.n	8003bca <_printf_i+0x15a>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	079b      	lsls	r3, r3, #30
 8003c72:	d413      	bmi.n	8003c9c <_printf_i+0x22c>
 8003c74:	68e0      	ldr	r0, [r4, #12]
 8003c76:	9b03      	ldr	r3, [sp, #12]
 8003c78:	4298      	cmp	r0, r3
 8003c7a:	bfb8      	it	lt
 8003c7c:	4618      	movlt	r0, r3
 8003c7e:	e7a6      	b.n	8003bce <_printf_i+0x15e>
 8003c80:	2301      	movs	r3, #1
 8003c82:	4632      	mov	r2, r6
 8003c84:	4649      	mov	r1, r9
 8003c86:	4640      	mov	r0, r8
 8003c88:	47d0      	blx	sl
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d09d      	beq.n	8003bca <_printf_i+0x15a>
 8003c8e:	3501      	adds	r5, #1
 8003c90:	68e3      	ldr	r3, [r4, #12]
 8003c92:	9903      	ldr	r1, [sp, #12]
 8003c94:	1a5b      	subs	r3, r3, r1
 8003c96:	42ab      	cmp	r3, r5
 8003c98:	dcf2      	bgt.n	8003c80 <_printf_i+0x210>
 8003c9a:	e7eb      	b.n	8003c74 <_printf_i+0x204>
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	f104 0619 	add.w	r6, r4, #25
 8003ca2:	e7f5      	b.n	8003c90 <_printf_i+0x220>
 8003ca4:	08004094 	.word	0x08004094
 8003ca8:	080040a5 	.word	0x080040a5

08003cac <__swbuf_r>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	460e      	mov	r6, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	b118      	cbz	r0, 8003cbe <__swbuf_r+0x12>
 8003cb6:	6a03      	ldr	r3, [r0, #32]
 8003cb8:	b90b      	cbnz	r3, 8003cbe <__swbuf_r+0x12>
 8003cba:	f7ff fa41 	bl	8003140 <__sinit>
 8003cbe:	69a3      	ldr	r3, [r4, #24]
 8003cc0:	60a3      	str	r3, [r4, #8]
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	071a      	lsls	r2, r3, #28
 8003cc6:	d501      	bpl.n	8003ccc <__swbuf_r+0x20>
 8003cc8:	6923      	ldr	r3, [r4, #16]
 8003cca:	b943      	cbnz	r3, 8003cde <__swbuf_r+0x32>
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f82a 	bl	8003d28 <__swsetup_r>
 8003cd4:	b118      	cbz	r0, 8003cde <__swbuf_r+0x32>
 8003cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8003cda:	4638      	mov	r0, r7
 8003cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	6922      	ldr	r2, [r4, #16]
 8003ce2:	1a98      	subs	r0, r3, r2
 8003ce4:	6963      	ldr	r3, [r4, #20]
 8003ce6:	b2f6      	uxtb	r6, r6
 8003ce8:	4283      	cmp	r3, r0
 8003cea:	4637      	mov	r7, r6
 8003cec:	dc05      	bgt.n	8003cfa <__swbuf_r+0x4e>
 8003cee:	4621      	mov	r1, r4
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7ff fcbd 	bl	8003670 <_fflush_r>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d1ed      	bne.n	8003cd6 <__swbuf_r+0x2a>
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60a3      	str	r3, [r4, #8]
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	6022      	str	r2, [r4, #0]
 8003d06:	701e      	strb	r6, [r3, #0]
 8003d08:	6962      	ldr	r2, [r4, #20]
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d004      	beq.n	8003d1a <__swbuf_r+0x6e>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	07db      	lsls	r3, r3, #31
 8003d14:	d5e1      	bpl.n	8003cda <__swbuf_r+0x2e>
 8003d16:	2e0a      	cmp	r6, #10
 8003d18:	d1df      	bne.n	8003cda <__swbuf_r+0x2e>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f7ff fca7 	bl	8003670 <_fflush_r>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d0d9      	beq.n	8003cda <__swbuf_r+0x2e>
 8003d26:	e7d6      	b.n	8003cd6 <__swbuf_r+0x2a>

08003d28 <__swsetup_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <__swsetup_r+0xa8>)
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	460c      	mov	r4, r1
 8003d32:	b118      	cbz	r0, 8003d3c <__swsetup_r+0x14>
 8003d34:	6a03      	ldr	r3, [r0, #32]
 8003d36:	b90b      	cbnz	r3, 8003d3c <__swsetup_r+0x14>
 8003d38:	f7ff fa02 	bl	8003140 <__sinit>
 8003d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d40:	0719      	lsls	r1, r3, #28
 8003d42:	d422      	bmi.n	8003d8a <__swsetup_r+0x62>
 8003d44:	06da      	lsls	r2, r3, #27
 8003d46:	d407      	bmi.n	8003d58 <__swsetup_r+0x30>
 8003d48:	2209      	movs	r2, #9
 8003d4a:	602a      	str	r2, [r5, #0]
 8003d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d50:	81a3      	strh	r3, [r4, #12]
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	e033      	b.n	8003dc0 <__swsetup_r+0x98>
 8003d58:	0758      	lsls	r0, r3, #29
 8003d5a:	d512      	bpl.n	8003d82 <__swsetup_r+0x5a>
 8003d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d5e:	b141      	cbz	r1, 8003d72 <__swsetup_r+0x4a>
 8003d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d64:	4299      	cmp	r1, r3
 8003d66:	d002      	beq.n	8003d6e <__swsetup_r+0x46>
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff fafd 	bl	8003368 <_free_r>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	b94b      	cbnz	r3, 8003da2 <__swsetup_r+0x7a>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d98:	d003      	beq.n	8003da2 <__swsetup_r+0x7a>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f000 f883 	bl	8003ea8 <__smakebuf_r>
 8003da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da6:	f013 0201 	ands.w	r2, r3, #1
 8003daa:	d00a      	beq.n	8003dc2 <__swsetup_r+0x9a>
 8003dac:	2200      	movs	r2, #0
 8003dae:	60a2      	str	r2, [r4, #8]
 8003db0:	6962      	ldr	r2, [r4, #20]
 8003db2:	4252      	negs	r2, r2
 8003db4:	61a2      	str	r2, [r4, #24]
 8003db6:	6922      	ldr	r2, [r4, #16]
 8003db8:	b942      	cbnz	r2, 8003dcc <__swsetup_r+0xa4>
 8003dba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dbe:	d1c5      	bne.n	8003d4c <__swsetup_r+0x24>
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	0799      	lsls	r1, r3, #30
 8003dc4:	bf58      	it	pl
 8003dc6:	6962      	ldrpl	r2, [r4, #20]
 8003dc8:	60a2      	str	r2, [r4, #8]
 8003dca:	e7f4      	b.n	8003db6 <__swsetup_r+0x8e>
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e7f7      	b.n	8003dc0 <__swsetup_r+0x98>
 8003dd0:	20000018 	.word	0x20000018

08003dd4 <_raise_r>:
 8003dd4:	291f      	cmp	r1, #31
 8003dd6:	b538      	push	{r3, r4, r5, lr}
 8003dd8:	4605      	mov	r5, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	d904      	bls.n	8003de8 <_raise_r+0x14>
 8003dde:	2316      	movs	r3, #22
 8003de0:	6003      	str	r3, [r0, #0]
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003dea:	b112      	cbz	r2, 8003df2 <_raise_r+0x1e>
 8003dec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003df0:	b94b      	cbnz	r3, 8003e06 <_raise_r+0x32>
 8003df2:	4628      	mov	r0, r5
 8003df4:	f000 f830 	bl	8003e58 <_getpid_r>
 8003df8:	4622      	mov	r2, r4
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e02:	f000 b817 	b.w	8003e34 <_kill_r>
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d00a      	beq.n	8003e20 <_raise_r+0x4c>
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	d103      	bne.n	8003e16 <_raise_r+0x42>
 8003e0e:	2316      	movs	r3, #22
 8003e10:	6003      	str	r3, [r0, #0]
 8003e12:	2001      	movs	r0, #1
 8003e14:	e7e7      	b.n	8003de6 <_raise_r+0x12>
 8003e16:	2100      	movs	r1, #0
 8003e18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4798      	blx	r3
 8003e20:	2000      	movs	r0, #0
 8003e22:	e7e0      	b.n	8003de6 <_raise_r+0x12>

08003e24 <raise>:
 8003e24:	4b02      	ldr	r3, [pc, #8]	@ (8003e30 <raise+0xc>)
 8003e26:	4601      	mov	r1, r0
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f7ff bfd3 	b.w	8003dd4 <_raise_r>
 8003e2e:	bf00      	nop
 8003e30:	20000018 	.word	0x20000018

08003e34 <_kill_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d07      	ldr	r5, [pc, #28]	@ (8003e54 <_kill_r+0x20>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	602b      	str	r3, [r5, #0]
 8003e42:	f7fc fdfa 	bl	8000a3a <_kill>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	d102      	bne.n	8003e50 <_kill_r+0x1c>
 8003e4a:	682b      	ldr	r3, [r5, #0]
 8003e4c:	b103      	cbz	r3, 8003e50 <_kill_r+0x1c>
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	bd38      	pop	{r3, r4, r5, pc}
 8003e52:	bf00      	nop
 8003e54:	20000250 	.word	0x20000250

08003e58 <_getpid_r>:
 8003e58:	f7fc bde7 	b.w	8000a2a <_getpid>

08003e5c <__swhatbuf_r>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	460c      	mov	r4, r1
 8003e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e64:	2900      	cmp	r1, #0
 8003e66:	b096      	sub	sp, #88	@ 0x58
 8003e68:	4615      	mov	r5, r2
 8003e6a:	461e      	mov	r6, r3
 8003e6c:	da0d      	bge.n	8003e8a <__swhatbuf_r+0x2e>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e74:	f04f 0100 	mov.w	r1, #0
 8003e78:	bf14      	ite	ne
 8003e7a:	2340      	movne	r3, #64	@ 0x40
 8003e7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e80:	2000      	movs	r0, #0
 8003e82:	6031      	str	r1, [r6, #0]
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	b016      	add	sp, #88	@ 0x58
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
 8003e8a:	466a      	mov	r2, sp
 8003e8c:	f000 f848 	bl	8003f20 <_fstat_r>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	dbec      	blt.n	8003e6e <__swhatbuf_r+0x12>
 8003e94:	9901      	ldr	r1, [sp, #4]
 8003e96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e9e:	4259      	negs	r1, r3
 8003ea0:	4159      	adcs	r1, r3
 8003ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ea6:	e7eb      	b.n	8003e80 <__swhatbuf_r+0x24>

08003ea8 <__smakebuf_r>:
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eac:	079d      	lsls	r5, r3, #30
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	d507      	bpl.n	8003ec4 <__smakebuf_r+0x1c>
 8003eb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	6163      	str	r3, [r4, #20]
 8003ec0:	b003      	add	sp, #12
 8003ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec4:	ab01      	add	r3, sp, #4
 8003ec6:	466a      	mov	r2, sp
 8003ec8:	f7ff ffc8 	bl	8003e5c <__swhatbuf_r>
 8003ecc:	9f00      	ldr	r7, [sp, #0]
 8003ece:	4605      	mov	r5, r0
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f7ff fabc 	bl	8003450 <_malloc_r>
 8003ed8:	b948      	cbnz	r0, 8003eee <__smakebuf_r+0x46>
 8003eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ede:	059a      	lsls	r2, r3, #22
 8003ee0:	d4ee      	bmi.n	8003ec0 <__smakebuf_r+0x18>
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	f043 0302 	orr.w	r3, r3, #2
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	e7e2      	b.n	8003eb4 <__smakebuf_r+0xc>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	6020      	str	r0, [r4, #0]
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	9b01      	ldr	r3, [sp, #4]
 8003efa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003efe:	b15b      	cbz	r3, 8003f18 <__smakebuf_r+0x70>
 8003f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f81d 	bl	8003f44 <_isatty_r>
 8003f0a:	b128      	cbz	r0, 8003f18 <__smakebuf_r+0x70>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	431d      	orrs	r5, r3
 8003f1c:	81a5      	strh	r5, [r4, #12]
 8003f1e:	e7cf      	b.n	8003ec0 <__smakebuf_r+0x18>

08003f20 <_fstat_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d07      	ldr	r5, [pc, #28]	@ (8003f40 <_fstat_r+0x20>)
 8003f24:	2300      	movs	r3, #0
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	602b      	str	r3, [r5, #0]
 8003f2e:	f7fc fde4 	bl	8000afa <_fstat>
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	d102      	bne.n	8003f3c <_fstat_r+0x1c>
 8003f36:	682b      	ldr	r3, [r5, #0]
 8003f38:	b103      	cbz	r3, 8003f3c <_fstat_r+0x1c>
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000250 	.word	0x20000250

08003f44 <_isatty_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d06      	ldr	r5, [pc, #24]	@ (8003f60 <_isatty_r+0x1c>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f7fc fde3 	bl	8000b1a <_isatty>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_isatty_r+0x1a>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_isatty_r+0x1a>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000250 	.word	0x20000250

08003f64 <_init>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr

08003f70 <_fini>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr
