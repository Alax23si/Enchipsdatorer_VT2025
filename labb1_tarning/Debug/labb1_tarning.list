
labb1_tarning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ee0  08002ee0  00003ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f28  08002f28  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f28  08002f28  00003f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f30  08002f30  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f30  08002f30  00003f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f34  08002f34  00003f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002f44  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002f44  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a099  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001765  00000000  00000000  0000e0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006aa  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002097f  00000000  00000000  0001079a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0b4  00000000  00000000  00031119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70b0  00000000  00000000  0003b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010227d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022cc  00000000  00000000  001022c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010458c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ec8 	.word	0x08002ec8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002ec8 	.word	0x08002ec8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <is_blue_button_pressed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// returns 1 if b button is pressed
//reutrns 0 if not
int is_blue_button_pressed(){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	return GPIOC->IDR;
 80004fc:	4b03      	ldr	r3, [pc, #12]	@ (800050c <is_blue_button_pressed+0x14>)
 80004fe:	691b      	ldr	r3, [r3, #16]
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	48000800 	.word	0x48000800

08000510 <put_die_dots>:
void put_die_dots(uint8_t die_nbr){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	486c      	ldr	r0, [pc, #432]	@ (80006d0 <put_die_dots+0x1c0>)
 8000520:	f000 fdf2 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2102      	movs	r1, #2
 8000528:	4869      	ldr	r0, [pc, #420]	@ (80006d0 <put_die_dots+0x1c0>)
 800052a:	f000 fded 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DI_C_GPIO_Port, DI_C_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2104      	movs	r1, #4
 8000532:	4867      	ldr	r0, [pc, #412]	@ (80006d0 <put_die_dots+0x1c0>)
 8000534:	f000 fde8 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_D_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800053e:	4864      	ldr	r0, [pc, #400]	@ (80006d0 <put_die_dots+0x1c0>)
 8000540:	f000 fde2 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_E_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800054a:	4861      	ldr	r0, [pc, #388]	@ (80006d0 <put_die_dots+0x1c0>)
 800054c:	f000 fddc 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DI_F_GPIO_Port, DI_F_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000556:	485e      	ldr	r0, [pc, #376]	@ (80006d0 <put_die_dots+0x1c0>)
 8000558:	f000 fdd6 	bl	8001108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DI_G_GPIO_Port, DI_G_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000562:	485b      	ldr	r0, [pc, #364]	@ (80006d0 <put_die_dots+0x1c0>)
 8000564:	f000 fdd0 	bl	8001108 <HAL_GPIO_WritePin>
	switch(die_nbr){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	3b01      	subs	r3, #1
 800056c:	2b05      	cmp	r3, #5
 800056e:	f200 8083 	bhi.w	8000678 <put_die_dots+0x168>
 8000572:	a201      	add	r2, pc, #4	@ (adr r2, 8000578 <put_die_dots+0x68>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	08000591 	.word	0x08000591
 800057c:	0800059d 	.word	0x0800059d
 8000580:	080005b3 	.word	0x080005b3
 8000584:	080005d1 	.word	0x080005d1
 8000588:	080005fd 	.word	0x080005fd
 800058c:	08000635 	.word	0x08000635
	case 1:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	484e      	ldr	r0, [pc, #312]	@ (80006d0 <put_die_dots+0x1c0>)
 8000596:	f000 fdb7 	bl	8001108 <HAL_GPIO_WritePin>
		break;
 800059a:	e095      	b.n	80006c8 <put_die_dots+0x1b8>
	case 2:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	484b      	ldr	r0, [pc, #300]	@ (80006d0 <put_die_dots+0x1c0>)
 80005a2:	f000 fdb1 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2102      	movs	r1, #2
 80005aa:	4849      	ldr	r0, [pc, #292]	@ (80006d0 <put_die_dots+0x1c0>)
 80005ac:	f000 fdac 	bl	8001108 <HAL_GPIO_WritePin>
		break;
 80005b0:	e08a      	b.n	80006c8 <put_die_dots+0x1b8>
	case 3:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2101      	movs	r1, #1
 80005b6:	4846      	ldr	r0, [pc, #280]	@ (80006d0 <put_die_dots+0x1c0>)
 80005b8:	f000 fda6 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	4843      	ldr	r0, [pc, #268]	@ (80006d0 <put_die_dots+0x1c0>)
 80005c2:	f000 fda1 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_C_GPIO_Port, DI_C_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	4841      	ldr	r0, [pc, #260]	@ (80006d0 <put_die_dots+0x1c0>)
 80005cc:	f000 fd9c 	bl	8001108 <HAL_GPIO_WritePin>
	case 4:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	483e      	ldr	r0, [pc, #248]	@ (80006d0 <put_die_dots+0x1c0>)
 80005d6:	f000 fd97 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2102      	movs	r1, #2
 80005de:	483c      	ldr	r0, [pc, #240]	@ (80006d0 <put_die_dots+0x1c0>)
 80005e0:	f000 fd92 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_C_GPIO_Port, DI_C_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2104      	movs	r1, #4
 80005e8:	4839      	ldr	r0, [pc, #228]	@ (80006d0 <put_die_dots+0x1c0>)
 80005ea:	f000 fd8d 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_D_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f4:	4836      	ldr	r0, [pc, #216]	@ (80006d0 <put_die_dots+0x1c0>)
 80005f6:	f000 fd87 	bl	8001108 <HAL_GPIO_WritePin>
		break;
 80005fa:	e065      	b.n	80006c8 <put_die_dots+0x1b8>
	case 5:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	4833      	ldr	r0, [pc, #204]	@ (80006d0 <put_die_dots+0x1c0>)
 8000602:	f000 fd81 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2102      	movs	r1, #2
 800060a:	4831      	ldr	r0, [pc, #196]	@ (80006d0 <put_die_dots+0x1c0>)
 800060c:	f000 fd7c 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_C_GPIO_Port, DI_C_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2104      	movs	r1, #4
 8000614:	482e      	ldr	r0, [pc, #184]	@ (80006d0 <put_die_dots+0x1c0>)
 8000616:	f000 fd77 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_D_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000620:	482b      	ldr	r0, [pc, #172]	@ (80006d0 <put_die_dots+0x1c0>)
 8000622:	f000 fd71 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_E_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800062c:	4828      	ldr	r0, [pc, #160]	@ (80006d0 <put_die_dots+0x1c0>)
 800062e:	f000 fd6b 	bl	8001108 <HAL_GPIO_WritePin>
		break;
 8000632:	e049      	b.n	80006c8 <put_die_dots+0x1b8>
	case 6:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4825      	ldr	r0, [pc, #148]	@ (80006d0 <put_die_dots+0x1c0>)
 800063a:	f000 fd65 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4823      	ldr	r0, [pc, #140]	@ (80006d0 <put_die_dots+0x1c0>)
 8000644:	f000 fd60 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_C_GPIO_Port, DI_C_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2104      	movs	r1, #4
 800064c:	4820      	ldr	r0, [pc, #128]	@ (80006d0 <put_die_dots+0x1c0>)
 800064e:	f000 fd5b 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_D_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000658:	481d      	ldr	r0, [pc, #116]	@ (80006d0 <put_die_dots+0x1c0>)
 800065a:	f000 fd55 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_E_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000664:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <put_die_dots+0x1c0>)
 8000666:	f000 fd4f 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_F_GPIO_Port, DI_F_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000670:	4817      	ldr	r0, [pc, #92]	@ (80006d0 <put_die_dots+0x1c0>)
 8000672:	f000 fd49 	bl	8001108 <HAL_GPIO_WritePin>
		break;
 8000676:	e027      	b.n	80006c8 <put_die_dots+0x1b8>
	default:
		HAL_GPIO_WritePin(DI_A_GPIO_Port, DI_A_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2101      	movs	r1, #1
 800067c:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <put_die_dots+0x1c0>)
 800067e:	f000 fd43 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_B_GPIO_Port, DI_B_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2102      	movs	r1, #2
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <put_die_dots+0x1c0>)
 8000688:	f000 fd3e 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_C_GPIO_Port, DI_C_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2104      	movs	r1, #4
 8000690:	480f      	ldr	r0, [pc, #60]	@ (80006d0 <put_die_dots+0x1c0>)
 8000692:	f000 fd39 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_D_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <put_die_dots+0x1c0>)
 800069e:	f000 fd33 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_D_GPIO_Port, DI_E_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <put_die_dots+0x1c0>)
 80006aa:	f000 fd2d 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_F_GPIO_Port, DI_F_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <put_die_dots+0x1c0>)
 80006b6:	f000 fd27 	bl	8001108 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DI_G_GPIO_Port, DI_G_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <put_die_dots+0x1c0>)
 80006c2:	f000 fd21 	bl	8001108 <HAL_GPIO_WritePin>
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000400 	.word	0x48000400

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fa39 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f83b 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f8bb 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 f889 	bl	80007fc <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //srand(time(1));
  int pressed = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  uint8_t die_value = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pressed = is_blue_button_pressed();
 80006f2:	f7ff ff01 	bl	80004f8 <is_blue_button_pressed>
 80006f6:	60b8      	str	r0, [r7, #8]
	  	  if(pressed){
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d009      	beq.n	8000712 <main+0x3e>
	  		  HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0x7c>)
 8000706:	f000 fcff 	bl	8001108 <HAL_GPIO_WritePin>
	  		  die_value ++;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3301      	adds	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e7ef      	b.n	80006f2 <main+0x1e>
	  	  }
	  	  else{

	  		  GPIO_TypeDef* ld4_gpio = GPIOB;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <main+0x7c>)
 8000714:	607b      	str	r3, [r7, #4]
	  		  uint16_t ld4_pin_nbr = 13;
 8000716:	230d      	movs	r3, #13
 8000718:	807b      	strh	r3, [r7, #2]
	  		  uint16_t ld4_pin = 0x01 << ld4_pin_nbr;
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	2201      	movs	r2, #1
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	803b      	strh	r3, [r7, #0]
	  		  HAL_GPIO_WritePin(ld4_gpio,ld4_pin, GPIO_PIN_RESET);
 8000724:	883b      	ldrh	r3, [r7, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 fcec 	bl	8001108 <HAL_GPIO_WritePin>
	  		  put_die_dots(die_value % 6);
 8000730:	7bfa      	ldrb	r2, [r7, #15]
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <main+0x80>)
 8000734:	fba3 1302 	umull	r1, r3, r3, r2
 8000738:	0899      	lsrs	r1, r3, #2
 800073a:	460b      	mov	r3, r1
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	440b      	add	r3, r1
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fee2 	bl	8000510 <put_die_dots>
	  pressed = is_blue_button_pressed();
 800074c:	e7d1      	b.n	80006f2 <main+0x1e>
 800074e:	bf00      	nop
 8000750:	48000400 	.word	0x48000400
 8000754:	aaaaaaab 	.word	0xaaaaaaab

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b096      	sub	sp, #88	@ 0x58
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2244      	movs	r2, #68	@ 0x44
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fb81 	bl	8002e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800077e:	f000 fce9 	bl	8001154 <HAL_PWREx_ControlVoltageScaling>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000788:	f000 f8f2 	bl	8000970 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000794:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2310      	movs	r3, #16
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007a6:	230a      	movs	r3, #10
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007aa:	2307      	movs	r3, #7
 80007ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fd20 	bl	8001200 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007c6:	f000 f8d3 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2104      	movs	r1, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 f920 	bl	8001a28 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ee:	f000 f8bf 	bl	8000970 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3758      	adds	r7, #88	@ 0x58
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_USART2_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000840:	f001 fe52 	bl	80024e8 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f891 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000028 	.word	0x20000028
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b3c      	ldr	r3, [pc, #240]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a3b      	ldr	r2, [pc, #236]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b39      	ldr	r3, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	4b36      	ldr	r3, [pc, #216]	@ (8000964 <MX_GPIO_Init+0x108>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a35      	ldr	r2, [pc, #212]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a29      	ldr	r2, [pc, #164]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	21b0      	movs	r1, #176	@ 0xb0
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f000 fc15 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DI_A_Pin|DI_B_Pin|DI_C_Pin|DI_D_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f64e 4107 	movw	r1, #60423	@ 0xec07
 80008e4:	4820      	ldr	r0, [pc, #128]	@ (8000968 <MX_GPIO_Init+0x10c>)
 80008e6:	f000 fc0f 	bl	8001108 <HAL_GPIO_WritePin>
                          |DI_E_Pin|LD4_Pin|DI_F_Pin|DI_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	481a      	ldr	r0, [pc, #104]	@ (800096c <MX_GPIO_Init+0x110>)
 8000902:	f000 fa87 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000906:	23b0      	movs	r3, #176	@ 0xb0
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f000 fa78 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000924:	2340      	movs	r3, #64	@ 0x40
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f000 fa6b 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_A_Pin DI_B_Pin DI_C_Pin DI_D_Pin
                           DI_E_Pin LD4_Pin DI_F_Pin DI_G_Pin */
  GPIO_InitStruct.Pin = DI_A_Pin|DI_B_Pin|DI_C_Pin|DI_D_Pin
 800093e:	f64e 4307 	movw	r3, #60423	@ 0xec07
 8000942:	617b      	str	r3, [r7, #20]
                          |DI_E_Pin|LD4_Pin|DI_F_Pin|DI_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_GPIO_Init+0x10c>)
 8000958:	f000 fa5c 	bl	8000e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	@ 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400
 800096c:	48000800 	.word	0x48000800

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6613      	str	r3, [r2, #96]	@ 0x60
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0a2      	sub	sp, #136	@ 0x88
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2260      	movs	r2, #96	@ 0x60
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fa42 	bl	8002e6e <memset>
  if(huart->Instance==USART2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <HAL_UART_MspInit+0xac>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d138      	bne.n	8000a66 <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fa35 	bl	8001e70 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a0c:	f7ff ffb0 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_UART_MspInit+0xb0>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a14:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <HAL_UART_MspInit+0xb0>)
 8000a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_UART_MspInit+0xb0>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_UART_MspInit+0xb0>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2c:	4a11      	ldr	r2, [pc, #68]	@ (8000a74 <HAL_UART_MspInit+0xb0>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_UART_MspInit+0xb0>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a40:	230c      	movs	r3, #12
 8000a42:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a62:	f000 f9d7 	bl	8000e14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a66:	bf00      	nop
 8000a68:	3788      	adds	r7, #136	@ 0x88
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f89b 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 f9a9 	bl	8002e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fdd1 	bl	80006d4 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b40:	08002f38 	.word	0x08002f38
  ldr r2, =_sbss
 8000b44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b48:	200000b4 	.word	0x200000b4

08000b4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <HAL_Init+0x3c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <HAL_Init+0x3c>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f000 f920 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f80f 	bl	8000b90 <HAL_InitTick>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	e001      	b.n	8000b82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7e:	f7ff fefd 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <HAL_InitTick+0x6c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d023      	beq.n	8000bec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_InitTick+0x70>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_InitTick+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f91d 	bl	8000dfa <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10f      	bne.n	8000be6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d809      	bhi.n	8000be0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f8f5 	bl	8000dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <HAL_InitTick+0x74>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e007      	b.n	8000bf0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e004      	b.n	8000bf0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e001      	b.n	8000bf0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200000b0 	.word	0x200000b0

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200000b0 	.word	0x200000b0

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	@ (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	@ (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	@ 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff47 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5c 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb0 	bl	8000d68 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e154      	b.n	80010ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8146 	beq.w	80010c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x40>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80a0 	beq.w	80010c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b58      	ldr	r3, [pc, #352]	@ (80010ec <HAL_GPIO_Init+0x2d8>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8c:	4a57      	ldr	r2, [pc, #348]	@ (80010ec <HAL_GPIO_Init+0x2d8>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f94:	4b55      	ldr	r3, [pc, #340]	@ (80010ec <HAL_GPIO_Init+0x2d8>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa0:	4a53      	ldr	r2, [pc, #332]	@ (80010f0 <HAL_GPIO_Init+0x2dc>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fca:	d019      	beq.n	8001000 <HAL_GPIO_Init+0x1ec>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a49      	ldr	r2, [pc, #292]	@ (80010f4 <HAL_GPIO_Init+0x2e0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x1e8>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a48      	ldr	r2, [pc, #288]	@ (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a47      	ldr	r2, [pc, #284]	@ (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	@ (8001100 <HAL_GPIO_Init+0x2ec>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1dc>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e008      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8001000:	2300      	movs	r3, #0
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001012:	4937      	ldr	r1, [pc, #220]	@ (80010f0 <HAL_GPIO_Init+0x2dc>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001020:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001044:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800106e:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001098:	4a1a      	ldr	r2, [pc, #104]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c2:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <HAL_GPIO_Init+0x2f0>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f aea3 	bne.w	8000e24 <HAL_GPIO_Init+0x10>
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800
 80010fc:	48000c00 	.word	0x48000c00
 8001100:	48001000 	.word	0x48001000
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001124:	e002      	b.n	800112c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <HAL_PWREx_GetVoltageRange+0x18>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001162:	d130      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800116c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001170:	d038      	beq.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001180:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2232      	movs	r2, #50	@ 0x32
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001198:	e002      	b.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3b01      	subs	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ac:	d102      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f2      	bne.n	800119a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c0:	d110      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e00f      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d2:	d007      	beq.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011dc:	4a05      	ldr	r2, [pc, #20]	@ (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000
 80011f8:	20000000 	.word	0x20000000
 80011fc:	431bde83 	.word	0x431bde83

08001200 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 bc02 	b.w	8001a18 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001214:	4b96      	ldr	r3, [pc, #600]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80e4 	beq.w	80013fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x4c>
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	f040 808b 	bne.w	800135a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b01      	cmp	r3, #1
 8001248:	f040 8087 	bne.w	800135a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124c:	4b88      	ldr	r3, [pc, #544]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x64>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e3d9      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4b81      	ldr	r3, [pc, #516]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_RCC_OscConfig+0x7e>
 8001274:	4b7e      	ldr	r3, [pc, #504]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800127c:	e005      	b.n	800128a <HAL_RCC_OscConfig+0x8a>
 800127e:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800128a:	4293      	cmp	r3, r2
 800128c:	d223      	bcs.n	80012d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fd8c 	bl	8001db0 <RCC_SetFlashLatencyFromMSIRange>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e3ba      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a2:	4b73      	ldr	r3, [pc, #460]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a72      	ldr	r2, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	496d      	ldr	r1, [pc, #436]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	4968      	ldr	r1, [pc, #416]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e025      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d6:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4960      	ldr	r1, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	495b      	ldr	r1, [pc, #364]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fd4c 	bl	8001db0 <RCC_SetFlashLatencyFromMSIRange>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e37a      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001322:	f000 fc81 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001326:	4602      	mov	r2, r0
 8001328:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4950      	ldr	r1, [pc, #320]	@ (8001474 <HAL_RCC_OscConfig+0x274>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a4e      	ldr	r2, [pc, #312]	@ (8001478 <HAL_RCC_OscConfig+0x278>)
 8001340:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001342:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_RCC_OscConfig+0x27c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc22 	bl	8000b90 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d052      	beq.n	80013fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	e35e      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d032      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001362:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a42      	ldr	r2, [pc, #264]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136e:	f7ff fc5f 	bl	8000c30 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001376:	f7ff fc5b 	bl	8000c30 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e347      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001388:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a35      	ldr	r2, [pc, #212]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4930      	ldr	r1, [pc, #192]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	492b      	ldr	r1, [pc, #172]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e01a      	b.n	80013fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a28      	ldr	r2, [pc, #160]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc2c 	bl	8000c30 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc28 	bl	8000c30 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e314      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ee:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1dc>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d073      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x21c>
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d10e      	bne.n	8001434 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d063      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d15f      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e2f1      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x24c>
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e025      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001454:	d114      	bne.n	8001480 <HAL_RCC_OscConfig+0x280>
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a02      	ldr	r2, [pc, #8]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e013      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 8001470:	40021000 	.word	0x40021000
 8001474:	08002ee0 	.word	0x08002ee0
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004
 8001480:	4ba0      	ldr	r3, [pc, #640]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a9f      	ldr	r2, [pc, #636]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b9d      	ldr	r3, [pc, #628]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a9c      	ldr	r2, [pc, #624]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fbc6 	bl	8000c30 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fbc2 	bl	8000c30 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e2ae      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ba:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2a8>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbb2 	bl	8000c30 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fbae 	bl	8000c30 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e29a      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e2:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2d0>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d060      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <HAL_RCC_OscConfig+0x310>
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d119      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x328>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e277      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b76      	ldr	r3, [pc, #472]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	4973      	ldr	r1, [pc, #460]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	e040      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d023      	beq.n	800158e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6e      	ldr	r2, [pc, #440]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fb6d 	bl	8000c30 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fb69 	bl	8000c30 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e255      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b62      	ldr	r3, [pc, #392]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	495f      	ldr	r1, [pc, #380]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e018      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5c      	ldr	r2, [pc, #368]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fb49 	bl	8000c30 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb45 	bl	8000c30 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e231      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d03c      	beq.n	8001646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01c      	beq.n	800160e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015da:	4a4a      	ldr	r2, [pc, #296]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fb24 	bl	8000c30 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fb20 	bl	8000c30 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e20c      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ef      	beq.n	80015ec <HAL_RCC_OscConfig+0x3ec>
 800160c:	e01b      	b.n	8001646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001614:	4a3b      	ldr	r2, [pc, #236]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fb07 	bl	8000c30 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb03 	bl	8000c30 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1ef      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ef      	bne.n	8001626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80a6 	beq.w	80017a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167c:	2301      	movs	r3, #1
 800167e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d118      	bne.n	80016be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001698:	f7ff faca 	bl	8000c30 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a0:	f7ff fac6 	bl	8000c30 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1b2      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d6:	e029      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d115      	bne.n	800170c <HAL_RCC_OscConfig+0x50c>
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a03      	ldr	r2, [pc, #12]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	4b9a      	ldr	r3, [pc, #616]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001712:	4a99      	ldr	r2, [pc, #612]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171c:	4b96      	ldr	r3, [pc, #600]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a95      	ldr	r2, [pc, #596]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d016      	beq.n	8001762 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fa7c 	bl	8000c30 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff fa78 	bl	8000c30 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e162      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001752:	4b89      	ldr	r3, [pc, #548]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ed      	beq.n	800173c <HAL_RCC_OscConfig+0x53c>
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fa65 	bl	8000c30 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fa61 	bl	8000c30 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e14b      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001780:	4b7d      	ldr	r3, [pc, #500]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b78      	ldr	r3, [pc, #480]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a77      	ldr	r2, [pc, #476]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03c      	beq.n	8001826 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01c      	beq.n	80017ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b4:	4b70      	ldr	r3, [pc, #448]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80017b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fa34 	bl	8000c30 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017cc:	f7ff fa30 	bl	8000c30 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e11c      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017de:	4b66      	ldr	r3, [pc, #408]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80017e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ef      	beq.n	80017cc <HAL_RCC_OscConfig+0x5cc>
 80017ec:	e01b      	b.n	8001826 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ee:	4b62      	ldr	r3, [pc, #392]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80017f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f4:	4a60      	ldr	r2, [pc, #384]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa17 	bl	8000c30 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001806:	f7ff fa13 	bl	8000c30 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0ff      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001818:	4b57      	ldr	r3, [pc, #348]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 800181a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ef      	bne.n	8001806 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80f3 	beq.w	8001a16 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80c9 	bne.w	80019cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800183a:	4b4f      	ldr	r3, [pc, #316]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	429a      	cmp	r2, r3
 800184c:	d12c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	3b01      	subs	r3, #1
 800185a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d123      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d11b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d113      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d06b      	beq.n	8001980 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d062      	beq.n	8001974 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ae:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0ac      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018be:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ca:	f7ff f9b1 	bl	8000c30 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f9ad 	bl	8000c30 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e099      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4b21      	ldr	r3, [pc, #132]	@ (800197c <HAL_RCC_OscConfig+0x77c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001900:	3a01      	subs	r2, #1
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800190a:	0212      	lsls	r2, r2, #8
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001912:	0852      	lsrs	r2, r2, #1
 8001914:	3a01      	subs	r2, #1
 8001916:	0552      	lsls	r2, r2, #21
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800191e:	0852      	lsrs	r2, r2, #1
 8001920:	3a01      	subs	r2, #1
 8001922:	0652      	lsls	r2, r2, #25
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800192a:	06d2      	lsls	r2, r2, #27
 800192c:	430a      	orrs	r2, r1
 800192e:	4912      	ldr	r1, [pc, #72]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001934:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0f      	ldr	r2, [pc, #60]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800194c:	f7ff f970 	bl	8000c30 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f96c 	bl	8000c30 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e058      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <HAL_RCC_OscConfig+0x778>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001972:	e050      	b.n	8001a16 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e04f      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
 8001978:	40021000 	.word	0x40021000
 800197c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d144      	bne.n	8001a16 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a23      	ldr	r2, [pc, #140]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001996:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4a20      	ldr	r2, [pc, #128]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a4:	f7ff f944 	bl	8000c30 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f940 	bl	8000c30 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e02c      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x7ac>
 80019ca:	e024      	b.n	8001a16 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d01f      	beq.n	8001a12 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 80019d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f927 	bl	8000c30 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f923 	bl	8000c30 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4905      	ldr	r1, [pc, #20]	@ (8001a20 <HAL_RCC_OscConfig+0x820>)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_OscConfig+0x824>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
 8001a10:	e001      	b.n	8001a16 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	feeefffc 	.word	0xfeeefffc

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0e7      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b75      	ldr	r3, [pc, #468]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d910      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b72      	ldr	r3, [pc, #456]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 0207 	bic.w	r2, r3, #7
 8001a52:	4970      	ldr	r1, [pc, #448]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0cf      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	4b66      	ldr	r3, [pc, #408]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d908      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4960      	ldr	r1, [pc, #384]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d04c      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b5a      	ldr	r3, [pc, #360]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d121      	bne.n	8001afe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0a6      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac6:	4b54      	ldr	r3, [pc, #336]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d115      	bne.n	8001afe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e09a      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e08e      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aee:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e086      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001afe:	4b46      	ldr	r3, [pc, #280]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 0203 	bic.w	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4943      	ldr	r1, [pc, #268]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b10:	f7ff f88e 	bl	8000c30 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff f88a 	bl	8000c30 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e06e      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 020c 	and.w	r2, r3, #12
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1eb      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d208      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	492b      	ldr	r1, [pc, #172]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d210      	bcs.n	8001b9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 0207 	bic.w	r2, r3, #7
 8001b84:	4923      	ldr	r1, [pc, #140]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e036      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4918      	ldr	r1, [pc, #96]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4910      	ldr	r1, [pc, #64]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bdc:	f000 f824 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	490b      	ldr	r1, [pc, #44]	@ (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_RCC_ClockConfig+0x1fc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe ffc5 	bl	8000b90 <HAL_InitTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08002ee0 	.word	0x08002ee0
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c36:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d121      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d11e      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c68:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e005      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c84:	4a2b      	ldr	r2, [pc, #172]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10d      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e004      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cac:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d134      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0xa6>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d003      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ccc:	e005      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cd6:	617b      	str	r3, [r7, #20]
      break;
 8001cd8:	e002      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	fb03 f202 	mul.w	r2, r3, r2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	0e5b      	lsrs	r3, r3, #25
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	3301      	adds	r3, #1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d20:	69bb      	ldr	r3, [r7, #24]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	@ 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08002ef8 	.word	0x08002ef8
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	007a1200 	.word	0x007a1200

08001d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000000 	.word	0x20000000

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d5c:	f7ff fff0 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08002ef0 	.word	0x08002ef0

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d88:	f7ff ffda 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4904      	ldr	r1, [pc, #16]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08002ef0 	.word	0x08002ef0

08001db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc8:	f7ff f9b6 	bl	8001138 <HAL_PWREx_GetVoltageRange>
 8001dcc:	6178      	str	r0, [r7, #20]
 8001dce:	e014      	b.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de8:	f7ff f9a6 	bl	8001138 <HAL_PWREx_GetVoltageRange>
 8001dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e00:	d10b      	bne.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b80      	cmp	r3, #128	@ 0x80
 8001e06:	d919      	bls.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e0c:	d902      	bls.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e0e:	2302      	movs	r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e013      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e010      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b80      	cmp	r3, #128	@ 0x80
 8001e1e:	d902      	bls.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e20:	2303      	movs	r3, #3
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e00a      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	@ 0x80
 8001e2a:	d102      	bne.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e004      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b70      	cmp	r3, #112	@ 0x70
 8001e36:	d101      	bne.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 0207 	bic.w	r2, r3, #7
 8001e44:	4909      	ldr	r1, [pc, #36]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e4c:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d031      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e94:	d01a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e9a:	d814      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb2:	e00c      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fa22 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec4:	e003      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eca:	e000      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed4:	4b51      	ldr	r3, [pc, #324]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	494e      	ldr	r1, [pc, #312]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eea:	e001      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 809e 	beq.w	800203a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b40      	ldr	r3, [pc, #256]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f24:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f34:	4b3a      	ldr	r3, [pc, #232]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a39      	ldr	r2, [pc, #228]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fe76 	bl	8000c30 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f46:	e009      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f48:	f7fe fe72 	bl	8000c30 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d902      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	74fb      	strb	r3, [r7, #19]
        break;
 8001f5a:	e005      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5c:	4b30      	ldr	r3, [pc, #192]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ef      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d15a      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01e      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d019      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f8a:	4b24      	ldr	r3, [pc, #144]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f96:	4b21      	ldr	r3, [pc, #132]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fb6:	4a19      	ldr	r2, [pc, #100]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d016      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fe32 	bl	8000c30 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe fe2e 	bl	8000c30 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d902      	bls.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	74fb      	strb	r3, [r7, #19]
            break;
 8001fe6:	e006      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0ec      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002002:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200a:	4904      	ldr	r1, [pc, #16]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002012:	e009      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
 8002018:	e006      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002028:	7c7b      	ldrb	r3, [r7, #17]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b8d      	ldr	r3, [pc, #564]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	4a8c      	ldr	r2, [pc, #560]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002046:	4b87      	ldr	r3, [pc, #540]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f023 0203 	bic.w	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4983      	ldr	r1, [pc, #524]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002068:	4b7e      	ldr	r3, [pc, #504]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f023 020c 	bic.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	497b      	ldr	r1, [pc, #492]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800208a:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	4972      	ldr	r1, [pc, #456]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	496a      	ldr	r1, [pc, #424]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ce:	4b65      	ldr	r3, [pc, #404]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020dc:	4961      	ldr	r1, [pc, #388]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4959      	ldr	r1, [pc, #356]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002112:	4b54      	ldr	r3, [pc, #336]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	4950      	ldr	r1, [pc, #320]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002134:	4b4b      	ldr	r3, [pc, #300]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002142:	4948      	ldr	r1, [pc, #288]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	493f      	ldr	r1, [pc, #252]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d028      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	4937      	ldr	r1, [pc, #220]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002196:	d106      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002198:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a31      	ldr	r2, [pc, #196]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800219e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a2:	60d3      	str	r3, [r2, #12]
 80021a4:	e011      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021ae:	d10c      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	2101      	movs	r1, #1
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f8a4 	bl	8002304 <RCCEx_PLLSAI1_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d028      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	491f      	ldr	r1, [pc, #124]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f4:	d106      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002200:	60d3      	str	r3, [r2, #12]
 8002202:	e011      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f875 	bl	8002304 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02b      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002242:	4908      	ldr	r1, [pc, #32]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002252:	d109      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a02      	ldr	r2, [pc, #8]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225e:	60d3      	str	r3, [r2, #12]
 8002260:	e014      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800226c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f843 	bl	8002304 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01c      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	4916      	ldr	r1, [pc, #88]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	2102      	movs	r1, #2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f820 	bl	8002304 <RCCEx_PLLSAI1_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002312:	4b74      	ldr	r3, [pc, #464]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800231e:	4b71      	ldr	r3, [pc, #452]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d10d      	bne.n	800234a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
       ||
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002336:	4b6b      	ldr	r3, [pc, #428]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
       ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d047      	beq.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e044      	b.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d018      	beq.n	800238a <RCCEx_PLLSAI1_Config+0x86>
 8002358:	2b03      	cmp	r3, #3
 800235a:	d825      	bhi.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d002      	beq.n	8002366 <RCCEx_PLLSAI1_Config+0x62>
 8002360:	2b02      	cmp	r3, #2
 8002362:	d009      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x74>
 8002364:	e020      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002366:	4b5f      	ldr	r3, [pc, #380]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11d      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002376:	e01a      	b.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002378:	4b5a      	ldr	r3, [pc, #360]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e013      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800238a:	4b56      	ldr	r3, [pc, #344]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002396:	4b53      	ldr	r3, [pc, #332]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023a6:	e006      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      break;
 80023ac:	e004      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023be:	4b49      	ldr	r3, [pc, #292]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	430b      	orrs	r3, r1
 80023d4:	4943      	ldr	r1, [pc, #268]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d17c      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e0:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3f      	ldr	r2, [pc, #252]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe fc20 	bl	8000c30 <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f2:	e009      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f4:	f7fe fc1c 	bl	8000c30 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	73fb      	strb	r3, [r7, #15]
        break;
 8002406:	e005      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002408:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ef      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15f      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d110      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002420:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002428:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	0211      	lsls	r1, r2, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	06d2      	lsls	r2, r2, #27
 8002438:	430a      	orrs	r2, r1
 800243a:	492a      	ldr	r1, [pc, #168]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	610b      	str	r3, [r1, #16]
 8002440:	e027      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d112      	bne.n	800246e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002448:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002450:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6892      	ldr	r2, [r2, #8]
 8002458:	0211      	lsls	r1, r2, #8
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6912      	ldr	r2, [r2, #16]
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0552      	lsls	r2, r2, #21
 8002464:	430a      	orrs	r2, r1
 8002466:	491f      	ldr	r1, [pc, #124]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	610b      	str	r3, [r1, #16]
 800246c:	e011      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246e:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002476:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	0211      	lsls	r1, r2, #8
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6952      	ldr	r2, [r2, #20]
 8002484:	0852      	lsrs	r2, r2, #1
 8002486:	3a01      	subs	r2, #1
 8002488:	0652      	lsls	r2, r2, #25
 800248a:	430a      	orrs	r2, r1
 800248c:	4915      	ldr	r1, [pc, #84]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a13      	ldr	r2, [pc, #76]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800249c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fbc7 	bl	8000c30 <HAL_GetTick>
 80024a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a4:	e009      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a6:	f7fe fbc3 	bl	8000c30 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d902      	bls.n	80024ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	73fb      	strb	r3, [r7, #15]
          break;
 80024b8:	e005      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ef      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4903      	ldr	r1, [pc, #12]	@ (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e040      	b.n	800257c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fa5a 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa82 	bl	8002a38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f825 	bl	8002584 <UART_SetConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e01b      	b.n	800257c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fb01 	bl	8002b7c <UART_CheckIdleState>
 800257a:	4603      	mov	r3, r0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002588:	b08a      	sub	sp, #40	@ 0x28
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b9e      	ldr	r3, [pc, #632]	@ (800282c <UART_SetConfig+0x2a8>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025bc:	430b      	orrs	r3, r1
 80025be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a93      	ldr	r2, [pc, #588]	@ (8002830 <UART_SetConfig+0x2ac>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ec:	4313      	orrs	r3, r2
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8a      	ldr	r2, [pc, #552]	@ (8002834 <UART_SetConfig+0x2b0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d126      	bne.n	800265c <UART_SetConfig+0xd8>
 800260e:	4b8a      	ldr	r3, [pc, #552]	@ (8002838 <UART_SetConfig+0x2b4>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d81b      	bhi.n	8002654 <UART_SetConfig+0xd0>
 800261c:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <UART_SetConfig+0xa0>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002635 	.word	0x08002635
 8002628:	08002645 	.word	0x08002645
 800262c:	0800263d 	.word	0x0800263d
 8002630:	0800264d 	.word	0x0800264d
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800263a:	e0ab      	b.n	8002794 <UART_SetConfig+0x210>
 800263c:	2302      	movs	r3, #2
 800263e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002642:	e0a7      	b.n	8002794 <UART_SetConfig+0x210>
 8002644:	2304      	movs	r3, #4
 8002646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800264a:	e0a3      	b.n	8002794 <UART_SetConfig+0x210>
 800264c:	2308      	movs	r3, #8
 800264e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002652:	e09f      	b.n	8002794 <UART_SetConfig+0x210>
 8002654:	2310      	movs	r3, #16
 8002656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800265a:	e09b      	b.n	8002794 <UART_SetConfig+0x210>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a76      	ldr	r2, [pc, #472]	@ (800283c <UART_SetConfig+0x2b8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d138      	bne.n	80026d8 <UART_SetConfig+0x154>
 8002666:	4b74      	ldr	r3, [pc, #464]	@ (8002838 <UART_SetConfig+0x2b4>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d82d      	bhi.n	80026d0 <UART_SetConfig+0x14c>
 8002674:	a201      	add	r2, pc, #4	@ (adr r2, 800267c <UART_SetConfig+0xf8>)
 8002676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267a:	bf00      	nop
 800267c:	080026b1 	.word	0x080026b1
 8002680:	080026d1 	.word	0x080026d1
 8002684:	080026d1 	.word	0x080026d1
 8002688:	080026d1 	.word	0x080026d1
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080026d1 	.word	0x080026d1
 8002694:	080026d1 	.word	0x080026d1
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026b9 	.word	0x080026b9
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026d1 	.word	0x080026d1
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026c9 	.word	0x080026c9
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026b6:	e06d      	b.n	8002794 <UART_SetConfig+0x210>
 80026b8:	2302      	movs	r3, #2
 80026ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026be:	e069      	b.n	8002794 <UART_SetConfig+0x210>
 80026c0:	2304      	movs	r3, #4
 80026c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026c6:	e065      	b.n	8002794 <UART_SetConfig+0x210>
 80026c8:	2308      	movs	r3, #8
 80026ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026ce:	e061      	b.n	8002794 <UART_SetConfig+0x210>
 80026d0:	2310      	movs	r3, #16
 80026d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80026d6:	e05d      	b.n	8002794 <UART_SetConfig+0x210>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a58      	ldr	r2, [pc, #352]	@ (8002840 <UART_SetConfig+0x2bc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d125      	bne.n	800272e <UART_SetConfig+0x1aa>
 80026e2:	4b55      	ldr	r3, [pc, #340]	@ (8002838 <UART_SetConfig+0x2b4>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80026ec:	2b30      	cmp	r3, #48	@ 0x30
 80026ee:	d016      	beq.n	800271e <UART_SetConfig+0x19a>
 80026f0:	2b30      	cmp	r3, #48	@ 0x30
 80026f2:	d818      	bhi.n	8002726 <UART_SetConfig+0x1a2>
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d00a      	beq.n	800270e <UART_SetConfig+0x18a>
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d814      	bhi.n	8002726 <UART_SetConfig+0x1a2>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <UART_SetConfig+0x182>
 8002700:	2b10      	cmp	r3, #16
 8002702:	d008      	beq.n	8002716 <UART_SetConfig+0x192>
 8002704:	e00f      	b.n	8002726 <UART_SetConfig+0x1a2>
 8002706:	2300      	movs	r3, #0
 8002708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800270c:	e042      	b.n	8002794 <UART_SetConfig+0x210>
 800270e:	2302      	movs	r3, #2
 8002710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002714:	e03e      	b.n	8002794 <UART_SetConfig+0x210>
 8002716:	2304      	movs	r3, #4
 8002718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800271c:	e03a      	b.n	8002794 <UART_SetConfig+0x210>
 800271e:	2308      	movs	r3, #8
 8002720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002724:	e036      	b.n	8002794 <UART_SetConfig+0x210>
 8002726:	2310      	movs	r3, #16
 8002728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800272c:	e032      	b.n	8002794 <UART_SetConfig+0x210>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3f      	ldr	r2, [pc, #252]	@ (8002830 <UART_SetConfig+0x2ac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d12a      	bne.n	800278e <UART_SetConfig+0x20a>
 8002738:	4b3f      	ldr	r3, [pc, #252]	@ (8002838 <UART_SetConfig+0x2b4>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002742:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002746:	d01a      	beq.n	800277e <UART_SetConfig+0x1fa>
 8002748:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800274c:	d81b      	bhi.n	8002786 <UART_SetConfig+0x202>
 800274e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002752:	d00c      	beq.n	800276e <UART_SetConfig+0x1ea>
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002758:	d815      	bhi.n	8002786 <UART_SetConfig+0x202>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <UART_SetConfig+0x1e2>
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002762:	d008      	beq.n	8002776 <UART_SetConfig+0x1f2>
 8002764:	e00f      	b.n	8002786 <UART_SetConfig+0x202>
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800276c:	e012      	b.n	8002794 <UART_SetConfig+0x210>
 800276e:	2302      	movs	r3, #2
 8002770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002774:	e00e      	b.n	8002794 <UART_SetConfig+0x210>
 8002776:	2304      	movs	r3, #4
 8002778:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800277c:	e00a      	b.n	8002794 <UART_SetConfig+0x210>
 800277e:	2308      	movs	r3, #8
 8002780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002784:	e006      	b.n	8002794 <UART_SetConfig+0x210>
 8002786:	2310      	movs	r3, #16
 8002788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800278c:	e002      	b.n	8002794 <UART_SetConfig+0x210>
 800278e:	2310      	movs	r3, #16
 8002790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a25      	ldr	r2, [pc, #148]	@ (8002830 <UART_SetConfig+0x2ac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f040 808a 	bne.w	80028b4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d824      	bhi.n	80027f2 <UART_SetConfig+0x26e>
 80027a8:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <UART_SetConfig+0x22c>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027d5 	.word	0x080027d5
 80027b4:	080027f3 	.word	0x080027f3
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	080027f3 	.word	0x080027f3
 80027c0:	080027e3 	.word	0x080027e3
 80027c4:	080027f3 	.word	0x080027f3
 80027c8:	080027f3 	.word	0x080027f3
 80027cc:	080027f3 	.word	0x080027f3
 80027d0:	080027eb 	.word	0x080027eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d4:	f7ff fac0 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 80027d8:	61f8      	str	r0, [r7, #28]
        break;
 80027da:	e010      	b.n	80027fe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <UART_SetConfig+0x2c0>)
 80027de:	61fb      	str	r3, [r7, #28]
        break;
 80027e0:	e00d      	b.n	80027fe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e2:	f7ff fa21 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80027e6:	61f8      	str	r0, [r7, #28]
        break;
 80027e8:	e009      	b.n	80027fe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ee:	61fb      	str	r3, [r7, #28]
        break;
 80027f0:	e005      	b.n	80027fe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80027fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8109 	beq.w	8002a18 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	429a      	cmp	r2, r3
 8002814:	d305      	bcc.n	8002822 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	429a      	cmp	r2, r3
 8002820:	d912      	bls.n	8002848 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002828:	e0f6      	b.n	8002a18 <UART_SetConfig+0x494>
 800282a:	bf00      	nop
 800282c:	efff69f3 	.word	0xefff69f3
 8002830:	40008000 	.word	0x40008000
 8002834:	40013800 	.word	0x40013800
 8002838:	40021000 	.word	0x40021000
 800283c:	40004400 	.word	0x40004400
 8002840:	40004800 	.word	0x40004800
 8002844:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2200      	movs	r2, #0
 800284c:	461c      	mov	r4, r3
 800284e:	4615      	mov	r5, r2
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	022b      	lsls	r3, r5, #8
 800285a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800285e:	0222      	lsls	r2, r4, #8
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	6849      	ldr	r1, [r1, #4]
 8002864:	0849      	lsrs	r1, r1, #1
 8002866:	2000      	movs	r0, #0
 8002868:	4688      	mov	r8, r1
 800286a:	4681      	mov	r9, r0
 800286c:	eb12 0a08 	adds.w	sl, r2, r8
 8002870:	eb43 0b09 	adc.w	fp, r3, r9
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002882:	4650      	mov	r0, sl
 8002884:	4659      	mov	r1, fp
 8002886:	f7fd fca1 	bl	80001cc <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4613      	mov	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002898:	d308      	bcc.n	80028ac <UART_SetConfig+0x328>
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a0:	d204      	bcs.n	80028ac <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e0b5      	b.n	8002a18 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80028b2:	e0b1      	b.n	8002a18 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028bc:	d15d      	bne.n	800297a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80028be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d827      	bhi.n	8002916 <UART_SetConfig+0x392>
 80028c6:	a201      	add	r2, pc, #4	@ (adr r2, 80028cc <UART_SetConfig+0x348>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	080028f1 	.word	0x080028f1
 80028d0:	080028f9 	.word	0x080028f9
 80028d4:	08002901 	.word	0x08002901
 80028d8:	08002917 	.word	0x08002917
 80028dc:	08002907 	.word	0x08002907
 80028e0:	08002917 	.word	0x08002917
 80028e4:	08002917 	.word	0x08002917
 80028e8:	08002917 	.word	0x08002917
 80028ec:	0800290f 	.word	0x0800290f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f0:	f7ff fa32 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 80028f4:	61f8      	str	r0, [r7, #28]
        break;
 80028f6:	e014      	b.n	8002922 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f8:	f7ff fa44 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80028fc:	61f8      	str	r0, [r7, #28]
        break;
 80028fe:	e010      	b.n	8002922 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002900:	4b4c      	ldr	r3, [pc, #304]	@ (8002a34 <UART_SetConfig+0x4b0>)
 8002902:	61fb      	str	r3, [r7, #28]
        break;
 8002904:	e00d      	b.n	8002922 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002906:	f7ff f98f 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 800290a:	61f8      	str	r0, [r7, #28]
        break;
 800290c:	e009      	b.n	8002922 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002912:	61fb      	str	r3, [r7, #28]
        break;
 8002914:	e005      	b.n	8002922 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d077      	beq.n	8002a18 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005a      	lsls	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	441a      	add	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d916      	bls.n	8002972 <UART_SetConfig+0x3ee>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294a:	d212      	bcs.n	8002972 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f023 030f 	bic.w	r3, r3, #15
 8002954:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	085b      	lsrs	r3, r3, #1
 800295a:	b29b      	uxth	r3, r3
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	b29a      	uxth	r2, r3
 8002962:	8afb      	ldrh	r3, [r7, #22]
 8002964:	4313      	orrs	r3, r2
 8002966:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	8afa      	ldrh	r2, [r7, #22]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	e052      	b.n	8002a18 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002978:	e04e      	b.n	8002a18 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800297a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800297e:	2b08      	cmp	r3, #8
 8002980:	d827      	bhi.n	80029d2 <UART_SetConfig+0x44e>
 8002982:	a201      	add	r2, pc, #4	@ (adr r2, 8002988 <UART_SetConfig+0x404>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	080029ad 	.word	0x080029ad
 800298c:	080029b5 	.word	0x080029b5
 8002990:	080029bd 	.word	0x080029bd
 8002994:	080029d3 	.word	0x080029d3
 8002998:	080029c3 	.word	0x080029c3
 800299c:	080029d3 	.word	0x080029d3
 80029a0:	080029d3 	.word	0x080029d3
 80029a4:	080029d3 	.word	0x080029d3
 80029a8:	080029cb 	.word	0x080029cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ac:	f7ff f9d4 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 80029b0:	61f8      	str	r0, [r7, #28]
        break;
 80029b2:	e014      	b.n	80029de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029b4:	f7ff f9e6 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80029b8:	61f8      	str	r0, [r7, #28]
        break;
 80029ba:	e010      	b.n	80029de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <UART_SetConfig+0x4b0>)
 80029be:	61fb      	str	r3, [r7, #28]
        break;
 80029c0:	e00d      	b.n	80029de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c2:	f7ff f931 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80029c6:	61f8      	str	r0, [r7, #28]
        break;
 80029c8:	e009      	b.n	80029de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ce:	61fb      	str	r3, [r7, #28]
        break;
 80029d0:	e005      	b.n	80029de <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80029dc:	bf00      	nop
    }

    if (pclk != 0U)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d019      	beq.n	8002a18 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	085a      	lsrs	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	441a      	add	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b0f      	cmp	r3, #15
 80029fc:	d909      	bls.n	8002a12 <UART_SetConfig+0x48e>
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a04:	d205      	bcs.n	8002a12 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e002      	b.n	8002a18 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3728      	adds	r7, #40	@ 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a32:	bf00      	nop
 8002a34:	00f42400 	.word	0x00f42400

08002a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01a      	beq.n	8002b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b36:	d10a      	bne.n	8002b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	605a      	str	r2, [r3, #4]
  }
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b098      	sub	sp, #96	@ 0x60
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b8c:	f7fe f850 	bl	8000c30 <HAL_GetTick>
 8002b90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d12e      	bne.n	8002bfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f88c 	bl	8002ccc <UART_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d021      	beq.n	8002bfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc2:	e853 3f00 	ldrex	r3, [r3]
 8002bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002be0:	e841 2300 	strex	r3, r2, [r1]
 8002be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e6      	bne.n	8002bba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e062      	b.n	8002cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d149      	bne.n	8002ca0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c14:	2200      	movs	r2, #0
 8002c16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f856 	bl	8002ccc <UART_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d03c      	beq.n	8002ca0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	623b      	str	r3, [r7, #32]
   return(result);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e6      	bne.n	8002c26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3308      	adds	r3, #8
 8002c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c78:	61fa      	str	r2, [r7, #28]
 8002c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	69b9      	ldr	r1, [r7, #24]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	617b      	str	r3, [r7, #20]
   return(result);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e5      	bne.n	8002c58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e011      	b.n	8002cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3758      	adds	r7, #88	@ 0x58
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cdc:	e04f      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d04b      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fd ffa3 	bl	8000c30 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e04e      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d037      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b80      	cmp	r3, #128	@ 0x80
 8002d12:	d034      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b40      	cmp	r3, #64	@ 0x40
 8002d18:	d031      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d110      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f838 	bl	8002da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e029      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d58:	d111      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f81e 	bl	8002da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e00f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0a0      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b095      	sub	sp, #84	@ 0x54
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e6      	bne.n	8002dae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e5      	bne.n	8002de0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d118      	bne.n	8002e4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0310 	bic.w	r3, r3, #16
 8002e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	613b      	str	r3, [r7, #16]
   return(result);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e6      	bne.n	8002e1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e62:	bf00      	nop
 8002e64:	3754      	adds	r7, #84	@ 0x54
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <memset>:
 8002e6e:	4402      	add	r2, r0
 8002e70:	4603      	mov	r3, r0
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d100      	bne.n	8002e78 <memset+0xa>
 8002e76:	4770      	bx	lr
 8002e78:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7c:	e7f9      	b.n	8002e72 <memset+0x4>
	...

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	4d0d      	ldr	r5, [pc, #52]	@ (8002eb8 <__libc_init_array+0x38>)
 8002e84:	4c0d      	ldr	r4, [pc, #52]	@ (8002ebc <__libc_init_array+0x3c>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	4d0b      	ldr	r5, [pc, #44]	@ (8002ec0 <__libc_init_array+0x40>)
 8002e92:	4c0c      	ldr	r4, [pc, #48]	@ (8002ec4 <__libc_init_array+0x44>)
 8002e94:	f000 f818 	bl	8002ec8 <_init>
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	2600      	movs	r6, #0
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08002f30 	.word	0x08002f30
 8002ebc:	08002f30 	.word	0x08002f30
 8002ec0:	08002f30 	.word	0x08002f30
 8002ec4:	08002f34 	.word	0x08002f34

08002ec8 <_init>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr

08002ed4 <_fini>:
 8002ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed6:	bf00      	nop
 8002ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	469e      	mov	lr, r3
 8002ede:	4770      	bx	lr
