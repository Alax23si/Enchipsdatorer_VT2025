
ReverseSensor_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004374  08004374  00005374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080043bc  080043bc  000053bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c4  080043c4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c4  080043c4  000053c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080043d8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080043d8  00006110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6b5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e35  00000000  00000000  000156f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00017528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4e  00000000  00000000  00018390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002198b  00000000  00000000  00018ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb9a  00000000  00000000  0003a869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1826  00000000  00000000  0004a403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bc29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d00  00000000  00000000  0011bc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0011f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800435c 	.word	0x0800435c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800435c 	.word	0x0800435c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <abuzz_start>:
void abuzz_p_short();



void abuzz_start()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	TIM1->PSC 	= 40-1;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <abuzz_start+0x28>)
 80004fe:	2227      	movs	r2, #39	@ 0x27
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->CNT   = 0x0000;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <abuzz_start+0x28>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CCR2  = 20;
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <abuzz_start+0x28>)
 800050a:	2214      	movs	r2, #20
 800050c:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(abuzz_OP_GPIO_Port, abuzz_OP_Pin,GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000518:	f000 ff28 	bl	800136c <HAL_GPIO_WritePin>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40012c00 	.word	0x40012c00

08000524 <abuzz_stop>:



void abuzz_stop()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	TIM1->PSC  = 0x0000;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <abuzz_stop+0x2c>)
 800052a:	2200      	movs	r2, #0
 800052c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR  = 0xFFFF;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <abuzz_stop+0x2c>)
 8000530:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR2 = 0x0000;
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <abuzz_stop+0x2c>)
 8000538:	2200      	movs	r2, #0
 800053a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(abuzz_OP_GPIO_Port, abuzz_OP_Pin,GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000546:	f000 ff11 	bl	800136c <HAL_GPIO_WritePin>

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40012c00 	.word	0x40012c00

08000554 <is_blue_button_pushed>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int is_blue_button_pushed(){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	return (GPIOC->IDR & 0X2000) != 0;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <is_blue_button_pushed+0x20>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3

}
 800056a:	4618      	mov	r0, r3
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	48000800 	.word	0x48000800

08000578 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim ){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <HAL_GPIO_EXTI_Callback>:
uint32_t EchoStart = 0;
uint32_t EchoFinish = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MODUL_ECHO_Pin)
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d12b      	bne.n	80005f4 <HAL_GPIO_EXTI_Callback+0x68>
	{
		if(HAL_GPIO_ReadPin(MODUL_ECHO_GPIO_Port, MODUL_ECHO_Pin) == GPIO_PIN_SET){
 800059c:	2102      	movs	r1, #2
 800059e:	4817      	ldr	r0, [pc, #92]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x70>)
 80005a0:	f000 fecc 	bl	800133c <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d108      	bne.n	80005bc <HAL_GPIO_EXTI_Callback+0x30>
			EchoFlag = 1;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x74>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
			EchoStart = __HAL_TIM_GET_COUNTER(&htim2);
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x78>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005b8:	6013      	str	r3, [r2, #0]
			EchoFinish = __HAL_TIM_GET_COUNTER(&htim2);
			EchoFlag= 0;
			Distance = (EchoFinish - EchoStart) / 58;
		}
	}
}
 80005ba:	e01b      	b.n	80005f4 <HAL_GPIO_EXTI_Callback+0x68>
		else if(EchoFlag){
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x74>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d017      	beq.n	80005f4 <HAL_GPIO_EXTI_Callback+0x68>
			EchoFinish = __HAL_TIM_GET_COUNTER(&htim2);
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x78>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ca:	4a10      	ldr	r2, [pc, #64]	@ (800060c <HAL_GPIO_EXTI_Callback+0x80>)
 80005cc:	6013      	str	r3, [r2, #0]
			EchoFlag= 0;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
			Distance = (EchoFinish - EchoStart) / 58;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <HAL_GPIO_EXTI_Callback+0x80>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <HAL_GPIO_EXTI_Callback+0x84>)
 80005e0:	fba2 2303 	umull	r2, r3, r2, r3
 80005e4:	095b      	lsrs	r3, r3, #5
 80005e6:	ee07 3a90 	vmov	s15, r3
 80005ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_GPIO_EXTI_Callback+0x88>)
 80005f0:	edc3 7a00 	vstr	s15, [r3]
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	48000800 	.word	0x48000800
 8000600:	20000100 	.word	0x20000100
 8000604:	20000028 	.word	0x20000028
 8000608:	20000104 	.word	0x20000104
 800060c:	20000108 	.word	0x20000108
 8000610:	8d3dcb09 	.word	0x8d3dcb09
 8000614:	200000fc 	.word	0x200000fc

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fb61 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f88d 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f98d 	bl	8000944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062a:	f000 f95b 	bl	80008e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800062e:	f000 f8d9 	bl	80007e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	483c      	ldr	r0, [pc, #240]	@ (8000728 <main+0x110>)
 8000636:	f002 f959 	bl	80028ec <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	int started = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(!started){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <main+0x32>
			started = is_blue_button_pushed();
 8000644:	f7ff ff86 	bl	8000554 <is_blue_button_pushed>
 8000648:	6078      	str	r0, [r7, #4]
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (started) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f6      	beq.n	800063e <main+0x26>
			HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	@ 0x64
 8000652:	f000 fbc3 	bl	8000ddc <HAL_Delay>
			uint16_t wait_time = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	807b      	strh	r3, [r7, #2]

			if (Distance > 400.0f) {
 800065a:	4b34      	ldr	r3, [pc, #208]	@ (800072c <main+0x114>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000730 <main+0x118>
 8000664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066c:	dd05      	ble.n	800067a <main+0x62>
				abuzz_stop();
 800066e:	f7ff ff59 	bl	8000524 <abuzz_stop>
				HAL_Delay(100); // liten paus om inget hörs
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f000 fbb2 	bl	8000ddc <HAL_Delay>
				continue;
 8000678:	e055      	b.n	8000726 <main+0x10e>
			}
			else if (Distance > 200.0f) {
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <main+0x114>)
 800067c:	edd3 7a00 	vldr	s15, [r3]
 8000680:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000734 <main+0x11c>
 8000684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068c:	dd03      	ble.n	8000696 <main+0x7e>
				wait_time = 2000;  // var 3:e sekund
 800068e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000692:	807b      	strh	r3, [r7, #2]
 8000694:	e03b      	b.n	800070e <main+0xf6>
			}
			else if (Distance > 100.0f) {
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <main+0x114>)
 8000698:	edd3 7a00 	vldr	s15, [r3]
 800069c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000738 <main+0x120>
 80006a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a8:	dd03      	ble.n	80006b2 <main+0x9a>
				wait_time = 750;  // var sekund
 80006aa:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80006ae:	807b      	strh	r3, [r7, #2]
 80006b0:	e02d      	b.n	800070e <main+0xf6>
			}
			else if (Distance > 50.0f) {
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <main+0x114>)
 80006b4:	edd3 7a00 	vldr	s15, [r3]
 80006b8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800073c <main+0x124>
 80006bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c4:	dd03      	ble.n	80006ce <main+0xb6>
				wait_time = 500;
 80006c6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006ca:	807b      	strh	r3, [r7, #2]
 80006cc:	e01f      	b.n	800070e <main+0xf6>
			}
			else if (Distance > 30.0f) {
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <main+0x114>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	dd02      	ble.n	80006e8 <main+0xd0>
				wait_time = 250;
 80006e2:	23fa      	movs	r3, #250	@ 0xfa
 80006e4:	807b      	strh	r3, [r7, #2]
 80006e6:	e012      	b.n	800070e <main+0xf6>
			}
			else if (Distance > 20.0f) {
 80006e8:	4b10      	ldr	r3, [pc, #64]	@ (800072c <main+0x114>)
 80006ea:	edd3 7a00 	vldr	s15, [r3]
 80006ee:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80006f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fa:	dd02      	ble.n	8000702 <main+0xea>
				wait_time = 175;
 80006fc:	23af      	movs	r3, #175	@ 0xaf
 80006fe:	807b      	strh	r3, [r7, #2]
 8000700:	e005      	b.n	800070e <main+0xf6>
			}
			else {
				// konstant pip
				abuzz_start();  // Starta PWM med ljudfrekvens
 8000702:	f7ff fef9 	bl	80004f8 <abuzz_start>
				HAL_Delay(100); // eller kör utan delay om konstant
 8000706:	2064      	movs	r0, #100	@ 0x64
 8000708:	f000 fb68 	bl	8000ddc <HAL_Delay>
				continue;
 800070c:	e00b      	b.n	8000726 <main+0x10e>
			}
			// Normalt pip: starta PWM, vänta 100 ms, stoppa, vila resten
			abuzz_start();
 800070e:	f7ff fef3 	bl	80004f8 <abuzz_start>
			HAL_Delay(100); // Piplängd (0.1 sek)
 8000712:	2064      	movs	r0, #100	@ 0x64
 8000714:	f000 fb62 	bl	8000ddc <HAL_Delay>
			abuzz_stop();
 8000718:	f7ff ff04 	bl	8000524 <abuzz_stop>
			HAL_Delay(wait_time - 100); // Resterande vila
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	3b64      	subs	r3, #100	@ 0x64
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fb5b 	bl	8000ddc <HAL_Delay>
		if(!started){
 8000726:	e78a      	b.n	800063e <main+0x26>
 8000728:	20000028 	.word	0x20000028
 800072c:	200000fc 	.word	0x200000fc
 8000730:	43c80000 	.word	0x43c80000
 8000734:	43480000 	.word	0x43480000
 8000738:	42c80000 	.word	0x42c80000
 800073c:	42480000 	.word	0x42480000

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b096      	sub	sp, #88	@ 0x58
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2244      	movs	r2, #68	@ 0x44
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fdd7 	bl	8004302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000762:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000766:	f000 fe3f 	bl	80013e8 <HAL_PWREx_ControlVoltageScaling>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000770:	f000 f98a 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2310      	movs	r3, #16
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000786:	2302      	movs	r3, #2
 8000788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000792:	2307      	movs	r3, #7
 8000794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fe76 	bl	8001494 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ae:	f000 f96b 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2303      	movs	r3, #3
 80007b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	2104      	movs	r1, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fa76 	bl	8001cbc <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d6:	f000 f957 	bl	8000a88 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3758      	adds	r7, #88	@ 0x58
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	@ 0x38
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2102      	movs	r1, #2
 800081a:	201c      	movs	r0, #28
 800081c:	f000 fbdd 	bl	8000fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000820:	201c      	movs	r0, #28
 8000822:	f000 fbf6 	bl	8001012 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000826:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <MX_TIM2_Init+0xf8>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800082c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800082e:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <MX_TIM2_Init+0xf8>)
 8000830:	224f      	movs	r2, #79	@ 0x4f
 8000832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <MX_TIM2_Init+0xf8>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000 - 1;
 800083a:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <MX_TIM2_Init+0xf8>)
 800083c:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <MX_TIM2_Init+0xfc>)
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <MX_TIM2_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <MX_TIM2_Init+0xf8>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084c:	4823      	ldr	r0, [pc, #140]	@ (80008dc <MX_TIM2_Init+0xf8>)
 800084e:	f001 ff95 	bl	800277c <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000858:	f000 f916 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000866:	4619      	mov	r1, r3
 8000868:	481c      	ldr	r0, [pc, #112]	@ (80008dc <MX_TIM2_Init+0xf8>)
 800086a:	f002 fb39 	bl	8002ee0 <HAL_TIM_ConfigClockSource>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000874:	f000 f908 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000878:	4818      	ldr	r0, [pc, #96]	@ (80008dc <MX_TIM2_Init+0xf8>)
 800087a:	f001 ffd6 	bl	800282a <HAL_TIM_PWM_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000884:	f000 f900 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_TIM2_Init+0xf8>)
 8000898:	f002 ffc2 	bl	8003820 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80008a2:	f000 f8f1 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a6:	2360      	movs	r3, #96	@ 0x60
 80008a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80008aa:	230a      	movs	r3, #10
 80008ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	@ (80008dc <MX_TIM2_Init+0xf8>)
 80008be:	f002 f9fb 	bl	8002cb8 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80008c8:	f000 f8de 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <MX_TIM2_Init+0xf8>)
 80008ce:	f000 f929 	bl	8000b24 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	@ 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000028 	.word	0x20000028
 80008e0:	0001869f 	.word	0x0001869f

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <MX_USART2_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART2_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000928:	f002 fffe 	bl	8003928 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f8a9 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000074 	.word	0x20000074
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b48      	ldr	r3, [pc, #288]	@ (8000a7c <MX_GPIO_Init+0x138>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a47      	ldr	r2, [pc, #284]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b45      	ldr	r3, [pc, #276]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b42      	ldr	r3, [pc, #264]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a41      	ldr	r2, [pc, #260]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a7c <MX_GPIO_Init+0x138>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <MX_GPIO_Init+0x138>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <MX_GPIO_Init+0x138>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a35      	ldr	r2, [pc, #212]	@ (8000a7c <MX_GPIO_Init+0x138>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <MX_GPIO_Init+0x138>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|abuzz_OP_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f000 fcd2 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	482c      	ldr	r0, [pc, #176]	@ (8000a80 <MX_GPIO_Init+0x13c>)
 80009d0:	f000 fccc 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4826      	ldr	r0, [pc, #152]	@ (8000a84 <MX_GPIO_Init+0x140>)
 80009ec:	f000 fb2c 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODUL_ECHO_Pin */
  GPIO_InitStruct.Pin = MODUL_ECHO_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009f4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODUL_ECHO_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	481f      	ldr	r0, [pc, #124]	@ (8000a84 <MX_GPIO_Init+0x140>)
 8000a06:	f000 fb1f 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin abuzz_OP_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|abuzz_OP_Pin;
 8000a0a:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f000 fb0f 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f000 fb02 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <MX_GPIO_Init+0x13c>)
 8000a5e:	f000 faf3 	bl	8001048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 fab7 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	f000 fad0 	bl	8001012 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	@ 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48000800 	.word	0x48000800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aec:	d113      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_TIM_Base_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b20 <HAL_TIM_Base_MspInit+0x44>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_TIM_Base_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2103      	movs	r1, #3
 8000b0a:	201c      	movs	r0, #28
 8000b0c:	f000 fa65 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b10:	201c      	movs	r0, #28
 8000b12:	f000 fa7e 	bl	8001012 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b44:	d11c      	bne.n	8000b80 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_TIM_MspPostInit+0x64>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <HAL_TIM_MspPostInit+0x64>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_TIM_MspPostInit+0x64>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MODUL_TRIGG_Pin;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MODUL_TRIGG_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f000 fa64 	bl	8001048 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0a2      	sub	sp, #136	@ 0x88
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2260      	movs	r2, #96	@ 0x60
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fba8 	bl	8004302 <memset>
  if(huart->Instance==USART2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a20      	ldr	r2, [pc, #128]	@ (8000c38 <HAL_UART_MspInit+0xac>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d138      	bne.n	8000c2e <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fa9b 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff ff58 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	4a17      	ldr	r2, [pc, #92]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_UART_MspInit+0xb0>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2a:	f000 fa0d 	bl	8001048 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c2e:	bf00      	nop
 8000c30:	3788      	adds	r7, #136	@ 0x88
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f881 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODUL_ECHO_Pin);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f000 fb7a 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <TIM2_IRQHandler+0x10>)
 8000cb2:	f001 fef9 	bl	8002aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_Init+0x3c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <HAL_Init+0x3c>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 f962 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 f80f 	bl	8000d24 <HAL_InitTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	e001      	b.n	8000d16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d12:	f7ff febf 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d023      	beq.n	8000d80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_InitTick+0x70>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_InitTick+0x6c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f96d 	bl	800102e <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10f      	bne.n	8000d7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d809      	bhi.n	8000d74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f937 	bl	8000fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_InitTick+0x74>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e004      	b.n	8000d84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e001      	b.n	8000d84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	2000010c 	.word	0x2000010c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000010c 	.word	0x2000010c

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e154      	b.n	8001302 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8146 	beq.w	80012fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d005      	beq.n	8001088 <HAL_GPIO_Init+0x40>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d130      	bne.n	80010ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	f003 0201 	and.w	r2, r3, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d017      	beq.n	8001126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d123      	bne.n	800117a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	6939      	ldr	r1, [r7, #16]
 8001176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0203 	and.w	r2, r3, #3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 80a0 	beq.w	80012fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <HAL_GPIO_Init+0x2d8>)
 80011be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c0:	4a57      	ldr	r2, [pc, #348]	@ (8001320 <HAL_GPIO_Init+0x2d8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011c8:	4b55      	ldr	r3, [pc, #340]	@ (8001320 <HAL_GPIO_Init+0x2d8>)
 80011ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d4:	4a53      	ldr	r2, [pc, #332]	@ (8001324 <HAL_GPIO_Init+0x2dc>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011fe:	d019      	beq.n	8001234 <HAL_GPIO_Init+0x1ec>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a49      	ldr	r2, [pc, #292]	@ (8001328 <HAL_GPIO_Init+0x2e0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1e8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a48      	ldr	r2, [pc, #288]	@ (800132c <HAL_GPIO_Init+0x2e4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1e4>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a47      	ldr	r2, [pc, #284]	@ (8001330 <HAL_GPIO_Init+0x2e8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a46      	ldr	r2, [pc, #280]	@ (8001334 <HAL_GPIO_Init+0x2ec>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1dc>
 8001220:	2304      	movs	r3, #4
 8001222:	e008      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001224:	2307      	movs	r3, #7
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001228:	2303      	movs	r3, #3
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001234:	2300      	movs	r3, #0
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001246:	4937      	ldr	r1, [pc, #220]	@ (8001324 <HAL_GPIO_Init+0x2dc>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001254:	4b38      	ldr	r3, [pc, #224]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001278:	4a2f      	ldr	r2, [pc, #188]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800127e:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a2:	4a25      	ldr	r2, [pc, #148]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_GPIO_Init+0x2f0>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f aea3 	bne.w	8001058 <HAL_GPIO_Init+0x10>
  }
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48001000 	.word	0x48001000
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e001      	b.n	800135e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8e6 	bl	800058c <HAL_GPIO_EXTI_Callback>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f6:	d130      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001404:	d038      	beq.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140e:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001410:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001414:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2232      	movs	r2, #50	@ 0x32
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142c:	e002      	b.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001440:	d102      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f2      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001454:	d110      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e00f      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001466:	d007      	beq.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001476:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40007000 	.word	0x40007000
 800148c:	20000000 	.word	0x20000000
 8001490:	431bde83 	.word	0x431bde83

08001494 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f000 bc02 	b.w	8001cac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a8:	4b96      	ldr	r3, [pc, #600]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b2:	4b94      	ldr	r3, [pc, #592]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80e4 	beq.w	8001692 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4c>
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	f040 808b 	bne.w	80015ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	f040 8087 	bne.w	80015ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e0:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x64>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e3d9      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	4b81      	ldr	r3, [pc, #516]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_RCC_OscConfig+0x7e>
 8001508:	4b7e      	ldr	r3, [pc, #504]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001510:	e005      	b.n	800151e <HAL_RCC_OscConfig+0x8a>
 8001512:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800151e:	4293      	cmp	r3, r2
 8001520:	d223      	bcs.n	800156a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fd8c 	bl	8002044 <RCC_SetFlashLatencyFromMSIRange>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e3ba      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001536:	4b73      	ldr	r3, [pc, #460]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a72      	ldr	r2, [pc, #456]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b70      	ldr	r3, [pc, #448]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	496d      	ldr	r1, [pc, #436]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	4b6b      	ldr	r3, [pc, #428]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	4968      	ldr	r1, [pc, #416]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e025      	b.n	80015b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156a:	4b66      	ldr	r3, [pc, #408]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a65      	ldr	r2, [pc, #404]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4960      	ldr	r1, [pc, #384]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001588:	4b5e      	ldr	r3, [pc, #376]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	495b      	ldr	r1, [pc, #364]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fd4c 	bl	8002044 <RCC_SetFlashLatencyFromMSIRange>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e37a      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015b6:	f000 fc81 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b51      	ldr	r3, [pc, #324]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	4950      	ldr	r1, [pc, #320]	@ (8001708 <HAL_RCC_OscConfig+0x274>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	4a4e      	ldr	r2, [pc, #312]	@ (800170c <HAL_RCC_OscConfig+0x278>)
 80015d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001710 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fba2 	bl	8000d24 <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d052      	beq.n	8001690 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	e35e      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d032      	beq.n	800165c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015f6:	4b43      	ldr	r3, [pc, #268]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a42      	ldr	r2, [pc, #264]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001602:	f7ff fbdf 	bl	8000dc4 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160a:	f7ff fbdb 	bl	8000dc4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e347      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161c:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001628:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a35      	ldr	r2, [pc, #212]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4930      	ldr	r1, [pc, #192]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001646:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	492b      	ldr	r1, [pc, #172]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
 800165a:	e01a      	b.n	8001692 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800165c:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001668:	f7ff fbac 	bl	8000dc4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001670:	f7ff fba8 	bl	8000dc4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e314      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x1dc>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d073      	beq.n	8001786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x21c>
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d10e      	bne.n	80016c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d10b      	bne.n	80016c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d063      	beq.n	8001784 <HAL_RCC_OscConfig+0x2f0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d15f      	bne.n	8001784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e2f1      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x24c>
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e025      	b.n	800172c <HAL_RCC_OscConfig+0x298>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e8:	d114      	bne.n	8001714 <HAL_RCC_OscConfig+0x280>
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a02      	ldr	r2, [pc, #8]	@ (8001704 <HAL_RCC_OscConfig+0x270>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e013      	b.n	800172c <HAL_RCC_OscConfig+0x298>
 8001704:	40021000 	.word	0x40021000
 8001708:	08004374 	.word	0x08004374
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004
 8001714:	4ba0      	ldr	r3, [pc, #640]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a9f      	ldr	r2, [pc, #636]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b9d      	ldr	r3, [pc, #628]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a9c      	ldr	r2, [pc, #624]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fb46 	bl	8000dc4 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fb42 	bl	8000dc4 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	@ 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e2ae      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174e:	4b92      	ldr	r3, [pc, #584]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x2a8>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fb32 	bl	8000dc4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fb2e 	bl	8000dc4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e29a      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001776:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x2d0>
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d060      	beq.n	8001854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_OscConfig+0x310>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d116      	bne.n	80017d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x328>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e277      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b76      	ldr	r3, [pc, #472]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	4973      	ldr	r1, [pc, #460]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	e040      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d023      	beq.n	8001822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017da:	4b6f      	ldr	r3, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6e      	ldr	r2, [pc, #440]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff faed 	bl	8000dc4 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fae9 	bl	8000dc4 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e255      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	4b65      	ldr	r3, [pc, #404]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b62      	ldr	r3, [pc, #392]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	495f      	ldr	r1, [pc, #380]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e018      	b.n	8001854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b5d      	ldr	r3, [pc, #372]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a5c      	ldr	r2, [pc, #368]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800182c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182e:	f7ff fac9 	bl	8000dc4 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001836:	f7ff fac5 	bl	8000dc4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e231      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03c      	beq.n	80018da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001868:	4b4b      	ldr	r3, [pc, #300]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186e:	4a4a      	ldr	r2, [pc, #296]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff faa4 	bl	8000dc4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff faa0 	bl	8000dc4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e20c      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ef      	beq.n	8001880 <HAL_RCC_OscConfig+0x3ec>
 80018a0:	e01b      	b.n	80018da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff fa87 	bl	8000dc4 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff fa83 	bl	8000dc4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1ef      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018cc:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ef      	bne.n	80018ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80a6 	beq.w	8001a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fc:	4a26      	ldr	r2, [pc, #152]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	@ 0x58
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001910:	2301      	movs	r3, #1
 8001912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	4b21      	ldr	r3, [pc, #132]	@ (800199c <HAL_RCC_OscConfig+0x508>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d118      	bne.n	8001952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <HAL_RCC_OscConfig+0x508>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <HAL_RCC_OscConfig+0x508>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192c:	f7ff fa4a 	bl	8000dc4 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff fa46 	bl	8000dc4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1b2      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_RCC_OscConfig+0x508>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d108      	bne.n	800196c <HAL_RCC_OscConfig+0x4d8>
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800196a:	e029      	b.n	80019c0 <HAL_RCC_OscConfig+0x52c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d115      	bne.n	80019a0 <HAL_RCC_OscConfig+0x50c>
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197a:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	4a03      	ldr	r2, [pc, #12]	@ (8001998 <HAL_RCC_OscConfig+0x504>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x52c>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
 80019a0:	4b9a      	ldr	r3, [pc, #616]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	4a99      	ldr	r2, [pc, #612]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b0:	4b96      	ldr	r3, [pc, #600]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b6:	4a95      	ldr	r2, [pc, #596]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d016      	beq.n	80019f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff f9fc 	bl	8000dc4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff f9f8 	bl	8000dc4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e162      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e6:	4b89      	ldr	r3, [pc, #548]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ed      	beq.n	80019d0 <HAL_RCC_OscConfig+0x53c>
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f9e5 	bl	8000dc4 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7ff f9e1 	bl	8000dc4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e14b      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a14:	4b7d      	ldr	r3, [pc, #500]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ed      	bne.n	80019fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b78      	ldr	r3, [pc, #480]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	4a77      	ldr	r2, [pc, #476]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d03c      	beq.n	8001aba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a48:	4b70      	ldr	r3, [pc, #448]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f9b4 	bl	8000dc4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a60:	f7ff f9b0 	bl	8000dc4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e11c      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0ef      	beq.n	8001a60 <HAL_RCC_OscConfig+0x5cc>
 8001a80:	e01b      	b.n	8001aba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a82:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a88:	4a60      	ldr	r2, [pc, #384]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f997 	bl	8000dc4 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9a:	f7ff f993 	bl	8000dc4 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ff      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aac:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ef      	bne.n	8001a9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80f3 	beq.w	8001caa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	f040 80c9 	bne.w	8001c60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ace:	4b4f      	ldr	r3, [pc, #316]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0203 	and.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d12c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	3b01      	subs	r3, #1
 8001aee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d123      	bne.n	8001b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d11b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d113      	bne.n	8001b3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d109      	bne.n	8001b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	3b01      	subs	r3, #1
 8001b36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d06b      	beq.n	8001c14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d062      	beq.n	8001c08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0ac      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b52:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2d      	ldr	r2, [pc, #180]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001b58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b5e:	f7ff f931 	bl	8000dc4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f92d 	bl	8000dc4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e099      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <HAL_RCC_OscConfig+0x77c>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b94:	3a01      	subs	r2, #1
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b9e:	0212      	lsls	r2, r2, #8
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ba6:	0852      	lsrs	r2, r2, #1
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0552      	lsls	r2, r2, #21
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bb2:	0852      	lsrs	r2, r2, #1
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	0652      	lsls	r2, r2, #25
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bbe:	06d2      	lsls	r2, r2, #27
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	4912      	ldr	r1, [pc, #72]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be0:	f7ff f8f0 	bl	8000dc4 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f8ec 	bl	8000dc4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e058      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <HAL_RCC_OscConfig+0x778>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c06:	e050      	b.n	8001caa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e04f      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d144      	bne.n	8001caa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c38:	f7ff f8c4 	bl	8000dc4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f8c0 	bl	8000dc4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e02c      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x7ac>
 8001c5e:	e024      	b.n	8001caa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d01f      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f8a7 	bl	8000dc4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f8a3 	bl	8000dc4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e00f      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4905      	ldr	r1, [pc, #20]	@ (8001cb4 <HAL_RCC_OscConfig+0x820>)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_RCC_OscConfig+0x824>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
 8001ca4:	e001      	b.n	8001caa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	feeefffc 	.word	0xfeeefffc

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0e7      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b75      	ldr	r3, [pc, #468]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b72      	ldr	r3, [pc, #456]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4970      	ldr	r1, [pc, #448]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0cf      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d010      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4b66      	ldr	r3, [pc, #408]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d908      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b63      	ldr	r3, [pc, #396]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4960      	ldr	r1, [pc, #384]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d04c      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	4b5a      	ldr	r3, [pc, #360]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d121      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0a6      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	4b54      	ldr	r3, [pc, #336]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d115      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e09a      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d72:	4b4e      	ldr	r3, [pc, #312]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e08e      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d82:	4b4a      	ldr	r3, [pc, #296]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e086      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d92:	4b46      	ldr	r3, [pc, #280]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0203 	bic.w	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4943      	ldr	r1, [pc, #268]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da4:	f7ff f80e 	bl	8000dc4 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff f80a 	bl	8000dc4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e06e      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 020c 	and.w	r2, r3, #12
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1eb      	bne.n	8001dac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d208      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b2e      	ldr	r3, [pc, #184]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	492b      	ldr	r1, [pc, #172]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e02:	4b29      	ldr	r3, [pc, #164]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d210      	bcs.n	8001e32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e10:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0207 	bic.w	r2, r3, #7
 8001e18:	4923      	ldr	r1, [pc, #140]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e036      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4918      	ldr	r1, [pc, #96]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4910      	ldr	r1, [pc, #64]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e70:	f000 f824 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	490b      	ldr	r1, [pc, #44]	@ (8001eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe ff45 	bl	8000d24 <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08004374 	.word	0x08004374
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	20000004 	.word	0x20000004

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eca:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d121      	bne.n	8001f2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d11e      	bne.n	8001f2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ef0:	4b34      	ldr	r3, [pc, #208]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f18:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f34:	4b25      	ldr	r3, [pc, #148]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	e004      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f40:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d134      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d003      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0xac>
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f64:	617b      	str	r3, [r7, #20]
      break;
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f6a:	617b      	str	r3, [r7, #20]
      break;
 8001f6c:	e002      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	617b      	str	r3, [r7, #20]
      break;
 8001f72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	3301      	adds	r3, #1
 8001f80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	fb03 f202 	mul.w	r2, r3, r2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	0e5b      	lsrs	r3, r3, #25
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	@ 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	0800438c 	.word	0x0800438c
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	007a1200 	.word	0x007a1200

08001fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ff0:	f7ff fff0 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4904      	ldr	r1, [pc, #16]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	08004384 	.word	0x08004384

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800201c:	f7ff ffda 	bl	8001fd4 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0adb      	lsrs	r3, r3, #11
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4904      	ldr	r1, [pc, #16]	@ (8002040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	08004384 	.word	0x08004384

08002044 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002050:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800205c:	f7ff f9b6 	bl	80013cc <HAL_PWREx_GetVoltageRange>
 8002060:	6178      	str	r0, [r7, #20]
 8002062:	e014      	b.n	800208e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b25      	ldr	r3, [pc, #148]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	4a24      	ldr	r2, [pc, #144]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800207c:	f7ff f9a6 	bl	80013cc <HAL_PWREx_GetVoltageRange>
 8002080:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002094:	d10b      	bne.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b80      	cmp	r3, #128	@ 0x80
 800209a:	d919      	bls.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2ba0      	cmp	r3, #160	@ 0xa0
 80020a0:	d902      	bls.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a2:	2302      	movs	r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e013      	b.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e010      	b.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b80      	cmp	r3, #128	@ 0x80
 80020b2:	d902      	bls.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020b4:	2303      	movs	r3, #3
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	e00a      	b.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b80      	cmp	r3, #128	@ 0x80
 80020be:	d102      	bne.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c0:	2302      	movs	r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e004      	b.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b70      	cmp	r3, #112	@ 0x70
 80020ca:	d101      	bne.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020cc:	2301      	movs	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 0207 	bic.w	r2, r3, #7
 80020d8:	4909      	ldr	r1, [pc, #36]	@ (8002100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800210c:	2300      	movs	r3, #0
 800210e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002110:	2300      	movs	r3, #0
 8002112:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211c:	2b00      	cmp	r3, #0
 800211e:	d031      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002128:	d01a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800212a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800212e:	d814      	bhi.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002138:	d10f      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800213a:	4b5d      	ldr	r3, [pc, #372]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4a5c      	ldr	r2, [pc, #368]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002146:	e00c      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fa22 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002158:	e003      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	74fb      	strb	r3, [r7, #19]
      break;
 800215e:	e000      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002168:	4b51      	ldr	r3, [pc, #324]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	494e      	ldr	r1, [pc, #312]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800217e:	e001      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 809e 	beq.w	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002196:	4b46      	ldr	r3, [pc, #280]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00d      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b40      	ldr	r3, [pc, #256]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	4a3f      	ldr	r2, [pc, #252]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b8:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c8:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a39      	ldr	r2, [pc, #228]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fdf6 	bl	8000dc4 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021da:	e009      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021dc:	f7fe fdf2 	bl	8000dc4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d902      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	74fb      	strb	r3, [r7, #19]
        break;
 80021ee:	e005      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d15a      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002202:	4b2b      	ldr	r3, [pc, #172]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800220c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01e      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	429a      	cmp	r2, r3
 800221c:	d019      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800221e:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002228:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800222a:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	4a1f      	ldr	r2, [pc, #124]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800224a:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d016      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fdb2 	bl	8000dc4 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002262:	e00b      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7fe fdae 	bl	8000dc4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d902      	bls.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	74fb      	strb	r3, [r7, #19]
            break;
 800227a:	e006      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0ec      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002290:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002296:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	4904      	ldr	r1, [pc, #16]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022a6:	e009      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
 80022ac:	e006      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022bc:	7c7b      	ldrb	r3, [r7, #17]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d105      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b8d      	ldr	r3, [pc, #564]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	4a8c      	ldr	r2, [pc, #560]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022da:	4b87      	ldr	r3, [pc, #540]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	f023 0203 	bic.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4983      	ldr	r1, [pc, #524]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022fc:	4b7e      	ldr	r3, [pc, #504]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f023 020c 	bic.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	497b      	ldr	r1, [pc, #492]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800231e:	4b76      	ldr	r3, [pc, #472]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002324:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	4972      	ldr	r1, [pc, #456]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002340:	4b6d      	ldr	r3, [pc, #436]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	496a      	ldr	r1, [pc, #424]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002362:	4b65      	ldr	r3, [pc, #404]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002368:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	4961      	ldr	r1, [pc, #388]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002384:	4b5c      	ldr	r3, [pc, #368]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	4959      	ldr	r1, [pc, #356]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a6:	4b54      	ldr	r3, [pc, #336]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	4950      	ldr	r1, [pc, #320]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c8:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d6:	4948      	ldr	r1, [pc, #288]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ea:	4b43      	ldr	r3, [pc, #268]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	493f      	ldr	r1, [pc, #252]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d028      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240c:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241a:	4937      	ldr	r1, [pc, #220]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800242a:	d106      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a31      	ldr	r2, [pc, #196]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
 8002438:	e011      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002442:	d10c      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	2101      	movs	r1, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f8a4 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246a:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002470:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	491f      	ldr	r1, [pc, #124]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002488:	d106      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002494:	60d3      	str	r3, [r2, #12]
 8002496:	e011      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f875 	bl	8002598 <RCCEx_PLLSAI1_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d02b      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024e6:	d109      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a02      	ldr	r2, [pc, #8]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024f2:	60d3      	str	r3, [r2, #12]
 80024f4:	e014      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f843 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01c      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	4916      	ldr	r1, [pc, #88]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800254a:	d10c      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	2102      	movs	r1, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f820 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002572:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002578:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	4904      	ldr	r1, [pc, #16]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002588:	7cbb      	ldrb	r3, [r7, #18]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025a6:	4b74      	ldr	r3, [pc, #464]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d018      	beq.n	80025e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b2:	4b71      	ldr	r3, [pc, #452]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d10d      	bne.n	80025de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
       ||
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
       ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d047      	beq.n	800266e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e044      	b.n	800266e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d018      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x86>
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d825      	bhi.n	800263c <RCCEx_PLLSAI1_Config+0xa4>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d002      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x62>
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d009      	beq.n	800260c <RCCEx_PLLSAI1_Config+0x74>
 80025f8:	e020      	b.n	800263c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11d      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e01a      	b.n	8002642 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800260c:	4b5a      	ldr	r3, [pc, #360]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d116      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e013      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800261e:	4b56      	ldr	r3, [pc, #344]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262a:	4b53      	ldr	r3, [pc, #332]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263a:	e006      	b.n	800264a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e004      	b.n	800264c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
    }

    if(status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002652:	4b49      	ldr	r3, [pc, #292]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	430b      	orrs	r3, r1
 8002668:	4943      	ldr	r1, [pc, #268]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d17c      	bne.n	800276e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002674:	4b40      	ldr	r3, [pc, #256]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a3f      	ldr	r2, [pc, #252]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800267e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002680:	f7fe fba0 	bl	8000dc4 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002686:	e009      	b.n	800269c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002688:	f7fe fb9c 	bl	8000dc4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	73fb      	strb	r3, [r7, #15]
        break;
 800269a:	e005      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800269c:	4b36      	ldr	r3, [pc, #216]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ef      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d15f      	bne.n	800276e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d110      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b4:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80026bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6892      	ldr	r2, [r2, #8]
 80026c4:	0211      	lsls	r1, r2, #8
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	06d2      	lsls	r2, r2, #27
 80026cc:	430a      	orrs	r2, r1
 80026ce:	492a      	ldr	r1, [pc, #168]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	610b      	str	r3, [r1, #16]
 80026d4:	e027      	b.n	8002726 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d112      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026dc:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	0211      	lsls	r1, r2, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6912      	ldr	r2, [r2, #16]
 80026f2:	0852      	lsrs	r2, r2, #1
 80026f4:	3a01      	subs	r2, #1
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	430a      	orrs	r2, r1
 80026fa:	491f      	ldr	r1, [pc, #124]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	610b      	str	r3, [r1, #16]
 8002700:	e011      	b.n	8002726 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002702:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800270a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6892      	ldr	r2, [r2, #8]
 8002712:	0211      	lsls	r1, r2, #8
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6952      	ldr	r2, [r2, #20]
 8002718:	0852      	lsrs	r2, r2, #1
 800271a:	3a01      	subs	r2, #1
 800271c:	0652      	lsls	r2, r2, #25
 800271e:	430a      	orrs	r2, r1
 8002720:	4915      	ldr	r1, [pc, #84]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002726:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a13      	ldr	r2, [pc, #76]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002730:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe fb47 	bl	8000dc4 <HAL_GetTick>
 8002736:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002738:	e009      	b.n	800274e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800273a:	f7fe fb43 	bl	8000dc4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d902      	bls.n	800274e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	73fb      	strb	r3, [r7, #15]
          break;
 800274c:	e005      	b.n	800275a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ef      	beq.n	800273a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4903      	ldr	r1, [pc, #12]	@ (8002778 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e049      	b.n	8002822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe f99a 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 fc82 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e049      	b.n	80028d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f841 	bl	80028d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f000 fc2b 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_TIM_PWM_Start+0x24>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e03c      	b.n	800298a <HAL_TIM_PWM_Start+0x9e>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d109      	bne.n	800292a <HAL_TIM_PWM_Start+0x3e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e02f      	b.n	800298a <HAL_TIM_PWM_Start+0x9e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d109      	bne.n	8002944 <HAL_TIM_PWM_Start+0x58>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e022      	b.n	800298a <HAL_TIM_PWM_Start+0x9e>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d109      	bne.n	800295e <HAL_TIM_PWM_Start+0x72>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	e015      	b.n	800298a <HAL_TIM_PWM_Start+0x9e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b10      	cmp	r3, #16
 8002962:	d109      	bne.n	8002978 <HAL_TIM_PWM_Start+0x8c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e008      	b.n	800298a <HAL_TIM_PWM_Start+0x9e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07e      	b.n	8002a90 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xb6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029a0:	e023      	b.n	80029ea <HAL_TIM_PWM_Start+0xfe>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start+0xc6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b0:	e01b      	b.n	80029ea <HAL_TIM_PWM_Start+0xfe>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_PWM_Start+0xd6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c0:	e013      	b.n	80029ea <HAL_TIM_PWM_Start+0xfe>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_PWM_Start+0xe6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029d0:	e00b      	b.n	80029ea <HAL_TIM_PWM_Start+0xfe>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_PWM_Start+0xf6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e0:	e003      	b.n	80029ea <HAL_TIM_PWM_Start+0xfe>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	6839      	ldr	r1, [r7, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 feee 	bl	80037d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a26      	ldr	r2, [pc, #152]	@ (8002a98 <HAL_TIM_PWM_Start+0x1ac>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_TIM_PWM_Start+0x12a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a25      	ldr	r2, [pc, #148]	@ (8002a9c <HAL_TIM_PWM_Start+0x1b0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_TIM_PWM_Start+0x12a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a23      	ldr	r2, [pc, #140]	@ (8002aa0 <HAL_TIM_PWM_Start+0x1b4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_Start+0x12e>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_TIM_PWM_Start+0x130>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_TIM_PWM_Start+0x1ac>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_PWM_Start+0x162>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_PWM_Start+0x162>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a14      	ldr	r2, [pc, #80]	@ (8002a9c <HAL_TIM_PWM_Start+0x1b0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d115      	bne.n	8002a7a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_TIM_PWM_Start+0x1b8>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d015      	beq.n	8002a8c <HAL_TIM_PWM_Start+0x1a0>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a66:	d011      	beq.n	8002a8c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	e008      	b.n	8002a8c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e000      	b.n	8002a8e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	00010007 	.word	0x00010007

08002aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0202 	mvn.w	r2, #2
 8002adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fac7 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fab9 	bl	8003072 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 faca 	bl	800309a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0204 	mvn.w	r2, #4
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 faa1 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa93 	bl	8003072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 faa4 	bl	800309a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0208 	mvn.w	r2, #8
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa7b 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa6d 	bl	8003072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa7e 	bl	800309a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d020      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa55 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa47 	bl	8003072 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa58 	bl	800309a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00c      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0201 	mvn.w	r2, #1
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fcb2 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fe5f 	bl	8003900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fe57 	bl	8003914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fa12 	bl	80030ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00c      	beq.n	8002cae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0220 	mvn.w	r2, #32
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fe1f 	bl	80038ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0ff      	b.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b14      	cmp	r3, #20
 8002ce2:	f200 80f0 	bhi.w	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d41 	.word	0x08002d41
 8002cf0:	08002ec7 	.word	0x08002ec7
 8002cf4:	08002ec7 	.word	0x08002ec7
 8002cf8:	08002ec7 	.word	0x08002ec7
 8002cfc:	08002d81 	.word	0x08002d81
 8002d00:	08002ec7 	.word	0x08002ec7
 8002d04:	08002ec7 	.word	0x08002ec7
 8002d08:	08002ec7 	.word	0x08002ec7
 8002d0c:	08002dc3 	.word	0x08002dc3
 8002d10:	08002ec7 	.word	0x08002ec7
 8002d14:	08002ec7 	.word	0x08002ec7
 8002d18:	08002ec7 	.word	0x08002ec7
 8002d1c:	08002e03 	.word	0x08002e03
 8002d20:	08002ec7 	.word	0x08002ec7
 8002d24:	08002ec7 	.word	0x08002ec7
 8002d28:	08002ec7 	.word	0x08002ec7
 8002d2c:	08002e45 	.word	0x08002e45
 8002d30:	08002ec7 	.word	0x08002ec7
 8002d34:	08002ec7 	.word	0x08002ec7
 8002d38:	08002ec7 	.word	0x08002ec7
 8002d3c:	08002e85 	.word	0x08002e85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fa2c 	bl	80031a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0208 	orr.w	r2, r2, #8
 8002d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0204 	bic.w	r2, r2, #4
 8002d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6999      	ldr	r1, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
      break;
 8002d7e:	e0a5      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fa88 	bl	800329c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	619a      	str	r2, [r3, #24]
      break;
 8002dc0:	e084      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fae1 	bl	8003390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0208 	orr.w	r2, r2, #8
 8002ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0204 	bic.w	r2, r2, #4
 8002dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
      break;
 8002e00:	e064      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fb39 	bl	8003480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69d9      	ldr	r1, [r3, #28]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	61da      	str	r2, [r3, #28]
      break;
 8002e42:	e043      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb76 	bl	800353c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e82:	e023      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fbae 	bl	80035ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	021a      	lsls	r2, r3, #8
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ec4:	e002      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIM_ConfigClockSource+0x1c>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0b6      	b.n	800306a <HAL_TIM_ConfigClockSource+0x18a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f38:	d03e      	beq.n	8002fb8 <HAL_TIM_ConfigClockSource+0xd8>
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3e:	f200 8087 	bhi.w	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f46:	f000 8086 	beq.w	8003056 <HAL_TIM_ConfigClockSource+0x176>
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4e:	d87f      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f50:	2b70      	cmp	r3, #112	@ 0x70
 8002f52:	d01a      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0xaa>
 8002f54:	2b70      	cmp	r3, #112	@ 0x70
 8002f56:	d87b      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f58:	2b60      	cmp	r3, #96	@ 0x60
 8002f5a:	d050      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x11e>
 8002f5c:	2b60      	cmp	r3, #96	@ 0x60
 8002f5e:	d877      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f60:	2b50      	cmp	r3, #80	@ 0x50
 8002f62:	d03c      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0xfe>
 8002f64:	2b50      	cmp	r3, #80	@ 0x50
 8002f66:	d873      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d058      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x13e>
 8002f6c:	2b40      	cmp	r3, #64	@ 0x40
 8002f6e:	d86f      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f70:	2b30      	cmp	r3, #48	@ 0x30
 8002f72:	d064      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x15e>
 8002f74:	2b30      	cmp	r3, #48	@ 0x30
 8002f76:	d86b      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d060      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x15e>
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d867      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d05c      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x15e>
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d05a      	beq.n	800303e <HAL_TIM_ConfigClockSource+0x15e>
 8002f88:	e062      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f9a:	f000 fbfb 	bl	8003794 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	609a      	str	r2, [r3, #8]
      break;
 8002fb6:	e04f      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fc8:	f000 fbe4 	bl	8003794 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fda:	609a      	str	r2, [r3, #8]
      break;
 8002fdc:	e03c      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 fb58 	bl	80036a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2150      	movs	r1, #80	@ 0x50
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fbb1 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e02c      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800300a:	461a      	mov	r2, r3
 800300c:	f000 fb77 	bl	80036fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2160      	movs	r1, #96	@ 0x60
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fba1 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 800301c:	e01c      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	461a      	mov	r2, r3
 800302c:	f000 fb38 	bl	80036a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2140      	movs	r1, #64	@ 0x40
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fb91 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 800303c:	e00c      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f000 fb88 	bl	800375e <TIM_ITRx_SetConfig>
      break;
 800304e:	e003      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      break;
 8003054:	e000      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003056:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a30      	ldr	r2, [pc, #192]	@ (8003198 <TIM_Base_SetConfig+0xd4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x20>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a27      	ldr	r2, [pc, #156]	@ (8003198 <TIM_Base_SetConfig+0xd4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0x52>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0x52>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a24      	ldr	r2, [pc, #144]	@ (800319c <TIM_Base_SetConfig+0xd8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0x52>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a23      	ldr	r2, [pc, #140]	@ (80031a0 <TIM_Base_SetConfig+0xdc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <TIM_Base_SetConfig+0xd4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0xa0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a11      	ldr	r2, [pc, #68]	@ (800319c <TIM_Base_SetConfig+0xd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0xa0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <TIM_Base_SetConfig+0xdc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]
  }
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40014000 	.word	0x40014000
 80031a0:	40014400 	.word	0x40014400

080031a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 0201 	bic.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 0302 	bic.w	r3, r3, #2
 80031f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a24      	ldr	r2, [pc, #144]	@ (8003290 <TIM_OC1_SetConfig+0xec>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_OC1_SetConfig+0x70>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <TIM_OC1_SetConfig+0xf0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_OC1_SetConfig+0x70>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <TIM_OC1_SetConfig+0xf4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10c      	bne.n	800322e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0308 	bic.w	r3, r3, #8
 800321a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <TIM_OC1_SetConfig+0xec>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_OC1_SetConfig+0xa2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a16      	ldr	r2, [pc, #88]	@ (8003294 <TIM_OC1_SetConfig+0xf0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_OC1_SetConfig+0xa2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a15      	ldr	r2, [pc, #84]	@ (8003298 <TIM_OC1_SetConfig+0xf4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40014000 	.word	0x40014000
 8003298:	40014400 	.word	0x40014400

0800329c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 0210 	bic.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0320 	bic.w	r3, r3, #32
 80032ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a22      	ldr	r2, [pc, #136]	@ (8003384 <TIM_OC2_SetConfig+0xe8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10d      	bne.n	800331c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800331a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a19      	ldr	r2, [pc, #100]	@ (8003384 <TIM_OC2_SetConfig+0xe8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_OC2_SetConfig+0x98>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a18      	ldr	r2, [pc, #96]	@ (8003388 <TIM_OC2_SetConfig+0xec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC2_SetConfig+0x98>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a17      	ldr	r2, [pc, #92]	@ (800338c <TIM_OC2_SetConfig+0xf0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d113      	bne.n	800335c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800333a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	621a      	str	r2, [r3, #32]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400

08003390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a21      	ldr	r2, [pc, #132]	@ (8003474 <TIM_OC3_SetConfig+0xe4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10d      	bne.n	800340e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800340c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <TIM_OC3_SetConfig+0xe4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_OC3_SetConfig+0x96>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <TIM_OC3_SetConfig+0xe8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_OC3_SetConfig+0x96>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a16      	ldr	r2, [pc, #88]	@ (800347c <TIM_OC3_SetConfig+0xec>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d113      	bne.n	800344e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800342c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40014000 	.word	0x40014000
 800347c:	40014400 	.word	0x40014400

08003480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	031b      	lsls	r3, r3, #12
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <TIM_OC4_SetConfig+0xb0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_OC4_SetConfig+0x74>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <TIM_OC4_SetConfig+0xb4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC4_SetConfig+0x74>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <TIM_OC4_SetConfig+0xb8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d109      	bne.n	8003508 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400

0800353c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003580:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <TIM_OC5_SetConfig+0xa4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_OC5_SetConfig+0x6a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <TIM_OC5_SetConfig+0xa8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC5_SetConfig+0x6a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a11      	ldr	r2, [pc, #68]	@ (80035e8 <TIM_OC5_SetConfig+0xac>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d109      	bne.n	80035ba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400

080035ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	051b      	lsls	r3, r3, #20
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <TIM_OC6_SetConfig+0xa8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_OC6_SetConfig+0x6c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a13      	ldr	r2, [pc, #76]	@ (8003698 <TIM_OC6_SetConfig+0xac>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC6_SetConfig+0x6c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a12      	ldr	r2, [pc, #72]	@ (800369c <TIM_OC6_SetConfig+0xb0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d109      	bne.n	800366c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	029b      	lsls	r3, r3, #10
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400

080036a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 030a 	bic.w	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 0210 	bic.w	r2, r3, #16
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	031b      	lsls	r3, r3, #12
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800373a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	f043 0307 	orr.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2201      	movs	r2, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e04f      	b.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a21      	ldr	r2, [pc, #132]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003868:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a14      	ldr	r2, [pc, #80]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a0:	d004      	beq.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10c      	bne.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40014000 	.word	0x40014000

080038ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e040      	b.n	80039bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd f91e 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	@ 0x24
 8003954:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa82 	bl	8003e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f825 	bl	80039c4 <UART_SetConfig>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e01b      	b.n	80039bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fb01 	bl	8003fbc <UART_CheckIdleState>
 80039ba:	4603      	mov	r3, r0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b08a      	sub	sp, #40	@ 0x28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b9e      	ldr	r3, [pc, #632]	@ (8003c6c <UART_SetConfig+0x2a8>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a93      	ldr	r2, [pc, #588]	@ (8003c70 <UART_SetConfig+0x2ac>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a8a      	ldr	r2, [pc, #552]	@ (8003c74 <UART_SetConfig+0x2b0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d126      	bne.n	8003a9c <UART_SetConfig+0xd8>
 8003a4e:	4b8a      	ldr	r3, [pc, #552]	@ (8003c78 <UART_SetConfig+0x2b4>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d81b      	bhi.n	8003a94 <UART_SetConfig+0xd0>
 8003a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <UART_SetConfig+0xa0>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8d 	.word	0x08003a8d
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7a:	e0ab      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a82:	e0a7      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003a84:	2304      	movs	r3, #4
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e0a3      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a92:	e09f      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003a94:	2310      	movs	r3, #16
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9a:	e09b      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a76      	ldr	r2, [pc, #472]	@ (8003c7c <UART_SetConfig+0x2b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d138      	bne.n	8003b18 <UART_SetConfig+0x154>
 8003aa6:	4b74      	ldr	r3, [pc, #464]	@ (8003c78 <UART_SetConfig+0x2b4>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d82d      	bhi.n	8003b10 <UART_SetConfig+0x14c>
 8003ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8003abc <UART_SetConfig+0xf8>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003b11 	.word	0x08003b11
 8003ac4:	08003b11 	.word	0x08003b11
 8003ac8:	08003b11 	.word	0x08003b11
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003b11 	.word	0x08003b11
 8003ad4:	08003b11 	.word	0x08003b11
 8003ad8:	08003b11 	.word	0x08003b11
 8003adc:	08003af9 	.word	0x08003af9
 8003ae0:	08003b11 	.word	0x08003b11
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b09 	.word	0x08003b09
 8003af0:	2300      	movs	r3, #0
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e06d      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003af8:	2302      	movs	r3, #2
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e069      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b00:	2304      	movs	r3, #4
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e065      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b08:	2308      	movs	r3, #8
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e061      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b10:	2310      	movs	r3, #16
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b16:	e05d      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a58      	ldr	r2, [pc, #352]	@ (8003c80 <UART_SetConfig+0x2bc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d125      	bne.n	8003b6e <UART_SetConfig+0x1aa>
 8003b22:	4b55      	ldr	r3, [pc, #340]	@ (8003c78 <UART_SetConfig+0x2b4>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b2c:	2b30      	cmp	r3, #48	@ 0x30
 8003b2e:	d016      	beq.n	8003b5e <UART_SetConfig+0x19a>
 8003b30:	2b30      	cmp	r3, #48	@ 0x30
 8003b32:	d818      	bhi.n	8003b66 <UART_SetConfig+0x1a2>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d00a      	beq.n	8003b4e <UART_SetConfig+0x18a>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d814      	bhi.n	8003b66 <UART_SetConfig+0x1a2>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <UART_SetConfig+0x182>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d008      	beq.n	8003b56 <UART_SetConfig+0x192>
 8003b44:	e00f      	b.n	8003b66 <UART_SetConfig+0x1a2>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4c:	e042      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b54:	e03e      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b56:	2304      	movs	r3, #4
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5c:	e03a      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b64:	e036      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b66:	2310      	movs	r3, #16
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6c:	e032      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3f      	ldr	r2, [pc, #252]	@ (8003c70 <UART_SetConfig+0x2ac>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d12a      	bne.n	8003bce <UART_SetConfig+0x20a>
 8003b78:	4b3f      	ldr	r3, [pc, #252]	@ (8003c78 <UART_SetConfig+0x2b4>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b86:	d01a      	beq.n	8003bbe <UART_SetConfig+0x1fa>
 8003b88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b8c:	d81b      	bhi.n	8003bc6 <UART_SetConfig+0x202>
 8003b8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b92:	d00c      	beq.n	8003bae <UART_SetConfig+0x1ea>
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b98:	d815      	bhi.n	8003bc6 <UART_SetConfig+0x202>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <UART_SetConfig+0x1e2>
 8003b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba2:	d008      	beq.n	8003bb6 <UART_SetConfig+0x1f2>
 8003ba4:	e00f      	b.n	8003bc6 <UART_SetConfig+0x202>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bac:	e012      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb4:	e00e      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbc:	e00a      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc4:	e006      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bcc:	e002      	b.n	8003bd4 <UART_SetConfig+0x210>
 8003bce:	2310      	movs	r3, #16
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	@ (8003c70 <UART_SetConfig+0x2ac>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f040 808a 	bne.w	8003cf4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d824      	bhi.n	8003c32 <UART_SetConfig+0x26e>
 8003be8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <UART_SetConfig+0x22c>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c33 	.word	0x08003c33
 8003c10:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe f9ea 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8003c18:	61f8      	str	r0, [r7, #28]
        break;
 8003c1a:	e010      	b.n	8003c3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <UART_SetConfig+0x2c0>)
 8003c1e:	61fb      	str	r3, [r7, #28]
        break;
 8003c20:	e00d      	b.n	8003c3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe f94b 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8003c26:	61f8      	str	r0, [r7, #28]
        break;
 8003c28:	e009      	b.n	8003c3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c2e:	61fb      	str	r3, [r7, #28]
        break;
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8109 	beq.w	8003e58 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d305      	bcc.n	8003c62 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d912      	bls.n	8003c88 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c68:	e0f6      	b.n	8003e58 <UART_SetConfig+0x494>
 8003c6a:	bf00      	nop
 8003c6c:	efff69f3 	.word	0xefff69f3
 8003c70:	40008000 	.word	0x40008000
 8003c74:	40013800 	.word	0x40013800
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40004400 	.word	0x40004400
 8003c80:	40004800 	.word	0x40004800
 8003c84:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	4615      	mov	r5, r2
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	022b      	lsls	r3, r5, #8
 8003c9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c9e:	0222      	lsls	r2, r4, #8
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	6849      	ldr	r1, [r1, #4]
 8003ca4:	0849      	lsrs	r1, r1, #1
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	4688      	mov	r8, r1
 8003caa:	4681      	mov	r9, r0
 8003cac:	eb12 0a08 	adds.w	sl, r2, r8
 8003cb0:	eb43 0b09 	adc.w	fp, r3, r9
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc2:	4650      	mov	r0, sl
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	f7fc fa81 	bl	80001cc <__aeabi_uldivmod>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4613      	mov	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd8:	d308      	bcc.n	8003cec <UART_SetConfig+0x328>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce0:	d204      	bcs.n	8003cec <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e0b5      	b.n	8003e58 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cf2:	e0b1      	b.n	8003e58 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cfc:	d15d      	bne.n	8003dba <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d827      	bhi.n	8003d56 <UART_SetConfig+0x392>
 8003d06:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <UART_SetConfig+0x348>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d41 	.word	0x08003d41
 8003d18:	08003d57 	.word	0x08003d57
 8003d1c:	08003d47 	.word	0x08003d47
 8003d20:	08003d57 	.word	0x08003d57
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d57 	.word	0x08003d57
 8003d2c:	08003d4f 	.word	0x08003d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d30:	f7fe f95c 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e014      	b.n	8003d62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7fe f96e 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	61f8      	str	r0, [r7, #28]
        break;
 8003d3e:	e010      	b.n	8003d62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d40:	4b4c      	ldr	r3, [pc, #304]	@ (8003e74 <UART_SetConfig+0x4b0>)
 8003d42:	61fb      	str	r3, [r7, #28]
        break;
 8003d44:	e00d      	b.n	8003d62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d46:	f7fe f8b9 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8003d4a:	61f8      	str	r0, [r7, #28]
        break;
 8003d4c:	e009      	b.n	8003d62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d52:	61fb      	str	r3, [r7, #28]
        break;
 8003d54:	e005      	b.n	8003d62 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d077      	beq.n	8003e58 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005a      	lsls	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d916      	bls.n	8003db2 <UART_SetConfig+0x3ee>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d8a:	d212      	bcs.n	8003db2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f023 030f 	bic.w	r3, r3, #15
 8003d94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	8afb      	ldrh	r3, [r7, #22]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	8afa      	ldrh	r2, [r7, #22]
 8003dae:	60da      	str	r2, [r3, #12]
 8003db0:	e052      	b.n	8003e58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003db8:	e04e      	b.n	8003e58 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d827      	bhi.n	8003e12 <UART_SetConfig+0x44e>
 8003dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <UART_SetConfig+0x404>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003dfd 	.word	0x08003dfd
 8003dd4:	08003e13 	.word	0x08003e13
 8003dd8:	08003e03 	.word	0x08003e03
 8003ddc:	08003e13 	.word	0x08003e13
 8003de0:	08003e13 	.word	0x08003e13
 8003de4:	08003e13 	.word	0x08003e13
 8003de8:	08003e0b 	.word	0x08003e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe f8fe 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8003df0:	61f8      	str	r0, [r7, #28]
        break;
 8003df2:	e014      	b.n	8003e1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7fe f910 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 8003df8:	61f8      	str	r0, [r7, #28]
        break;
 8003dfa:	e010      	b.n	8003e1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <UART_SetConfig+0x4b0>)
 8003dfe:	61fb      	str	r3, [r7, #28]
        break;
 8003e00:	e00d      	b.n	8003e1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e02:	f7fe f85b 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8003e06:	61f8      	str	r0, [r7, #28]
        break;
 8003e08:	e009      	b.n	8003e1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0e:	61fb      	str	r3, [r7, #28]
        break;
 8003e10:	e005      	b.n	8003e1e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d019      	beq.n	8003e58 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	085a      	lsrs	r2, r3, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	d909      	bls.n	8003e52 <UART_SetConfig+0x48e>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e44:	d205      	bcs.n	8003e52 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	e002      	b.n	8003e58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	@ 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	00f42400 	.word	0x00f42400

08003e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01a      	beq.n	8003f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f76:	d10a      	bne.n	8003f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b098      	sub	sp, #96	@ 0x60
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fcc:	f7fc fefa 	bl	8000dc4 <HAL_GetTick>
 8003fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d12e      	bne.n	800403e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f88c 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004018:	647b      	str	r3, [r7, #68]	@ 0x44
 800401a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800401e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e062      	b.n	8004104 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d149      	bne.n	80040e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f856 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03c      	beq.n	80040e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	623b      	str	r3, [r7, #32]
   return(result);
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004084:	633b      	str	r3, [r7, #48]	@ 0x30
 8004086:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	617b      	str	r3, [r7, #20]
   return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e011      	b.n	8004104 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3758      	adds	r7, #88	@ 0x58
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e04f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d04b      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fc fe4d 	bl	8000dc4 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e04e      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d037      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0xb2>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b80      	cmp	r3, #128	@ 0x80
 8004152:	d034      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b40      	cmp	r3, #64	@ 0x40
 8004158:	d031      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d110      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2208      	movs	r2, #8
 800416e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f838 	bl	80041e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2208      	movs	r2, #8
 800417a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e029      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004198:	d111      	bne.n	80041be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f81e 	bl	80041e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e00f      	b.n	80041de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d0a0      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b095      	sub	sp, #84	@ 0x54
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
 800420e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004258:	2b01      	cmp	r3, #1
 800425a:	d118      	bne.n	800428e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	60bb      	str	r3, [r7, #8]
   return(result);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	647b      	str	r3, [r7, #68]	@ 0x44
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	613b      	str	r3, [r7, #16]
   return(result);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e6      	bne.n	800425c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042a2:	bf00      	nop
 80042a4:	3754      	adds	r7, #84	@ 0x54
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042b4:	f7fc fd04 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b8:	480c      	ldr	r0, [pc, #48]	@ (80042ec <LoopForever+0x6>)
  ldr r1, =_edata
 80042ba:	490d      	ldr	r1, [pc, #52]	@ (80042f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042bc:	4a0d      	ldr	r2, [pc, #52]	@ (80042f4 <LoopForever+0xe>)
  movs r3, #0
 80042be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042c0:	e002      	b.n	80042c8 <LoopCopyDataInit>

080042c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042c6:	3304      	adds	r3, #4

080042c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042cc:	d3f9      	bcc.n	80042c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ce:	4a0a      	ldr	r2, [pc, #40]	@ (80042f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042d0:	4c0a      	ldr	r4, [pc, #40]	@ (80042fc <LoopForever+0x16>)
  movs r3, #0
 80042d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d4:	e001      	b.n	80042da <LoopFillZerobss>

080042d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d8:	3204      	adds	r2, #4

080042da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042dc:	d3fb      	bcc.n	80042d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042de:	f000 f819 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042e2:	f7fc f999 	bl	8000618 <main>

080042e6 <LoopForever>:

LoopForever:
    b LoopForever
 80042e6:	e7fe      	b.n	80042e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80042e8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80042ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80042f4:	080043cc 	.word	0x080043cc
  ldr r2, =_sbss
 80042f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80042fc:	20000110 	.word	0x20000110

08004300 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004300:	e7fe      	b.n	8004300 <ADC1_IRQHandler>

08004302 <memset>:
 8004302:	4402      	add	r2, r0
 8004304:	4603      	mov	r3, r0
 8004306:	4293      	cmp	r3, r2
 8004308:	d100      	bne.n	800430c <memset+0xa>
 800430a:	4770      	bx	lr
 800430c:	f803 1b01 	strb.w	r1, [r3], #1
 8004310:	e7f9      	b.n	8004306 <memset+0x4>
	...

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4d0d      	ldr	r5, [pc, #52]	@ (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	@ (8004350 <__libc_init_array+0x3c>)
 800431a:	1b64      	subs	r4, r4, r5
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2600      	movs	r6, #0
 8004320:	42a6      	cmp	r6, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4d0b      	ldr	r5, [pc, #44]	@ (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	@ (8004358 <__libc_init_array+0x44>)
 8004328:	f000 f818 	bl	800435c <_init>
 800432c:	1b64      	subs	r4, r4, r5
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2600      	movs	r6, #0
 8004332:	42a6      	cmp	r6, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f855 3b04 	ldr.w	r3, [r5], #4
 800433c:	4798      	blx	r3
 800433e:	3601      	adds	r6, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f855 3b04 	ldr.w	r3, [r5], #4
 8004346:	4798      	blx	r3
 8004348:	3601      	adds	r6, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	080043c4 	.word	0x080043c4
 8004350:	080043c4 	.word	0x080043c4
 8004354:	080043c4 	.word	0x080043c4
 8004358:	080043c8 	.word	0x080043c8

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
