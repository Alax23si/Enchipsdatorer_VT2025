
ReverseSensor_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a4  080046a4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046a4  080046a4  000056a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046ac  080046ac  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080046c0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080046c0  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f824  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e57  00000000  00000000  00015860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000176b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b56  00000000  00000000  00018528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002197f  00000000  00000000  0001907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fccf  00000000  00000000  0003a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d180c  00000000  00000000  0004a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  0011bf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0011fc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004644 	.word	0x08004644

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004644 	.word	0x08004644

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <abuzz_start>:
void abuzz_p_short();



void abuzz_start()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	TIM1->PSC 	= 40000-1;
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <abuzz_start+0x20>)
 80004fe:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000502:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->CNT   = 0x0000;
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <abuzz_start+0x20>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800050a:	2104      	movs	r1, #4
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <abuzz_start+0x24>)
 800050e:	f002 fae9 	bl	8002ae4 <HAL_TIM_PWM_Start>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40012c00 	.word	0x40012c00
 800051c:	20000028 	.word	0x20000028

08000520 <abuzz_stop>:



void abuzz_stop()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	TIM1->PSC  = 0x0000;
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <abuzz_stop+0x24>)
 8000526:	2200      	movs	r2, #0
 8000528:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR  = 0xFFFF;
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <abuzz_stop+0x24>)
 800052c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->CCR2 = 0x0000;
 8000532:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <abuzz_stop+0x24>)
 8000534:	2200      	movs	r2, #0
 8000536:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40012c00 	.word	0x40012c00

08000548 <is_blue_button_pushed>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int is_blue_button_pushed(){
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	return (GPIOC->IDR & 0X2000) != 0;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <is_blue_button_pushed+0x20>)
 800054e:	691b      	ldr	r3, [r3, #16]
 8000550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	48000800 	.word	0x48000800

0800056c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim ){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <HAL_GPIO_EXTI_Callback>:
uint32_t EchoStart = 0;
uint32_t EchoFinish = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MODUL_ECHO_Pin)
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d12b      	bne.n	80005e8 <HAL_GPIO_EXTI_Callback+0x68>
	{
		if(HAL_GPIO_ReadPin(MODUL_ECHO_GPIO_Port, MODUL_ECHO_Pin) == GPIO_PIN_SET){
 8000590:	2102      	movs	r1, #2
 8000592:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000594:	f000 ffce 	bl	8001534 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d108      	bne.n	80005b0 <HAL_GPIO_EXTI_Callback+0x30>
			EchoFlag = 1;
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
			EchoStart = __HAL_TIM_GET_COUNTER(&htim2);
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x78>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x7c>)
 80005ac:	6013      	str	r3, [r2, #0]
			EchoFinish = __HAL_TIM_GET_COUNTER(&htim2);
			EchoFlag= 0;
			Distance = (EchoFinish - EchoStart) / 58;
		}
	}
}
 80005ae:	e01b      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x68>
		else if(EchoFlag){
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d017      	beq.n	80005e8 <HAL_GPIO_EXTI_Callback+0x68>
			EchoFinish = __HAL_TIM_GET_COUNTER(&htim2);
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x78>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005be:	4a10      	ldr	r2, [pc, #64]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x80>)
 80005c0:	6013      	str	r3, [r2, #0]
			EchoFlag= 0;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
			Distance = (EchoFinish - EchoStart) / 58;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x80>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x7c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x84>)
 80005d4:	fba2 2303 	umull	r2, r3, r2, r3
 80005d8:	095b      	lsrs	r3, r3, #5
 80005da:	ee07 3a90 	vmov	s15, r3
 80005de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <HAL_GPIO_EXTI_Callback+0x88>)
 80005e4:	edc3 7a00 	vstr	s15, [r3]
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	48000800 	.word	0x48000800
 80005f4:	2000014c 	.word	0x2000014c
 80005f8:	20000074 	.word	0x20000074
 80005fc:	20000150 	.word	0x20000150
 8000600:	20000154 	.word	0x20000154
 8000604:	8d3dcb09 	.word	0x8d3dcb09
 8000608:	20000148 	.word	0x20000148

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t isTIM2Started = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fc61 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f8a7 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fa55 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 fa23 	bl	8000a6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000626:	f000 f9a1 	bl	800096c <MX_TIM2_Init>
  MX_TIM1_Init();
 800062a:	f000 f8f1 	bl	8000810 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4847      	ldr	r0, [pc, #284]	@ (8000750 <main+0x144>)
 8000632:	f002 fa57 	bl	8002ae4 <HAL_TIM_PWM_Start>
	int started = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(!started){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <main+0x3a>
			started = is_blue_button_pushed();
 8000640:	f7ff ff82 	bl	8000548 <is_blue_button_pushed>
 8000644:	6078      	str	r0, [r7, #4]
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(started){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f6      	beq.n	800063a <main+0x2e>
			HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	@ 0x64
 800064e:	f000 fcc1 	bl	8000fd4 <HAL_Delay>
			if (Distance > 400.0f) {
 8000652:	4b40      	ldr	r3, [pc, #256]	@ (8000754 <main+0x148>)
 8000654:	edd3 7a00 	vldr	s15, [r3]
 8000658:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000758 <main+0x14c>
 800065c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	dd02      	ble.n	800066c <main+0x60>
				abuzz_stop();
 8000666:	f7ff ff5b 	bl	8000520 <abuzz_stop>
 800066a:	e7e6      	b.n	800063a <main+0x2e>
			}
			else if (Distance > 200.0f) {
 800066c:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <main+0x148>)
 800066e:	edd3 7a00 	vldr	s15, [r3]
 8000672:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800075c <main+0x150>
 8000676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800067a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067e:	dd0a      	ble.n	8000696 <main+0x8a>
				abuzz_start();
 8000680:	f7ff ff3a 	bl	80004f8 <abuzz_start>
				TIM1->ARR = 2000-1;
 8000684:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <main+0x154>)
 8000686:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM1->CCR2 = 1000;
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <main+0x154>)
 800068e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000692:	639a      	str	r2, [r3, #56]	@ 0x38
 8000694:	e7d1      	b.n	800063a <main+0x2e>

			}
			else if (Distance > 100.0f) {
 8000696:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <main+0x148>)
 8000698:	edd3 7a00 	vldr	s15, [r3]
 800069c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000764 <main+0x158>
 80006a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a8:	dd0a      	ble.n	80006c0 <main+0xb4>
				abuzz_start();
 80006aa:	f7ff ff25 	bl	80004f8 <abuzz_start>
				TIM1->ARR = 3000-1;
 80006ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000760 <main+0x154>)
 80006b0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80006b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM1->CCR2 = 1500;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <main+0x154>)
 80006b8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80006bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80006be:	e7bc      	b.n	800063a <main+0x2e>

			}
			else if (Distance > 50.0f) {
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <main+0x148>)
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000768 <main+0x15c>
 80006ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	dd0a      	ble.n	80006ea <main+0xde>
				abuzz_start();
 80006d4:	f7ff ff10 	bl	80004f8 <abuzz_start>
				TIM1->ARR = 2000 -1;
 80006d8:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <main+0x154>)
 80006da:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80006de:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM1->CCR2 = 1000;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <main+0x154>)
 80006e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80006e8:	e7a7      	b.n	800063a <main+0x2e>

			}
			else if (Distance > 30.0f) {
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <main+0x148>)
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80006f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fc:	dd0a      	ble.n	8000714 <main+0x108>
				abuzz_start();
 80006fe:	f7ff fefb 	bl	80004f8 <abuzz_start>
				TIM1->ARR = 1000 - 1;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <main+0x154>)
 8000704:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM1->CCR2 = 500;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <main+0x154>)
 800070c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000710:	639a      	str	r2, [r3, #56]	@ 0x38
 8000712:	e792      	b.n	800063a <main+0x2e>

			}
			else if (Distance > 20.0f) {
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <main+0x148>)
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800071e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000726:	dd0a      	ble.n	800073e <main+0x132>
				abuzz_start();
 8000728:	f7ff fee6 	bl	80004f8 <abuzz_start>
				TIM1->ARR = 600-1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <main+0x154>)
 800072e:	f240 2257 	movw	r2, #599	@ 0x257
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM1->CCR2 = 300;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0x154>)
 8000736:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800073a:	639a      	str	r2, [r3, #56]	@ 0x38
 800073c:	e77d      	b.n	800063a <main+0x2e>

			}
			else {
				abuzz_start();
 800073e:	f7ff fedb 	bl	80004f8 <abuzz_start>
				TIM1->ARR = 100-1;
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <main+0x154>)
 8000744:	2263      	movs	r2, #99	@ 0x63
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM1->CCR2 = 100;
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <main+0x154>)
 800074a:	2264      	movs	r2, #100	@ 0x64
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
		if(!started){
 800074e:	e774      	b.n	800063a <main+0x2e>
 8000750:	20000074 	.word	0x20000074
 8000754:	20000148 	.word	0x20000148
 8000758:	43c80000 	.word	0x43c80000
 800075c:	43480000 	.word	0x43480000
 8000760:	40012c00 	.word	0x40012c00
 8000764:	42c80000 	.word	0x42c80000
 8000768:	42480000 	.word	0x42480000

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2244      	movs	r2, #68	@ 0x44
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f003 ff35 	bl	80045ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000792:	f000 ff25 	bl	80015e0 <HAL_PWREx_ControlVoltageScaling>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800079c:	f000 fa36 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007aa:	2310      	movs	r3, #16
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ba:	230a      	movs	r3, #10
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 ff5c 	bl	800168c <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007da:	f000 fa17 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	2104      	movs	r1, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fb5c 	bl	8001eb4 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000802:	f000 fa03 	bl	8000c0c <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3758      	adds	r7, #88	@ 0x58
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09a      	sub	sp, #104	@ 0x68
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000816:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000830:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
 8000842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	222c      	movs	r2, #44	@ 0x2c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fecd 	bl	80045ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000850:	4b44      	ldr	r3, [pc, #272]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000852:	4a45      	ldr	r2, [pc, #276]	@ (8000968 <MX_TIM1_Init+0x158>)
 8000854:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000-1;
 8000856:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000858:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800085c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000864:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800086a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_TIM1_Init+0x154>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000872:	4b3c      	ldr	r3, [pc, #240]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_TIM1_Init+0x154>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087e:	4839      	ldr	r0, [pc, #228]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000880:	f002 f878 	bl	8002974 <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800088a:	f000 f9bf 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000892:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000894:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000898:	4619      	mov	r1, r3
 800089a:	4832      	ldr	r0, [pc, #200]	@ (8000964 <MX_TIM1_Init+0x154>)
 800089c:	f002 fc1c 	bl	80030d8 <HAL_TIM_ConfigClockSource>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80008a6:	f000 f9b1 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008aa:	482e      	ldr	r0, [pc, #184]	@ (8000964 <MX_TIM1_Init+0x154>)
 80008ac:	f002 f8b9 	bl	8002a22 <HAL_TIM_PWM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80008b6:	f000 f9a9 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008ca:	4619      	mov	r1, r3
 80008cc:	4825      	ldr	r0, [pc, #148]	@ (8000964 <MX_TIM1_Init+0x154>)
 80008ce:	f003 f8a3 	bl	8003a18 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80008d8:	f000 f998 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008dc:	2360      	movs	r3, #96	@ 0x60
 80008de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008fc:	2204      	movs	r2, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4818      	ldr	r0, [pc, #96]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000902:	f002 fad5 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800090c:	f000 f97e 	bl	8000c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000924:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000928:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000946:	f003 f8cd 	bl	8003ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000950:	f000 f95c 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <MX_TIM1_Init+0x154>)
 8000956:	f000 f9bb 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 800095a:	bf00      	nop
 800095c:	3768      	adds	r7, #104	@ 0x68
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028
 8000968:	40012c00 	.word	0x40012c00

0800096c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	@ 0x38
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	201c      	movs	r0, #28
 80009a4:	f000 fc15 	bl	80011d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009a8:	201c      	movs	r0, #28
 80009aa:	f000 fc2e 	bl	800120a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80009b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009b8:	224f      	movs	r2, #79	@ 0x4f
 80009ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000 - 1;
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <MX_TIM2_Init+0xfc>)
 80009c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d4:	4823      	ldr	r0, [pc, #140]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009d6:	f001 ffcd 	bl	8002974 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009e0:	f000 f914 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ee:	4619      	mov	r1, r3
 80009f0:	481c      	ldr	r0, [pc, #112]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 80009f2:	f002 fb71 	bl	80030d8 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009fc:	f000 f906 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a00:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 8000a02:	f002 f80e 	bl	8002a22 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000a0c:	f000 f8fe 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 8000a20:	f002 fffa 	bl	8003a18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000a2a:	f000 f8ef 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	@ 0x60
 8000a30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000a32:	230a      	movs	r3, #10
 8000a34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 8000a46:	f002 fa33 	bl	8002eb0 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000a50:	f000 f8dc 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <MX_TIM2_Init+0xf8>)
 8000a56:	f000 f93b 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3738      	adds	r7, #56	@ 0x38
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000074 	.word	0x20000074
 8000a68:	0001869f 	.word	0x0001869f

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <MX_USART2_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	f003 f8ae 	bl	8003c10 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f8a7 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000c0 	.word	0x200000c0
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b47      	ldr	r3, [pc, #284]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a46      	ldr	r2, [pc, #280]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b44      	ldr	r3, [pc, #272]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b41      	ldr	r3, [pc, #260]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a40      	ldr	r2, [pc, #256]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b3e      	ldr	r3, [pc, #248]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b3b      	ldr	r3, [pc, #236]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a3a      	ldr	r2, [pc, #232]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b38      	ldr	r3, [pc, #224]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b35      	ldr	r3, [pc, #212]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a34      	ldr	r2, [pc, #208]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b32      	ldr	r3, [pc, #200]	@ (8000c00 <MX_GPIO_Init+0x134>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	21b0      	movs	r1, #176	@ 0xb0
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4a:	f000 fd0b 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b54:	482b      	ldr	r0, [pc, #172]	@ (8000c04 <MX_GPIO_Init+0x138>)
 8000b56:	f000 fd05 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4825      	ldr	r0, [pc, #148]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b72:	f000 fb65 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODUL_ECHO_Pin */
  GPIO_InitStruct.Pin = MODUL_ECHO_Pin;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODUL_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481f      	ldr	r0, [pc, #124]	@ (8000c08 <MX_GPIO_Init+0x13c>)
 8000b8c:	f000 fb58 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000b90:	23b0      	movs	r3, #176	@ 0xb0
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000baa:	f000 fb49 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000bae:	2340      	movs	r3, #64	@ 0x40
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f000 fb3c 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4808      	ldr	r0, [pc, #32]	@ (8000c04 <MX_GPIO_Init+0x138>)
 8000be2:	f000 fb2d 	bl	8001240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	2007      	movs	r0, #7
 8000bec:	f000 faf1 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bf0:	2007      	movs	r0, #7
 8000bf2:	f000 fb0a 	bl	800120a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c22:	4a0e      	ldr	r2, [pc, #56]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a16      	ldr	r2, [pc, #88]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x68>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10c      	bne.n	8000c8c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c72:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c76:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000c78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c8a:	e018      	b.n	8000cbe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c94:	d113      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_TIM_Base_MspInit+0x6c>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	201c      	movs	r0, #28
 8000cb4:	f000 fa8d 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f000 faa6 	bl	800120a <HAL_NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <HAL_TIM_MspPostInit+0xac>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d11e      	bne.n	8000d30 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <HAL_TIM_MspPostInit+0xb0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <HAL_TIM_MspPostInit+0xb0>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <HAL_TIM_MspPostInit+0xb0>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f000 fa89 	bl	8001240 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d2e:	e021      	b.n	8000d74 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d38:	d11c      	bne.n	8000d74 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_TIM_MspPostInit+0xb0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_TIM_MspPostInit+0xb0>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_TIM_MspPostInit+0xb0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MODUL_TRIGG_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d62:	2301      	movs	r3, #1
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MODUL_TRIGG_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f000 fa66 	bl	8001240 <HAL_GPIO_Init>
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012c00 	.word	0x40012c00
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0a2      	sub	sp, #136	@ 0x88
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2260      	movs	r2, #96	@ 0x60
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fc20 	bl	80045ea <memset>
  if(huart->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <HAL_UART_MspInit+0xac>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d138      	bne.n	8000e26 <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fa9b 	bl	80022fc <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff ff1e 	bl	8000c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_UART_MspInit+0xb0>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_UART_MspInit+0xb0>)
 8000dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_UART_MspInit+0xb0>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_UART_MspInit+0xb0>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	4a11      	ldr	r2, [pc, #68]	@ (8000e34 <HAL_UART_MspInit+0xb0>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <HAL_UART_MspInit+0xb0>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e00:	230c      	movs	r3, #12
 8000e02:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e12:	2307      	movs	r3, #7
 8000e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f000 fa0d 	bl	8001240 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	3788      	adds	r7, #136	@ 0x88
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40021000 	.word	0x40021000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8e:	f000 f881 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODUL_ECHO_Pin);
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f000 fb7a 	bl	8001594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM2_IRQHandler+0x10>)
 8000eaa:	f001 fef9 	bl	8002ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000074 	.word	0x20000074

08000eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <HAL_Init+0x3c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f962 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f80f 	bl	8000f1c <HAL_InitTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e001      	b.n	8000f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0a:	f7ff fe85 	bl	8000c18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_InitTick+0x70>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f96d 	bl	8001226 <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f937 	bl	80011d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_InitTick+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e001      	b.n	8000f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000158 	.word	0x20000158

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000158 	.word	0x20000158

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	@ (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	@ (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	@ 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff29 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff3e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff31 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e154      	b.n	80014fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8146 	beq.w	80014f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_GPIO_Init+0x40>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d017      	beq.n	800131e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	6939      	ldr	r1, [r7, #16]
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80a0 	beq.w	80014f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_GPIO_Init+0x2d8>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b8:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <HAL_GPIO_Init+0x2d8>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c0:	4b55      	ldr	r3, [pc, #340]	@ (8001518 <HAL_GPIO_Init+0x2d8>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013cc:	4a53      	ldr	r2, [pc, #332]	@ (800151c <HAL_GPIO_Init+0x2dc>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013f6:	d019      	beq.n	800142c <HAL_GPIO_Init+0x1ec>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a49      	ldr	r2, [pc, #292]	@ (8001520 <HAL_GPIO_Init+0x2e0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d013      	beq.n	8001428 <HAL_GPIO_Init+0x1e8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a48      	ldr	r2, [pc, #288]	@ (8001524 <HAL_GPIO_Init+0x2e4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00d      	beq.n	8001424 <HAL_GPIO_Init+0x1e4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a47      	ldr	r2, [pc, #284]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0x1e0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a46      	ldr	r2, [pc, #280]	@ (800152c <HAL_GPIO_Init+0x2ec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_GPIO_Init+0x1dc>
 8001418:	2304      	movs	r3, #4
 800141a:	e008      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 800141c:	2307      	movs	r3, #7
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001420:	2303      	movs	r3, #3
 8001422:	e004      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001424:	2302      	movs	r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_Init+0x1ee>
 800142c:	2300      	movs	r3, #0
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800143e:	4937      	ldr	r1, [pc, #220]	@ (800151c <HAL_GPIO_Init+0x2dc>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144c:	4b38      	ldr	r3, [pc, #224]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001470:	4a2f      	ldr	r2, [pc, #188]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001476:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800149a:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f aea3 	bne.w	8001250 <HAL_GPIO_Init+0x10>
  }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	48000400 	.word	0x48000400
 8001524:	48000800 	.word	0x48000800
 8001528:	48000c00 	.word	0x48000c00
 800152c:	48001000 	.word	0x48001000
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe4 	bl	8000580 <HAL_GPIO_EXTI_Callback>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010400 	.word	0x40010400

080015c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <HAL_PWREx_GetVoltageRange+0x18>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ee:	d130      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f0:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015fc:	d038      	beq.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2232      	movs	r2, #50	@ 0x32
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9b      	lsrs	r3, r3, #18
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001624:	e002      	b.n	800162c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001638:	d102      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x60>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f2      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164c:	d110      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e00f      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800165a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800165e:	d007      	beq.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001668:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000
 8001684:	20000000 	.word	0x20000000
 8001688:	431bde83 	.word	0x431bde83

0800168c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f000 bc02 	b.w	8001ea4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a0:	4b96      	ldr	r3, [pc, #600]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016aa:	4b94      	ldr	r3, [pc, #592]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80e4 	beq.w	800188a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4c>
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f040 8087 	bne.w	80017e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d8:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x64>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e3d9      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	4b81      	ldr	r3, [pc, #516]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_RCC_OscConfig+0x7e>
 8001700:	4b7e      	ldr	r3, [pc, #504]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001708:	e005      	b.n	8001716 <HAL_RCC_OscConfig+0x8a>
 800170a:	4b7c      	ldr	r3, [pc, #496]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800170c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001716:	4293      	cmp	r3, r2
 8001718:	d223      	bcs.n	8001762 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd8c 	bl	800223c <RCC_SetFlashLatencyFromMSIRange>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e3ba      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172e:	4b73      	ldr	r3, [pc, #460]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a72      	ldr	r2, [pc, #456]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	496d      	ldr	r1, [pc, #436]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4b6b      	ldr	r3, [pc, #428]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4968      	ldr	r1, [pc, #416]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
 8001760:	e025      	b.n	80017ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001762:	4b66      	ldr	r3, [pc, #408]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a65      	ldr	r2, [pc, #404]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4960      	ldr	r1, [pc, #384]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001780:	4b5e      	ldr	r3, [pc, #376]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	495b      	ldr	r1, [pc, #364]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fd4c 	bl	800223c <RCC_SetFlashLatencyFromMSIRange>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e37a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017ae:	f000 fc81 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b51      	ldr	r3, [pc, #324]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4950      	ldr	r1, [pc, #320]	@ (8001900 <HAL_RCC_OscConfig+0x274>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001904 <HAL_RCC_OscConfig+0x278>)
 80017cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fba2 	bl	8000f1c <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d052      	beq.n	8001888 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	e35e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d032      	beq.n	8001854 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ee:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a42      	ldr	r2, [pc, #264]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fbdf 	bl	8000fbc <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001802:	f7ff fbdb 	bl	8000fbc <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e347      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001814:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a35      	ldr	r2, [pc, #212]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4930      	ldr	r1, [pc, #192]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	4b2f      	ldr	r3, [pc, #188]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	492b      	ldr	r1, [pc, #172]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
 8001852:	e01a      	b.n	800188a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001860:	f7ff fbac 	bl	8000fbc <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001868:	f7ff fba8 	bl	8000fbc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e314      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1dc>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d073      	beq.n	800197e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x21c>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d063      	beq.n	800197c <HAL_RCC_OscConfig+0x2f0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d15f      	bne.n	800197c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e2f1      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x24c>
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e025      	b.n	8001924 <HAL_RCC_OscConfig+0x298>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018e0:	d114      	bne.n	800190c <HAL_RCC_OscConfig+0x280>
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a02      	ldr	r2, [pc, #8]	@ (80018fc <HAL_RCC_OscConfig+0x270>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x298>
 80018fc:	40021000 	.word	0x40021000
 8001900:	0800465c 	.word	0x0800465c
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004
 800190c:	4ba0      	ldr	r3, [pc, #640]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a9f      	ldr	r2, [pc, #636]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b9d      	ldr	r3, [pc, #628]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a9c      	ldr	r2, [pc, #624]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb46 	bl	8000fbc <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fb42 	bl	8000fbc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e2ae      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001946:	4b92      	ldr	r3, [pc, #584]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x2a8>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fb32 	bl	8000fbc <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fb2e 	bl	8000fbc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e29a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196e:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x2d0>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d060      	beq.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d005      	beq.n	800199c <HAL_RCC_OscConfig+0x310>
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d119      	bne.n	80019ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d116      	bne.n	80019ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x328>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e277      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	4973      	ldr	r1, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	e040      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d023      	beq.n	8001a1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff faed 	bl	8000fbc <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fae9 	bl	8000fbc <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e255      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b65      	ldr	r3, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b62      	ldr	r3, [pc, #392]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	495f      	ldr	r1, [pc, #380]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e018      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff fac9 	bl	8000fbc <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fac5 	bl	8000fbc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e231      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a40:	4b53      	ldr	r3, [pc, #332]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d03c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a60:	4b4b      	ldr	r3, [pc, #300]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a66:	4a4a      	ldr	r2, [pc, #296]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff faa4 	bl	8000fbc <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff faa0 	bl	8000fbc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e20c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ef      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3ec>
 8001a98:	e01b      	b.n	8001ad2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fa87 	bl	8000fbc <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fa83 	bl	8000fbc <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1ef      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ef      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80a6 	beq.w	8001c2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0c:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d118      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fa4a 	bl	8000fbc <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7ff fa46 	bl	8000fbc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1b2      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_RCC_OscConfig+0x508>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4d8>
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b62:	e029      	b.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d115      	bne.n	8001b98 <HAL_RCC_OscConfig+0x50c>
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b72:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b82:	4a03      	ldr	r2, [pc, #12]	@ (8001b90 <HAL_RCC_OscConfig+0x504>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40007000 	.word	0x40007000
 8001b98:	4b9a      	ldr	r3, [pc, #616]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	4a99      	ldr	r2, [pc, #612]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba8:	4b96      	ldr	r3, [pc, #600]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bae:	4a95      	ldr	r2, [pc, #596]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff f9fc 	bl	8000fbc <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f9f8 	bl	8000fbc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e162      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bde:	4b89      	ldr	r3, [pc, #548]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ed      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x53c>
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff f9e5 	bl	8000fbc <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff f9e1 	bl	8000fbc <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e14b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ed      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	4a77      	ldr	r2, [pc, #476]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d03c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c40:	4b70      	ldr	r3, [pc, #448]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c46:	4a6f      	ldr	r2, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f9b4 	bl	8000fbc <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c58:	f7ff f9b0 	bl	8000fbc <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e11c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6a:	4b66      	ldr	r3, [pc, #408]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ef      	beq.n	8001c58 <HAL_RCC_OscConfig+0x5cc>
 8001c78:	e01b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c7a:	4b62      	ldr	r3, [pc, #392]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c80:	4a60      	ldr	r2, [pc, #384]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f997 	bl	8000fbc <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c92:	f7ff f993 	bl	8000fbc <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0ff      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca4:	4b57      	ldr	r3, [pc, #348]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ef      	bne.n	8001c92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80f3 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	f040 80c9 	bne.w	8001e58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d12c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d123      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d11b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d113      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d109      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d06b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d062      	beq.n	8001e00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d3a:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0ac      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d56:	f7ff f931 	bl	8000fbc <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff f92d 	bl	8000fbc <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e099      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <HAL_RCC_OscConfig+0x77c>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d96:	0212      	lsls	r2, r2, #8
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0552      	lsls	r2, r2, #21
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0652      	lsls	r2, r2, #25
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001db6:	06d2      	lsls	r2, r2, #27
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4912      	ldr	r1, [pc, #72]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd8:	f7ff f8f0 	bl	8000fbc <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f8ec 	bl	8000fbc <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e058      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <HAL_RCC_OscConfig+0x778>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfe:	e050      	b.n	8001ea2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d144      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e18:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e30:	f7ff f8c4 	bl	8000fbc <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f8c0 	bl	8000fbc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e02c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x7ac>
 8001e56:	e024      	b.n	8001ea2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d01f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f8a7 	bl	8000fbc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f8a3 	bl	8000fbc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4905      	ldr	r1, [pc, #20]	@ (8001eac <HAL_RCC_OscConfig+0x820>)
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_RCC_OscConfig+0x824>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e001      	b.n	8001ea2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	feeefffc 	.word	0xfeeefffc

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0e7      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b72      	ldr	r3, [pc, #456]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4970      	ldr	r1, [pc, #448]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cf      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d908      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4960      	ldr	r1, [pc, #384]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04c      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a6      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b54      	ldr	r3, [pc, #336]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09a      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e08e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e086      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4943      	ldr	r1, [pc, #268]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff f80e 	bl	8000fbc <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff f80a 	bl	8000fbc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	492b      	ldr	r1, [pc, #172]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffa:	4b29      	ldr	r3, [pc, #164]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d210      	bcs.n	800202a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4923      	ldr	r1, [pc, #140]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e036      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4918      	ldr	r1, [pc, #96]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4910      	ldr	r1, [pc, #64]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002068:	f000 f824 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	490b      	ldr	r1, [pc, #44]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f4>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1fc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe ff45 	bl	8000f1c <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]

  return status;
 8002096:	7afb      	ldrb	r3, [r7, #11]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	0800465c 	.word	0x0800465c
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11e      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e8:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002110:	4a2b      	ldr	r2, [pc, #172]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	e00a      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d102      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212c:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e004      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d101      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002138:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800213a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d134      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
 8002158:	e005      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0e5b      	lsrs	r3, r3, #25
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	3301      	adds	r3, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ac:	69bb      	ldr	r3, [r7, #24]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004674 	.word	0x08004674
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000000 	.word	0x20000000

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021e8:	f7ff fff0 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4904      	ldr	r1, [pc, #16]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x28>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	0800466c 	.word	0x0800466c

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002214:	f7ff ffda 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0adb      	lsrs	r3, r3, #11
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4904      	ldr	r1, [pc, #16]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	0800466c 	.word	0x0800466c

0800223c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002248:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002254:	f7ff f9b6 	bl	80015c4 <HAL_PWREx_GetVoltageRange>
 8002258:	6178      	str	r0, [r7, #20]
 800225a:	e014      	b.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	4a24      	ldr	r2, [pc, #144]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	@ 0x58
 8002268:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f9a6 	bl	80015c4 <HAL_PWREx_GetVoltageRange>
 8002278:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800228c:	d10b      	bne.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b80      	cmp	r3, #128	@ 0x80
 8002292:	d919      	bls.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2ba0      	cmp	r3, #160	@ 0xa0
 8002298:	d902      	bls.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229a:	2302      	movs	r3, #2
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e013      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a0:	2301      	movs	r3, #1
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e010      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b80      	cmp	r3, #128	@ 0x80
 80022aa:	d902      	bls.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022ac:	2303      	movs	r3, #3
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e00a      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	@ 0x80
 80022b6:	d102      	bne.n	80022be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022b8:	2302      	movs	r3, #2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e004      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b70      	cmp	r3, #112	@ 0x70
 80022c2:	d101      	bne.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 0207 	bic.w	r2, r3, #7
 80022d0:	4909      	ldr	r1, [pc, #36]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002304:	2300      	movs	r3, #0
 8002306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002308:	2300      	movs	r3, #0
 800230a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002314:	2b00      	cmp	r3, #0
 8002316:	d031      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002320:	d01a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002322:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002326:	d814      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800232c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002330:	d10f      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002332:	4b5d      	ldr	r3, [pc, #372]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a5c      	ldr	r2, [pc, #368]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800233e:	e00c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fa22 	bl	8002790 <RCCEx_PLLSAI1_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002350:	e003      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	74fb      	strb	r3, [r7, #19]
      break;
 8002356:	e000      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002360:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	494e      	ldr	r1, [pc, #312]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002376:	e001      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 809e 	beq.w	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238e:	4b46      	ldr	r3, [pc, #280]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b40      	ldr	r3, [pc, #256]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	4a3f      	ldr	r2, [pc, #252]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b0:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a39      	ldr	r2, [pc, #228]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fdf6 	bl	8000fbc <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d2:	e009      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe fdf2 	bl	8000fbc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	74fb      	strb	r3, [r7, #19]
        break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e8:	4b30      	ldr	r3, [pc, #192]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d15a      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fa:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01e      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	429a      	cmp	r2, r3
 8002414:	d019      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002416:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002420:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002432:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002438:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d016      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fdb2 	bl	8000fbc <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	e00b      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe fdae 	bl	8000fbc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d902      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	74fb      	strb	r3, [r7, #19]
            break;
 8002472:	e006      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ec      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800249e:	e009      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
 80024a4:	e006      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b4:	7c7b      	ldrb	r3, [r7, #17]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b8d      	ldr	r3, [pc, #564]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	4a8c      	ldr	r2, [pc, #560]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d2:	4b87      	ldr	r3, [pc, #540]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d8:	f023 0203 	bic.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4983      	ldr	r1, [pc, #524]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f4:	4b7e      	ldr	r3, [pc, #504]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	f023 020c 	bic.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	497b      	ldr	r1, [pc, #492]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002516:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	4972      	ldr	r1, [pc, #456]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002538:	4b6d      	ldr	r3, [pc, #436]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	496a      	ldr	r1, [pc, #424]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255a:	4b65      	ldr	r3, [pc, #404]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002568:	4961      	ldr	r1, [pc, #388]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800257c:	4b5c      	ldr	r3, [pc, #368]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	4959      	ldr	r1, [pc, #356]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800259e:	4b54      	ldr	r3, [pc, #336]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4950      	ldr	r1, [pc, #320]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c0:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	4948      	ldr	r1, [pc, #288]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e2:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	493f      	ldr	r1, [pc, #252]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d028      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002604:	4b3a      	ldr	r3, [pc, #232]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002612:	4937      	ldr	r1, [pc, #220]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002622:	d106      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800262e:	60d3      	str	r3, [r2, #12]
 8002630:	e011      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800263a:	d10c      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f8a4 	bl	8002790 <RCCEx_PLLSAI1_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002662:	4b23      	ldr	r3, [pc, #140]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002668:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002670:	491f      	ldr	r1, [pc, #124]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002680:	d106      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a1a      	ldr	r2, [pc, #104]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002688:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800268c:	60d3      	str	r3, [r2, #12]
 800268e:	e011      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002694:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2101      	movs	r1, #1
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f875 	bl	8002790 <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ce:	4908      	ldr	r1, [pc, #32]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026de:	d109      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a02      	ldr	r2, [pc, #8]	@ (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
 80026ec:	e014      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	2101      	movs	r1, #1
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f843 	bl	8002790 <RCCEx_PLLSAI1_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002732:	4916      	ldr	r1, [pc, #88]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002742:	d10c      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f820 	bl	8002790 <RCCEx_PLLSAI1_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	4904      	ldr	r1, [pc, #16]	@ (800278c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002780:	7cbb      	ldrb	r3, [r7, #18]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279e:	4b74      	ldr	r3, [pc, #464]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d018      	beq.n	80027dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027aa:	4b71      	ldr	r3, [pc, #452]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0203 	and.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
       ||
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027c2:	4b6b      	ldr	r3, [pc, #428]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
       ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d047      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e044      	b.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d018      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x86>
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d825      	bhi.n	8002834 <RCCEx_PLLSAI1_Config+0xa4>
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d002      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x62>
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d009      	beq.n	8002804 <RCCEx_PLLSAI1_Config+0x74>
 80027f0:	e020      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d11d      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e01a      	b.n	800283a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002804:	4b5a      	ldr	r3, [pc, #360]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d116      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002814:	e013      	b.n	800283e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002816:	4b56      	ldr	r3, [pc, #344]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002822:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002832:	e006      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e004      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e002      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283e:	bf00      	nop
 8002840:	e000      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002842:	bf00      	nop
    }

    if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800284a:	4b49      	ldr	r3, [pc, #292]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	430b      	orrs	r3, r1
 8002860:	4943      	ldr	r1, [pc, #268]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d17c      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800286c:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3f      	ldr	r2, [pc, #252]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002872:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fba0 	bl	8000fbc <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287e:	e009      	b.n	8002894 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002880:	f7fe fb9c 	bl	8000fbc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	73fb      	strb	r3, [r7, #15]
        break;
 8002892:	e005      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002894:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ef      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d15f      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d110      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ac:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80028b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6892      	ldr	r2, [r2, #8]
 80028bc:	0211      	lsls	r1, r2, #8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	06d2      	lsls	r2, r2, #27
 80028c4:	430a      	orrs	r2, r1
 80028c6:	492a      	ldr	r1, [pc, #168]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	610b      	str	r3, [r1, #16]
 80028cc:	e027      	b.n	800291e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d112      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d4:	4b26      	ldr	r3, [pc, #152]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6892      	ldr	r2, [r2, #8]
 80028e4:	0211      	lsls	r1, r2, #8
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6912      	ldr	r2, [r2, #16]
 80028ea:	0852      	lsrs	r2, r2, #1
 80028ec:	3a01      	subs	r2, #1
 80028ee:	0552      	lsls	r2, r2, #21
 80028f0:	430a      	orrs	r2, r1
 80028f2:	491f      	ldr	r1, [pc, #124]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	610b      	str	r3, [r1, #16]
 80028f8:	e011      	b.n	800291e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002902:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	0211      	lsls	r1, r2, #8
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6952      	ldr	r2, [r2, #20]
 8002910:	0852      	lsrs	r2, r2, #1
 8002912:	3a01      	subs	r2, #1
 8002914:	0652      	lsls	r2, r2, #25
 8002916:	430a      	orrs	r2, r1
 8002918:	4915      	ldr	r1, [pc, #84]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002928:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe fb47 	bl	8000fbc <HAL_GetTick>
 800292e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002930:	e009      	b.n	8002946 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002932:	f7fe fb43 	bl	8000fbc <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d902      	bls.n	8002946 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	73fb      	strb	r3, [r7, #15]
          break;
 8002944:	e005      	b.n	8002952 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0ef      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e049      	b.n	8002a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe f960 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fc82 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e049      	b.n	8002ac8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f841 	bl	8002ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 fc2b 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start+0x24>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e03c      	b.n	8002b82 <HAL_TIM_PWM_Start+0x9e>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d109      	bne.n	8002b22 <HAL_TIM_PWM_Start+0x3e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e02f      	b.n	8002b82 <HAL_TIM_PWM_Start+0x9e>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start+0x58>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e022      	b.n	8002b82 <HAL_TIM_PWM_Start+0x9e>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d109      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x72>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e015      	b.n	8002b82 <HAL_TIM_PWM_Start+0x9e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d109      	bne.n	8002b70 <HAL_TIM_PWM_Start+0x8c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e008      	b.n	8002b82 <HAL_TIM_PWM_Start+0x9e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07e      	b.n	8002c88 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xb6>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b98:	e023      	b.n	8002be2 <HAL_TIM_PWM_Start+0xfe>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0xc6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba8:	e01b      	b.n	8002be2 <HAL_TIM_PWM_Start+0xfe>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_PWM_Start+0xd6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb8:	e013      	b.n	8002be2 <HAL_TIM_PWM_Start+0xfe>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d104      	bne.n	8002bca <HAL_TIM_PWM_Start+0xe6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bc8:	e00b      	b.n	8002be2 <HAL_TIM_PWM_Start+0xfe>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_PWM_Start+0xf6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bd8:	e003      	b.n	8002be2 <HAL_TIM_PWM_Start+0xfe>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 feee 	bl	80039cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a26      	ldr	r2, [pc, #152]	@ (8002c90 <HAL_TIM_PWM_Start+0x1ac>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x12a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <HAL_TIM_PWM_Start+0x1b0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x12a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <HAL_TIM_PWM_Start+0x1b4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x12e>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_TIM_PWM_Start+0x130>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	@ (8002c90 <HAL_TIM_PWM_Start+0x1ac>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIM_PWM_Start+0x162>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIM_PWM_Start+0x162>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_TIM_PWM_Start+0x1b0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d115      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_TIM_PWM_Start+0x1b8>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d015      	beq.n	8002c84 <HAL_TIM_PWM_Start+0x1a0>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5e:	d011      	beq.n	8002c84 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	e008      	b.n	8002c84 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e000      	b.n	8002c86 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	00010007 	.word	0x00010007

08002ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d020      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01b      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0202 	mvn.w	r2, #2
 8002cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fac7 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fab9 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 faca 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d020      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0204 	mvn.w	r2, #4
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 faa1 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa93 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 faa4 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d020      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0208 	mvn.w	r2, #8
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa7b 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa6d 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa7e 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa55 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa47 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa58 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0201 	mvn.w	r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fbb0 	bl	800056c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fed7 	bl	8003be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fecf 	bl	8003bfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fa12 	bl	80032a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0220 	mvn.w	r2, #32
 8002e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fe97 	bl	8003bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0ff      	b.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b14      	cmp	r3, #20
 8002eda:	f200 80f0 	bhi.w	80030be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ede:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f39 	.word	0x08002f39
 8002ee8:	080030bf 	.word	0x080030bf
 8002eec:	080030bf 	.word	0x080030bf
 8002ef0:	080030bf 	.word	0x080030bf
 8002ef4:	08002f79 	.word	0x08002f79
 8002ef8:	080030bf 	.word	0x080030bf
 8002efc:	080030bf 	.word	0x080030bf
 8002f00:	080030bf 	.word	0x080030bf
 8002f04:	08002fbb 	.word	0x08002fbb
 8002f08:	080030bf 	.word	0x080030bf
 8002f0c:	080030bf 	.word	0x080030bf
 8002f10:	080030bf 	.word	0x080030bf
 8002f14:	08002ffb 	.word	0x08002ffb
 8002f18:	080030bf 	.word	0x080030bf
 8002f1c:	080030bf 	.word	0x080030bf
 8002f20:	080030bf 	.word	0x080030bf
 8002f24:	0800303d 	.word	0x0800303d
 8002f28:	080030bf 	.word	0x080030bf
 8002f2c:	080030bf 	.word	0x080030bf
 8002f30:	080030bf 	.word	0x080030bf
 8002f34:	0800307d 	.word	0x0800307d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fa2c 	bl	800339c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0208 	orr.w	r2, r2, #8
 8002f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6999      	ldr	r1, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	619a      	str	r2, [r3, #24]
      break;
 8002f76:	e0a5      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa88 	bl	8003494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6999      	ldr	r1, [r3, #24]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	619a      	str	r2, [r3, #24]
      break;
 8002fb8:	e084      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fae1 	bl	8003588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0208 	orr.w	r2, r2, #8
 8002fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0204 	bic.w	r2, r2, #4
 8002fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	61da      	str	r2, [r3, #28]
      break;
 8002ff8:	e064      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fb39 	bl	8003678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69d9      	ldr	r1, [r3, #28]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	61da      	str	r2, [r3, #28]
      break;
 800303a:	e043      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fb76 	bl	8003734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0208 	orr.w	r2, r2, #8
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0204 	bic.w	r2, r2, #4
 8003066:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800307a:	e023      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fbae 	bl	80037e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	021a      	lsls	r2, r3, #8
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030bc:	e002      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
      break;
 80030c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop

080030d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_ConfigClockSource+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0b6      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x18a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003112:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800311e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003130:	d03e      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0xd8>
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003136:	f200 8087 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x170>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	f000 8086 	beq.w	800324e <HAL_TIM_ConfigClockSource+0x176>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003146:	d87f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003148:	2b70      	cmp	r3, #112	@ 0x70
 800314a:	d01a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xaa>
 800314c:	2b70      	cmp	r3, #112	@ 0x70
 800314e:	d87b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003150:	2b60      	cmp	r3, #96	@ 0x60
 8003152:	d050      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x11e>
 8003154:	2b60      	cmp	r3, #96	@ 0x60
 8003156:	d877      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003158:	2b50      	cmp	r3, #80	@ 0x50
 800315a:	d03c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xfe>
 800315c:	2b50      	cmp	r3, #80	@ 0x50
 800315e:	d873      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	d058      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x13e>
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d86f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003168:	2b30      	cmp	r3, #48	@ 0x30
 800316a:	d064      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15e>
 800316c:	2b30      	cmp	r3, #48	@ 0x30
 800316e:	d86b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d060      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15e>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d867      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05c      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15e>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d05a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15e>
 8003180:	e062      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003192:	f000 fbfb 	bl	800398c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
      break;
 80031ae:	e04f      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c0:	f000 fbe4 	bl	800398c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031d2:	609a      	str	r2, [r3, #8]
      break;
 80031d4:	e03c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fb58 	bl	8003898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2150      	movs	r1, #80	@ 0x50
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fbb1 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e02c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fb77 	bl	80038f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2160      	movs	r1, #96	@ 0x60
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fba1 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8003214:	e01c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 fb38 	bl	8003898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2140      	movs	r1, #64	@ 0x40
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fb91 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8003234:	e00c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 fb88 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8003246:	e003      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e000      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800324e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a30      	ldr	r2, [pc, #192]	@ (8003390 <TIM_Base_SetConfig+0xd4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x20>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a27      	ldr	r2, [pc, #156]	@ (8003390 <TIM_Base_SetConfig+0xd4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a24      	ldr	r2, [pc, #144]	@ (8003394 <TIM_Base_SetConfig+0xd8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0x52>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a23      	ldr	r2, [pc, #140]	@ (8003398 <TIM_Base_SetConfig+0xdc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <TIM_Base_SetConfig+0xd4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0xa0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a11      	ldr	r2, [pc, #68]	@ (8003394 <TIM_Base_SetConfig+0xd8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0xa0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a10      	ldr	r2, [pc, #64]	@ (8003398 <TIM_Base_SetConfig+0xdc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f023 0201 	bic.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
  }
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400

0800339c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f023 0201 	bic.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a24      	ldr	r2, [pc, #144]	@ (8003488 <TIM_OC1_SetConfig+0xec>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_OC1_SetConfig+0x70>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a23      	ldr	r2, [pc, #140]	@ (800348c <TIM_OC1_SetConfig+0xf0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC1_SetConfig+0x70>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a22      	ldr	r2, [pc, #136]	@ (8003490 <TIM_OC1_SetConfig+0xf4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10c      	bne.n	8003426 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0308 	bic.w	r3, r3, #8
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a17      	ldr	r2, [pc, #92]	@ (8003488 <TIM_OC1_SetConfig+0xec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_OC1_SetConfig+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a16      	ldr	r2, [pc, #88]	@ (800348c <TIM_OC1_SetConfig+0xf0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC1_SetConfig+0xa2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	@ (8003490 <TIM_OC1_SetConfig+0xf4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400

08003494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 0210 	bic.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0320 	bic.w	r3, r3, #32
 80034e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a22      	ldr	r2, [pc, #136]	@ (800357c <TIM_OC2_SetConfig+0xe8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10d      	bne.n	8003514 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003512:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a19      	ldr	r2, [pc, #100]	@ (800357c <TIM_OC2_SetConfig+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_OC2_SetConfig+0x98>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a18      	ldr	r2, [pc, #96]	@ (8003580 <TIM_OC2_SetConfig+0xec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC2_SetConfig+0x98>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <TIM_OC2_SetConfig+0xf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d113      	bne.n	8003554 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800353a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400

08003588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a21      	ldr	r2, [pc, #132]	@ (800366c <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10d      	bne.n	8003606 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a18      	ldr	r2, [pc, #96]	@ (800366c <TIM_OC3_SetConfig+0xe4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_OC3_SetConfig+0x96>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a17      	ldr	r2, [pc, #92]	@ (8003670 <TIM_OC3_SetConfig+0xe8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_OC3_SetConfig+0x96>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <TIM_OC3_SetConfig+0xec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d113      	bne.n	8003646 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	621a      	str	r2, [r3, #32]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400

08003678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a14      	ldr	r2, [pc, #80]	@ (8003728 <TIM_OC4_SetConfig+0xb0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC4_SetConfig+0x74>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a13      	ldr	r2, [pc, #76]	@ (800372c <TIM_OC4_SetConfig+0xb4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC4_SetConfig+0x74>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a12      	ldr	r2, [pc, #72]	@ (8003730 <TIM_OC4_SetConfig+0xb8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400

08003734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a13      	ldr	r2, [pc, #76]	@ (80037d8 <TIM_OC5_SetConfig+0xa4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_OC5_SetConfig+0x6a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <TIM_OC5_SetConfig+0xa8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_OC5_SetConfig+0x6a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a11      	ldr	r2, [pc, #68]	@ (80037e0 <TIM_OC5_SetConfig+0xac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d109      	bne.n	80037b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400

080037e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800382a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	051b      	lsls	r3, r3, #20
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a14      	ldr	r2, [pc, #80]	@ (800388c <TIM_OC6_SetConfig+0xa8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <TIM_OC6_SetConfig+0x6c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <TIM_OC6_SetConfig+0xac>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_OC6_SetConfig+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a12      	ldr	r2, [pc, #72]	@ (8003894 <TIM_OC6_SetConfig+0xb0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400

08003898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 030a 	bic.w	r3, r3, #10
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b087      	sub	sp, #28
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	031b      	lsls	r3, r3, #12
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003932:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	f043 0307 	orr.w	r3, r3, #7
 8003978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	021a      	lsls	r2, r3, #8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e04f      	b.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	@ (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40014000 	.word	0x40014000

08003ae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e060      	b.n	8003bc2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a14      	ldr	r2, [pc, #80]	@ (8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d115      	bne.n	8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00

08003bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e040      	b.n	8003ca4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd f8a6 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	@ 0x24
 8003c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa82 	bl	8004160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f825 	bl	8003cac <UART_SetConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e01b      	b.n	8003ca4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fb01 	bl	80042a4 <UART_CheckIdleState>
 8003ca2:	4603      	mov	r3, r0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b08a      	sub	sp, #40	@ 0x28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b9e      	ldr	r3, [pc, #632]	@ (8003f54 <UART_SetConfig+0x2a8>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a93      	ldr	r2, [pc, #588]	@ (8003f58 <UART_SetConfig+0x2ac>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	4313      	orrs	r3, r2
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a8a      	ldr	r2, [pc, #552]	@ (8003f5c <UART_SetConfig+0x2b0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d126      	bne.n	8003d84 <UART_SetConfig+0xd8>
 8003d36:	4b8a      	ldr	r3, [pc, #552]	@ (8003f60 <UART_SetConfig+0x2b4>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d81b      	bhi.n	8003d7c <UART_SetConfig+0xd0>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <UART_SetConfig+0xa0>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d6d 	.word	0x08003d6d
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d75 	.word	0x08003d75
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e0ab      	b.n	8003ebc <UART_SetConfig+0x210>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6a:	e0a7      	b.n	8003ebc <UART_SetConfig+0x210>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e0a3      	b.n	8003ebc <UART_SetConfig+0x210>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e09f      	b.n	8003ebc <UART_SetConfig+0x210>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e09b      	b.n	8003ebc <UART_SetConfig+0x210>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a76      	ldr	r2, [pc, #472]	@ (8003f64 <UART_SetConfig+0x2b8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d138      	bne.n	8003e00 <UART_SetConfig+0x154>
 8003d8e:	4b74      	ldr	r3, [pc, #464]	@ (8003f60 <UART_SetConfig+0x2b4>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d82d      	bhi.n	8003df8 <UART_SetConfig+0x14c>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <UART_SetConfig+0xf8>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003df9 	.word	0x08003df9
 8003db0:	08003df9 	.word	0x08003df9
 8003db4:	08003de9 	.word	0x08003de9
 8003db8:	08003df9 	.word	0x08003df9
 8003dbc:	08003df9 	.word	0x08003df9
 8003dc0:	08003df9 	.word	0x08003df9
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	08003df9 	.word	0x08003df9
 8003dcc:	08003df9 	.word	0x08003df9
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003df1 	.word	0x08003df1
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dde:	e06d      	b.n	8003ebc <UART_SetConfig+0x210>
 8003de0:	2302      	movs	r3, #2
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de6:	e069      	b.n	8003ebc <UART_SetConfig+0x210>
 8003de8:	2304      	movs	r3, #4
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dee:	e065      	b.n	8003ebc <UART_SetConfig+0x210>
 8003df0:	2308      	movs	r3, #8
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e061      	b.n	8003ebc <UART_SetConfig+0x210>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e05d      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a58      	ldr	r2, [pc, #352]	@ (8003f68 <UART_SetConfig+0x2bc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d125      	bne.n	8003e56 <UART_SetConfig+0x1aa>
 8003e0a:	4b55      	ldr	r3, [pc, #340]	@ (8003f60 <UART_SetConfig+0x2b4>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e14:	2b30      	cmp	r3, #48	@ 0x30
 8003e16:	d016      	beq.n	8003e46 <UART_SetConfig+0x19a>
 8003e18:	2b30      	cmp	r3, #48	@ 0x30
 8003e1a:	d818      	bhi.n	8003e4e <UART_SetConfig+0x1a2>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d00a      	beq.n	8003e36 <UART_SetConfig+0x18a>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d814      	bhi.n	8003e4e <UART_SetConfig+0x1a2>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <UART_SetConfig+0x182>
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d008      	beq.n	8003e3e <UART_SetConfig+0x192>
 8003e2c:	e00f      	b.n	8003e4e <UART_SetConfig+0x1a2>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e34:	e042      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e36:	2302      	movs	r3, #2
 8003e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3c:	e03e      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e44:	e03a      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e46:	2308      	movs	r3, #8
 8003e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4c:	e036      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e4e:	2310      	movs	r3, #16
 8003e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e54:	e032      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f58 <UART_SetConfig+0x2ac>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d12a      	bne.n	8003eb6 <UART_SetConfig+0x20a>
 8003e60:	4b3f      	ldr	r3, [pc, #252]	@ (8003f60 <UART_SetConfig+0x2b4>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e6e:	d01a      	beq.n	8003ea6 <UART_SetConfig+0x1fa>
 8003e70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e74:	d81b      	bhi.n	8003eae <UART_SetConfig+0x202>
 8003e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e7a:	d00c      	beq.n	8003e96 <UART_SetConfig+0x1ea>
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e80:	d815      	bhi.n	8003eae <UART_SetConfig+0x202>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <UART_SetConfig+0x1e2>
 8003e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e8a:	d008      	beq.n	8003e9e <UART_SetConfig+0x1f2>
 8003e8c:	e00f      	b.n	8003eae <UART_SetConfig+0x202>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e94:	e012      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e96:	2302      	movs	r3, #2
 8003e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9c:	e00e      	b.n	8003ebc <UART_SetConfig+0x210>
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea4:	e00a      	b.n	8003ebc <UART_SetConfig+0x210>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eac:	e006      	b.n	8003ebc <UART_SetConfig+0x210>
 8003eae:	2310      	movs	r3, #16
 8003eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb4:	e002      	b.n	8003ebc <UART_SetConfig+0x210>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a25      	ldr	r2, [pc, #148]	@ (8003f58 <UART_SetConfig+0x2ac>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	f040 808a 	bne.w	8003fdc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d824      	bhi.n	8003f1a <UART_SetConfig+0x26e>
 8003ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <UART_SetConfig+0x22c>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f1b 	.word	0x08003f1b
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f0b 	.word	0x08003f0b
 8003eec:	08003f1b 	.word	0x08003f1b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f1b 	.word	0x08003f1b
 8003ef8:	08003f13 	.word	0x08003f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe f972 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003f00:	61f8      	str	r0, [r7, #28]
        break;
 8003f02:	e010      	b.n	8003f26 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <UART_SetConfig+0x2c0>)
 8003f06:	61fb      	str	r3, [r7, #28]
        break;
 8003f08:	e00d      	b.n	8003f26 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe f8d3 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003f0e:	61f8      	str	r0, [r7, #28]
        break;
 8003f10:	e009      	b.n	8003f26 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f16:	61fb      	str	r3, [r7, #28]
        break;
 8003f18:	e005      	b.n	8003f26 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8109 	beq.w	8004140 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d305      	bcc.n	8003f4a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d912      	bls.n	8003f70 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f50:	e0f6      	b.n	8004140 <UART_SetConfig+0x494>
 8003f52:	bf00      	nop
 8003f54:	efff69f3 	.word	0xefff69f3
 8003f58:	40008000 	.word	0x40008000
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40004400 	.word	0x40004400
 8003f68:	40004800 	.word	0x40004800
 8003f6c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2200      	movs	r2, #0
 8003f74:	461c      	mov	r4, r3
 8003f76:	4615      	mov	r5, r2
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	022b      	lsls	r3, r5, #8
 8003f82:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f86:	0222      	lsls	r2, r4, #8
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	6849      	ldr	r1, [r1, #4]
 8003f8c:	0849      	lsrs	r1, r1, #1
 8003f8e:	2000      	movs	r0, #0
 8003f90:	4688      	mov	r8, r1
 8003f92:	4681      	mov	r9, r0
 8003f94:	eb12 0a08 	adds.w	sl, r2, r8
 8003f98:	eb43 0b09 	adc.w	fp, r3, r9
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003faa:	4650      	mov	r0, sl
 8003fac:	4659      	mov	r1, fp
 8003fae:	f7fc f90d 	bl	80001cc <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc0:	d308      	bcc.n	8003fd4 <UART_SetConfig+0x328>
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc8:	d204      	bcs.n	8003fd4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	e0b5      	b.n	8004140 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fda:	e0b1      	b.n	8004140 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe4:	d15d      	bne.n	80040a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d827      	bhi.n	800403e <UART_SetConfig+0x392>
 8003fee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <UART_SetConfig+0x348>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800403f 	.word	0x0800403f
 800400c:	0800403f 	.word	0x0800403f
 8004010:	0800403f 	.word	0x0800403f
 8004014:	08004037 	.word	0x08004037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe f8e4 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 800401c:	61f8      	str	r0, [r7, #28]
        break;
 800401e:	e014      	b.n	800404a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe f8f6 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8004024:	61f8      	str	r0, [r7, #28]
        break;
 8004026:	e010      	b.n	800404a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004028:	4b4c      	ldr	r3, [pc, #304]	@ (800415c <UART_SetConfig+0x4b0>)
 800402a:	61fb      	str	r3, [r7, #28]
        break;
 800402c:	e00d      	b.n	800404a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402e:	f7fe f841 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8004032:	61f8      	str	r0, [r7, #28]
        break;
 8004034:	e009      	b.n	800404a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	61fb      	str	r3, [r7, #28]
        break;
 800403c:	e005      	b.n	800404a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d077      	beq.n	8004140 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005a      	lsls	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	441a      	add	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d916      	bls.n	800409a <UART_SetConfig+0x3ee>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004072:	d212      	bcs.n	800409a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f023 030f 	bic.w	r3, r3, #15
 800407c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	b29b      	uxth	r3, r3
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	b29a      	uxth	r2, r3
 800408a:	8afb      	ldrh	r3, [r7, #22]
 800408c:	4313      	orrs	r3, r2
 800408e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	8afa      	ldrh	r2, [r7, #22]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e052      	b.n	8004140 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040a0:	e04e      	b.n	8004140 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d827      	bhi.n	80040fa <UART_SetConfig+0x44e>
 80040aa:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <UART_SetConfig+0x404>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	080040fb 	.word	0x080040fb
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	080040fb 	.word	0x080040fb
 80040c8:	080040fb 	.word	0x080040fb
 80040cc:	080040fb 	.word	0x080040fb
 80040d0:	080040f3 	.word	0x080040f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe f886 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 80040d8:	61f8      	str	r0, [r7, #28]
        break;
 80040da:	e014      	b.n	8004106 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7fe f898 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 80040e0:	61f8      	str	r0, [r7, #28]
        break;
 80040e2:	e010      	b.n	8004106 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <UART_SetConfig+0x4b0>)
 80040e6:	61fb      	str	r3, [r7, #28]
        break;
 80040e8:	e00d      	b.n	8004106 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fd ffe3 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80040ee:	61f8      	str	r0, [r7, #28]
        break;
 80040f0:	e009      	b.n	8004106 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f6:	61fb      	str	r3, [r7, #28]
        break;
 80040f8:	e005      	b.n	8004106 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004104:	bf00      	nop
    }

    if (pclk != 0U)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d019      	beq.n	8004140 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	085a      	lsrs	r2, r3, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	d909      	bls.n	800413a <UART_SetConfig+0x48e>
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412c:	d205      	bcs.n	800413a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e002      	b.n	8004140 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800414c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004150:	4618      	mov	r0, r3
 8004152:	3728      	adds	r7, #40	@ 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415a:	bf00      	nop
 800415c:	00f42400 	.word	0x00f42400

08004160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01a      	beq.n	8004276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800425e:	d10a      	bne.n	8004276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b098      	sub	sp, #96	@ 0x60
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b4:	f7fc fe82 	bl	8000fbc <HAL_GetTick>
 80042b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d12e      	bne.n	8004326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f88c 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d021      	beq.n	8004326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
 8004302:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800430e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e062      	b.n	80043ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d149      	bne.n	80043c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f856 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03c      	beq.n	80043c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	623b      	str	r3, [r7, #32]
   return(result);
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30
 800436e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a0:	61fa      	str	r2, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	617b      	str	r3, [r7, #20]
   return(result);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e011      	b.n	80043ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3758      	adds	r7, #88	@ 0x58
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004404:	e04f      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d04b      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fc fdd5 	bl	8000fbc <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <UART_WaitOnFlagUntilTimeout+0x30>
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e04e      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d037      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b80      	cmp	r3, #128	@ 0x80
 800443a:	d034      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b40      	cmp	r3, #64	@ 0x40
 8004440:	d031      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b08      	cmp	r3, #8
 800444e:	d110      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2208      	movs	r2, #8
 8004456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f838 	bl	80044ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2208      	movs	r2, #8
 8004462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e029      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800447c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004480:	d111      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800448a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f81e 	bl	80044ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e00f      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d0a0      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b095      	sub	sp, #84	@ 0x54
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	61fb      	str	r3, [r7, #28]
   return(result);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800452e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	2b01      	cmp	r3, #1
 8004542:	d118      	bne.n	8004576 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	60bb      	str	r3, [r7, #8]
   return(result);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	647b      	str	r3, [r7, #68]	@ 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	613b      	str	r3, [r7, #16]
   return(result);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e6      	bne.n	8004544 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800458a:	bf00      	nop
 800458c:	3754      	adds	r7, #84	@ 0x54
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800459c:	f7fc fc8c 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045a0:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80045a2:	490d      	ldr	r1, [pc, #52]	@ (80045d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045a4:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <LoopForever+0xe>)
  movs r3, #0
 80045a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a8:	e002      	b.n	80045b0 <LoopCopyDataInit>

080045aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ae:	3304      	adds	r3, #4

080045b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b4:	d3f9      	bcc.n	80045aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045b6:	4a0a      	ldr	r2, [pc, #40]	@ (80045e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045b8:	4c0a      	ldr	r4, [pc, #40]	@ (80045e4 <LoopForever+0x16>)
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045bc:	e001      	b.n	80045c2 <LoopFillZerobss>

080045be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045c0:	3204      	adds	r2, #4

080045c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c4:	d3fb      	bcc.n	80045be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045c6:	f000 f819 	bl	80045fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045ca:	f7fc f81f 	bl	800060c <main>

080045ce <LoopForever>:

LoopForever:
    b LoopForever
 80045ce:	e7fe      	b.n	80045ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80045d0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80045d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80045dc:	080046b4 	.word	0x080046b4
  ldr r2, =_sbss
 80045e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80045e4:	2000015c 	.word	0x2000015c

080045e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045e8:	e7fe      	b.n	80045e8 <ADC1_IRQHandler>

080045ea <memset>:
 80045ea:	4402      	add	r2, r0
 80045ec:	4603      	mov	r3, r0
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d100      	bne.n	80045f4 <memset+0xa>
 80045f2:	4770      	bx	lr
 80045f4:	f803 1b01 	strb.w	r1, [r3], #1
 80045f8:	e7f9      	b.n	80045ee <memset+0x4>
	...

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004634 <__libc_init_array+0x38>)
 8004600:	4c0d      	ldr	r4, [pc, #52]	@ (8004638 <__libc_init_array+0x3c>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	2600      	movs	r6, #0
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	4d0b      	ldr	r5, [pc, #44]	@ (800463c <__libc_init_array+0x40>)
 800460e:	4c0c      	ldr	r4, [pc, #48]	@ (8004640 <__libc_init_array+0x44>)
 8004610:	f000 f818 	bl	8004644 <_init>
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	2600      	movs	r6, #0
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	f855 3b04 	ldr.w	r3, [r5], #4
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	f855 3b04 	ldr.w	r3, [r5], #4
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	080046ac 	.word	0x080046ac
 8004638:	080046ac 	.word	0x080046ac
 800463c:	080046ac 	.word	0x080046ac
 8004640:	080046b0 	.word	0x080046b0

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
