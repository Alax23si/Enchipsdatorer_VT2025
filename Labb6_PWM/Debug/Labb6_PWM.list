
Labb6_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005490  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08005620  08005620  00006620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a38  08005a38  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a40  08005a40  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005a48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  08005a58  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08005a58  0000710c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f50b  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e06  00000000  00000000  0001654b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00018358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b23  00000000  00000000  00019188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002236c  00000000  00000000  00019cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc18  00000000  00000000  0003c017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5106  00000000  00000000  0004bc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120d35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  00120d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00124c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005608 	.word	0x08005608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005608 	.word	0x08005608

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295
 800084c:	f04f 30ff 	movne.w	r0, #4294967295
 8000850:	f000 b988 	b.w	8000b64 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9d08      	ldr	r5, [sp, #32]
 8000872:	468e      	mov	lr, r1
 8000874:	4604      	mov	r4, r0
 8000876:	4688      	mov	r8, r1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d14a      	bne.n	8000912 <__udivmoddi4+0xa6>
 800087c:	428a      	cmp	r2, r1
 800087e:	4617      	mov	r7, r2
 8000880:	d962      	bls.n	8000948 <__udivmoddi4+0xdc>
 8000882:	fab2 f682 	clz	r6, r2
 8000886:	b14e      	cbz	r6, 800089c <__udivmoddi4+0x30>
 8000888:	f1c6 0320 	rsb	r3, r6, #32
 800088c:	fa01 f806 	lsl.w	r8, r1, r6
 8000890:	fa20 f303 	lsr.w	r3, r0, r3
 8000894:	40b7      	lsls	r7, r6
 8000896:	ea43 0808 	orr.w	r8, r3, r8
 800089a:	40b4      	lsls	r4, r6
 800089c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a8:	0c23      	lsrs	r3, r4, #16
 80008aa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008b2:	fb01 f20c 	mul.w	r2, r1, ip
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d909      	bls.n	80008ce <__udivmoddi4+0x62>
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	f101 30ff 	add.w	r0, r1, #4294967295
 80008c0:	f080 80ea 	bcs.w	8000a98 <__udivmoddi4+0x22c>
 80008c4:	429a      	cmp	r2, r3
 80008c6:	f240 80e7 	bls.w	8000a98 <__udivmoddi4+0x22c>
 80008ca:	3902      	subs	r1, #2
 80008cc:	443b      	add	r3, r7
 80008ce:	1a9a      	subs	r2, r3, r2
 80008d0:	b2a3      	uxth	r3, r4
 80008d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb00 fc0c 	mul.w	ip, r0, ip
 80008e2:	459c      	cmp	ip, r3
 80008e4:	d909      	bls.n	80008fa <__udivmoddi4+0x8e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ec:	f080 80d6 	bcs.w	8000a9c <__udivmoddi4+0x230>
 80008f0:	459c      	cmp	ip, r3
 80008f2:	f240 80d3 	bls.w	8000a9c <__udivmoddi4+0x230>
 80008f6:	443b      	add	r3, r7
 80008f8:	3802      	subs	r0, #2
 80008fa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008fe:	eba3 030c 	sub.w	r3, r3, ip
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa2>
 8000906:	40f3      	lsrs	r3, r6
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xb6>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb0>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa2>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x14c>
 800092a:	4573      	cmp	r3, lr
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xc8>
 800092e:	4282      	cmp	r2, r0
 8000930:	f200 8105 	bhi.w	8000b3e <__udivmoddi4+0x2d2>
 8000934:	1a84      	subs	r4, r0, r2
 8000936:	eb6e 0203 	sbc.w	r2, lr, r3
 800093a:	2001      	movs	r0, #1
 800093c:	4690      	mov	r8, r2
 800093e:	2d00      	cmp	r5, #0
 8000940:	d0e5      	beq.n	800090e <__udivmoddi4+0xa2>
 8000942:	e9c5 4800 	strd	r4, r8, [r5]
 8000946:	e7e2      	b.n	800090e <__udivmoddi4+0xa2>
 8000948:	2a00      	cmp	r2, #0
 800094a:	f000 8090 	beq.w	8000a6e <__udivmoddi4+0x202>
 800094e:	fab2 f682 	clz	r6, r2
 8000952:	2e00      	cmp	r6, #0
 8000954:	f040 80a4 	bne.w	8000aa0 <__udivmoddi4+0x234>
 8000958:	1a8a      	subs	r2, r1, r2
 800095a:	0c03      	lsrs	r3, r0, #16
 800095c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000960:	b280      	uxth	r0, r0
 8000962:	b2bc      	uxth	r4, r7
 8000964:	2101      	movs	r1, #1
 8000966:	fbb2 fcfe 	udiv	ip, r2, lr
 800096a:	fb0e 221c 	mls	r2, lr, ip, r2
 800096e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000972:	fb04 f20c 	mul.w	r2, r4, ip
 8000976:	429a      	cmp	r2, r3
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x11e>
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000980:	d202      	bcs.n	8000988 <__udivmoddi4+0x11c>
 8000982:	429a      	cmp	r2, r3
 8000984:	f200 80e0 	bhi.w	8000b48 <__udivmoddi4+0x2dc>
 8000988:	46c4      	mov	ip, r8
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000990:	fb0e 3312 	mls	r3, lr, r2, r3
 8000994:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000998:	fb02 f404 	mul.w	r4, r2, r4
 800099c:	429c      	cmp	r4, r3
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x144>
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x142>
 80009a8:	429c      	cmp	r4, r3
 80009aa:	f200 80ca 	bhi.w	8000b42 <__udivmoddi4+0x2d6>
 80009ae:	4602      	mov	r2, r0
 80009b0:	1b1b      	subs	r3, r3, r4
 80009b2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x98>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa0e f401 	lsl.w	r4, lr, r1
 80009c8:	fa20 f306 	lsr.w	r3, r0, r6
 80009cc:	fa2e fe06 	lsr.w	lr, lr, r6
 80009d0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009d4:	4323      	orrs	r3, r4
 80009d6:	fa00 f801 	lsl.w	r8, r0, r1
 80009da:	fa1f fc87 	uxth.w	ip, r7
 80009de:	fbbe f0f9 	udiv	r0, lr, r9
 80009e2:	0c1c      	lsrs	r4, r3, #16
 80009e4:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009ec:	fb00 fe0c 	mul.w	lr, r0, ip
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d909      	bls.n	8000a0c <__udivmoddi4+0x1a0>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 3aff 	add.w	sl, r0, #4294967295
 80009fe:	f080 809c 	bcs.w	8000b3a <__udivmoddi4+0x2ce>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f240 8099 	bls.w	8000b3a <__udivmoddi4+0x2ce>
 8000a08:	3802      	subs	r0, #2
 8000a0a:	443c      	add	r4, r7
 8000a0c:	eba4 040e 	sub.w	r4, r4, lr
 8000a10:	fa1f fe83 	uxth.w	lr, r3
 8000a14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a18:	fb09 4413 	mls	r4, r9, r3, r4
 8000a1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a24:	45a4      	cmp	ip, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x1ce>
 8000a28:	193c      	adds	r4, r7, r4
 8000a2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a2e:	f080 8082 	bcs.w	8000b36 <__udivmoddi4+0x2ca>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d97f      	bls.n	8000b36 <__udivmoddi4+0x2ca>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a3e:	eba4 040c 	sub.w	r4, r4, ip
 8000a42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a46:	4564      	cmp	r4, ip
 8000a48:	4673      	mov	r3, lr
 8000a4a:	46e1      	mov	r9, ip
 8000a4c:	d362      	bcc.n	8000b14 <__udivmoddi4+0x2a8>
 8000a4e:	d05f      	beq.n	8000b10 <__udivmoddi4+0x2a4>
 8000a50:	b15d      	cbz	r5, 8000a6a <__udivmoddi4+0x1fe>
 8000a52:	ebb8 0203 	subs.w	r2, r8, r3
 8000a56:	eb64 0409 	sbc.w	r4, r4, r9
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a62:	431e      	orrs	r6, r3
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	e9c5 6400 	strd	r6, r4, [r5]
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	e74f      	b.n	800090e <__udivmoddi4+0xa2>
 8000a6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a72:	0c01      	lsrs	r1, r0, #16
 8000a74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a78:	b280      	uxth	r0, r0
 8000a7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4638      	mov	r0, r7
 8000a82:	463c      	mov	r4, r7
 8000a84:	46b8      	mov	r8, r7
 8000a86:	46be      	mov	lr, r7
 8000a88:	2620      	movs	r6, #32
 8000a8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a8e:	eba2 0208 	sub.w	r2, r2, r8
 8000a92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a96:	e766      	b.n	8000966 <__udivmoddi4+0xfa>
 8000a98:	4601      	mov	r1, r0
 8000a9a:	e718      	b.n	80008ce <__udivmoddi4+0x62>
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	e72c      	b.n	80008fa <__udivmoddi4+0x8e>
 8000aa0:	f1c6 0220 	rsb	r2, r6, #32
 8000aa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa8:	40b7      	lsls	r7, r6
 8000aaa:	40b1      	lsls	r1, r6
 8000aac:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000aba:	b2bc      	uxth	r4, r7
 8000abc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ac0:	0c11      	lsrs	r1, r2, #16
 8000ac2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac6:	fb08 f904 	mul.w	r9, r8, r4
 8000aca:	40b0      	lsls	r0, r6
 8000acc:	4589      	cmp	r9, r1
 8000ace:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ad2:	b280      	uxth	r0, r0
 8000ad4:	d93e      	bls.n	8000b54 <__udivmoddi4+0x2e8>
 8000ad6:	1879      	adds	r1, r7, r1
 8000ad8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000adc:	d201      	bcs.n	8000ae2 <__udivmoddi4+0x276>
 8000ade:	4589      	cmp	r9, r1
 8000ae0:	d81f      	bhi.n	8000b22 <__udivmoddi4+0x2b6>
 8000ae2:	eba1 0109 	sub.w	r1, r1, r9
 8000ae6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aea:	fb09 f804 	mul.w	r8, r9, r4
 8000aee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af2:	b292      	uxth	r2, r2
 8000af4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af8:	4542      	cmp	r2, r8
 8000afa:	d229      	bcs.n	8000b50 <__udivmoddi4+0x2e4>
 8000afc:	18ba      	adds	r2, r7, r2
 8000afe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b02:	d2c4      	bcs.n	8000a8e <__udivmoddi4+0x222>
 8000b04:	4542      	cmp	r2, r8
 8000b06:	d2c2      	bcs.n	8000a8e <__udivmoddi4+0x222>
 8000b08:	f1a9 0102 	sub.w	r1, r9, #2
 8000b0c:	443a      	add	r2, r7
 8000b0e:	e7be      	b.n	8000a8e <__udivmoddi4+0x222>
 8000b10:	45f0      	cmp	r8, lr
 8000b12:	d29d      	bcs.n	8000a50 <__udivmoddi4+0x1e4>
 8000b14:	ebbe 0302 	subs.w	r3, lr, r2
 8000b18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	46e1      	mov	r9, ip
 8000b20:	e796      	b.n	8000a50 <__udivmoddi4+0x1e4>
 8000b22:	eba7 0909 	sub.w	r9, r7, r9
 8000b26:	4449      	add	r1, r9
 8000b28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b30:	fb09 f804 	mul.w	r8, r9, r4
 8000b34:	e7db      	b.n	8000aee <__udivmoddi4+0x282>
 8000b36:	4673      	mov	r3, lr
 8000b38:	e77f      	b.n	8000a3a <__udivmoddi4+0x1ce>
 8000b3a:	4650      	mov	r0, sl
 8000b3c:	e766      	b.n	8000a0c <__udivmoddi4+0x1a0>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e6fd      	b.n	800093e <__udivmoddi4+0xd2>
 8000b42:	443b      	add	r3, r7
 8000b44:	3a02      	subs	r2, #2
 8000b46:	e733      	b.n	80009b0 <__udivmoddi4+0x144>
 8000b48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b4c:	443b      	add	r3, r7
 8000b4e:	e71c      	b.n	800098a <__udivmoddi4+0x11e>
 8000b50:	4649      	mov	r1, r9
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x222>
 8000b54:	eba1 0109 	sub.w	r1, r1, r9
 8000b58:	46c4      	mov	ip, r8
 8000b5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5e:	fb09 f804 	mul.w	r8, r9, r4
 8000b62:	e7c4      	b.n	8000aee <__udivmoddi4+0x282>

08000b64 <__aeabi_idiv0>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint32_t isr_count = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d104      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		isr_count++;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b82:	6013      	str	r3, [r2, #0]
	}
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40012c00 	.word	0x40012c00
 8000b94:	20000104 	.word	0x20000104

08000b98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b9e:	f000 fc77 	bl	8001490 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ba2:	f000 f94d 	bl	8000e40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ba6:	f000 fa91 	bl	80010cc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000baa:	f000 fa5f 	bl	800106c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000bae:	f000 f999 	bl	8000ee4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000bb2:	4897      	ldr	r0, [pc, #604]	@ (8000e10 <main+0x278>)
 8000bb4:	f002 f9bc 	bl	8002f30 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4895      	ldr	r0, [pc, #596]	@ (8000e10 <main+0x278>)
 8000bbc:	f002 fa6e 	bl	800309c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4893      	ldr	r0, [pc, #588]	@ (8000e10 <main+0x278>)
 8000bc4:	f002 fa6a 	bl	800309c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4891      	ldr	r0, [pc, #580]	@ (8000e10 <main+0x278>)
 8000bcc:	f002 fa66 	bl	800309c <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		float rf = sinf((2.0f * M_PI * t * freq) + (0 * offset));
 8000bd0:	4b90      	ldr	r3, [pc, #576]	@ (8000e14 <main+0x27c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fd89 	bl	80006ec <__aeabi_f2d>
 8000bda:	a38b      	add	r3, pc, #556	@ (adr r3, 8000e08 <main+0x270>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff faf6 	bl	80001d0 <__aeabi_dmul>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4614      	mov	r4, r2
 8000bea:	461d      	mov	r5, r3
 8000bec:	4b8a      	ldr	r3, [pc, #552]	@ (8000e18 <main+0x280>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd7b 	bl	80006ec <__aeabi_f2d>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	f7ff fae7 	bl	80001d0 <__aeabi_dmul>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4614      	mov	r4, r2
 8000c08:	461d      	mov	r5, r3
 8000c0a:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8000e1c <main+0x284>
 8000c0e:	eddf 7a84 	vldr	s15, [pc, #528]	@ 8000e20 <main+0x288>
 8000c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c16:	ee17 0a90 	vmov	r0, s15
 8000c1a:	f7ff fd67 	bl	80006ec <__aeabi_f2d>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	4620      	mov	r0, r4
 8000c24:	4629      	mov	r1, r5
 8000c26:	f7ff fc03 	bl	8000430 <__adddf3>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff fdb3 	bl	800079c <__aeabi_d2f>
 8000c36:	4603      	mov	r3, r0
 8000c38:	ee00 3a10 	vmov	s0, r3
 8000c3c:	f003 ffb4 	bl	8004ba8 <sinf>
 8000c40:	ed87 0a03 	vstr	s0, [r7, #12]
		float gf = sinf((2.0f * M_PI * t * freq) + (1 * offset));
 8000c44:	4b73      	ldr	r3, [pc, #460]	@ (8000e14 <main+0x27c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fd4f 	bl	80006ec <__aeabi_f2d>
 8000c4e:	a36e      	add	r3, pc, #440	@ (adr r3, 8000e08 <main+0x270>)
 8000c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c54:	f7ff fabc 	bl	80001d0 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4614      	mov	r4, r2
 8000c5e:	461d      	mov	r5, r3
 8000c60:	4b6d      	ldr	r3, [pc, #436]	@ (8000e18 <main+0x280>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fd41 	bl	80006ec <__aeabi_f2d>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	4620      	mov	r0, r4
 8000c70:	4629      	mov	r1, r5
 8000c72:	f7ff faad 	bl	80001d0 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	461d      	mov	r5, r3
 8000c7e:	4b69      	ldr	r3, [pc, #420]	@ (8000e24 <main+0x28c>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd33 	bl	80006ec <__aeabi_f2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	f7ff fbcf 	bl	8000430 <__adddf3>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fd7f 	bl	800079c <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	ee00 3a10 	vmov	s0, r3
 8000ca4:	f003 ff80 	bl	8004ba8 <sinf>
 8000ca8:	ed87 0a02 	vstr	s0, [r7, #8]
		float bf = sinf((2.0f * M_PI * t * freq) + (2 * offset));
 8000cac:	4b59      	ldr	r3, [pc, #356]	@ (8000e14 <main+0x27c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd1b 	bl	80006ec <__aeabi_f2d>
 8000cb6:	a354      	add	r3, pc, #336	@ (adr r3, 8000e08 <main+0x270>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fa88 	bl	80001d0 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	4b53      	ldr	r3, [pc, #332]	@ (8000e18 <main+0x280>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fd0d 	bl	80006ec <__aeabi_f2d>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	4629      	mov	r1, r5
 8000cda:	f7ff fa79 	bl	80001d0 <__aeabi_dmul>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	461d      	mov	r5, r3
 8000ce6:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8000e1c <main+0x284>
 8000cea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cee:	ee17 0a90 	vmov	r0, s15
 8000cf2:	f7ff fcfb 	bl	80006ec <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	4629      	mov	r1, r5
 8000cfe:	f7ff fb97 	bl	8000430 <__adddf3>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fd47 	bl	800079c <__aeabi_d2f>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	ee00 3a10 	vmov	s0, r3
 8000d14:	f003 ff48 	bl	8004ba8 <sinf>
 8000d18:	ed87 0a01 	vstr	s0, [r7, #4]

		rf = (rf + 1.0f) * half_arr * R_GAIN;
 8000d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d28:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000e28 <main+0x290>
 8000d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d30:	edc7 7a03 	vstr	s15, [r7, #12]
		gf = (gf + 1.0f) * half_arr * G_GAIN;
 8000d34:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d40:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000e28 <main+0x290>
 8000d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d48:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000e2c <main+0x294>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d50:	edc7 7a02 	vstr	s15, [r7, #8]
		bf = (bf + 1.0f) * half_arr * B_GAIN;
 8000d54:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d60:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000e28 <main+0x290>
 8000d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d6c:	edc7 7a01 	vstr	s15, [r7, #4]

		if (rf > 999) rf = 999;
 8000d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d74:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000e30 <main+0x298>
 8000d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d80:	dd01      	ble.n	8000d86 <main+0x1ee>
 8000d82:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <main+0x29c>)
 8000d84:	60fb      	str	r3, [r7, #12]
		if (gf > 999) gf = 999;
 8000d86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d8a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000e30 <main+0x298>
 8000d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	dd01      	ble.n	8000d9c <main+0x204>
 8000d98:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <main+0x29c>)
 8000d9a:	60bb      	str	r3, [r7, #8]
		if (bf > 999) bf = 999;
 8000d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000e30 <main+0x298>
 8000da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	dd01      	ble.n	8000db2 <main+0x21a>
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <main+0x29c>)
 8000db0:	607b      	str	r3, [r7, #4]

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)rf);
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <main+0x278>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbe:	ee17 2a90 	vmov	r2, s15
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)gf);
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <main+0x278>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd0:	ee17 2a90 	vmov	r2, s15
 8000dd4:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint32_t)bf);
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <main+0x278>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de2:	ee17 2a90 	vmov	r2, s15
 8000de6:	63da      	str	r2, [r3, #60]	@ 0x3c
		//t += 0.001f;
		t = isr_count * 0.001f;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <main+0x2a0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000e3c <main+0x2a4>
 8000df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <main+0x27c>)
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
	{
 8000e02:	e6e5      	b.n	8000bd0 <main+0x38>
 8000e04:	f3af 8000 	nop.w
 8000e08:	54442d18 	.word	0x54442d18
 8000e0c:	401921fb 	.word	0x401921fb
 8000e10:	2000002c 	.word	0x2000002c
 8000e14:	20000100 	.word	0x20000100
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	40060a92 	.word	0x40060a92
 8000e20:	00000000 	.word	0x00000000
 8000e24:	40060a92 	.word	0x40060a92
 8000e28:	43fa0000 	.word	0x43fa0000
 8000e2c:	3fa66666 	.word	0x3fa66666
 8000e30:	4479c000 	.word	0x4479c000
 8000e34:	4479c000 	.word	0x4479c000
 8000e38:	20000104 	.word	0x20000104
 8000e3c:	3a83126f 	.word	0x3a83126f

08000e40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	@ 0x58
 8000e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2244      	movs	r2, #68	@ 0x44
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fe7d 	bl	8004b4e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e66:	f000 fe41 	bl	8001aec <HAL_PWREx_ControlVoltageScaling>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000e70:	f000 f9b6 	bl	80011e0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e92:	2307      	movs	r3, #7
 8000e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fe78 	bl	8001b98 <HAL_RCC_OscConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000eae:	f000 f997 	bl	80011e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 fa78 	bl	80023c0 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000ed6:	f000 f983 	bl	80011e0 <Error_Handler>
	}
}
 8000eda:	bf00      	nop
 8000edc:	3758      	adds	r7, #88	@ 0x58
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09a      	sub	sp, #104	@ 0x68
 8000ee8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	222c      	movs	r2, #44	@ 0x2c
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 fe15 	bl	8004b4e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f24:	4b4f      	ldr	r3, [pc, #316]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f26:	4a50      	ldr	r2, [pc, #320]	@ (8001068 <MX_TIM1_Init+0x184>)
 8000f28:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 7;
 8000f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b4c      	ldr	r3, [pc, #304]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8000f36:	4b4b      	ldr	r3, [pc, #300]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f3c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b49      	ldr	r3, [pc, #292]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000f44:	4b47      	ldr	r3, [pc, #284]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b46      	ldr	r3, [pc, #280]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f50:	4844      	ldr	r0, [pc, #272]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f52:	f001 ff95 	bl	8002e80 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000f5c:	f000 f940 	bl	80011e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	483d      	ldr	r0, [pc, #244]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f6e:	f002 fb8f 	bl	8003690 <HAL_TIM_ConfigClockSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000f78:	f000 f932 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f7c:	4839      	ldr	r0, [pc, #228]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000f7e:	f002 f82b 	bl	8002fd8 <HAL_TIM_PWM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000f88:	f000 f92a 	bl	80011e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4831      	ldr	r0, [pc, #196]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000fa0:	f003 f816 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8000faa:	f000 f919 	bl	80011e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fae:	2360      	movs	r3, #96	@ 0x60
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4824      	ldr	r0, [pc, #144]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000fd4:	f002 fa48 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8000fde:	f000 f8ff 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481e      	ldr	r0, [pc, #120]	@ (8001064 <MX_TIM1_Init+0x180>)
 8000fec:	f002 fa3c 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 8000ff6:	f000 f8f3 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ffe:	2208      	movs	r2, #8
 8001000:	4619      	mov	r1, r3
 8001002:	4818      	ldr	r0, [pc, #96]	@ (8001064 <MX_TIM1_Init+0x180>)
 8001004:	f002 fa30 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 800100e:	f000 f8e7 	bl	80011e0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001026:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001034:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM1_Init+0x180>)
 8001048:	f003 f828 	bl	800409c <HAL_TIMEx_ConfigBreakDeadTime>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x172>
	{
		Error_Handler();
 8001052:	f000 f8c5 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001056:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM1_Init+0x180>)
 8001058:	f000 f912 	bl	8001280 <HAL_TIM_MspPostInit>

}
 800105c:	bf00      	nop
 800105e:	3768      	adds	r7, #104	@ 0x68
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000002c 	.word	0x2000002c
 8001068:	40012c00 	.word	0x40012c00

0800106c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 8001072:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <MX_USART2_UART_Init+0x5c>)
 8001074:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_USART2_UART_Init+0x58>)
 80010b0:	f003 f88a 	bl	80041c8 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80010ba:	f000 f891 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000078 	.word	0x20000078
 80010c8:	40004400 	.word	0x40004400

080010cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <MX_GPIO_Init+0x108>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a3b      	ldr	r2, [pc, #236]	@ (80011d4 <MX_GPIO_Init+0x108>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <MX_GPIO_Init+0x108>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <MX_GPIO_Init+0x108>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a35      	ldr	r2, [pc, #212]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a2f      	ldr	r2, [pc, #188]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <MX_GPIO_Init+0x108>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a29      	ldr	r2, [pc, #164]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <MX_GPIO_Init+0x108>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	21b0      	movs	r1, #176	@ 0xb0
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f000 fca9 	bl	8001aa0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001154:	4820      	ldr	r0, [pc, #128]	@ (80011d8 <MX_GPIO_Init+0x10c>)
 8001156:	f000 fca3 	bl	8001aa0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800115a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800115e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001160:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001164:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	481a      	ldr	r0, [pc, #104]	@ (80011dc <MX_GPIO_Init+0x110>)
 8001172:	f000 fb1b 	bl	80017ac <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8001176:	23b0      	movs	r3, #176	@ 0xb0
 8001178:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001190:	f000 fb0c 	bl	80017ac <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001194:	2340      	movs	r3, #64	@ 0x40
 8001196:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119c:	2301      	movs	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011aa:	f000 faff 	bl	80017ac <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_GPIO_Init+0x10c>)
 80011c8:	f000 faf0 	bl	80017ac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800

080011e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <Error_Handler+0x8>

080011ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_MspInit+0x44>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <HAL_MspInit+0x44>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_MspInit+0x44>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_MspInit+0x44>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_MspInit+0x44>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6593      	str	r3, [r2, #88]	@ 0x58
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_MspInit+0x44>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <HAL_TIM_Base_MspInit+0x44>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d113      	bne.n	800126e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124a:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <HAL_TIM_Base_MspInit+0x48>)
 800124c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001250:	6613      	str	r3, [r2, #96]	@ 0x60
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2019      	movs	r0, #25
 8001264:	f000 fa6b 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001268:	2019      	movs	r0, #25
 800126a:	f000 fa84 	bl	8001776 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40012c00 	.word	0x40012c00
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <HAL_TIM_MspPostInit+0x68>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11d      	bne.n	80012de <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_TIM_MspPostInit+0x6c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a11      	ldr	r2, [pc, #68]	@ (80012ec <HAL_TIM_MspPostInit+0x6c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_TIM_MspPostInit+0x6c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80012ba:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012da:	f000 fa67 	bl	80017ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0a2      	sub	sp, #136	@ 0x88
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2260      	movs	r2, #96	@ 0x60
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fc1c 	bl	8004b4e <memset>
  if(huart->Instance==USART2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a20      	ldr	r2, [pc, #128]	@ (800139c <HAL_UART_MspInit+0xac>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d138      	bne.n	8001392 <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001320:	2302      	movs	r3, #2
 8001322:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fa6b 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001338:	f7ff ff52 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 8001342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001346:	6593      	str	r3, [r2, #88]	@ 0x58
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001358:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_UART_MspInit+0xb0>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800136c:	230c      	movs	r3, #12
 800136e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137e:	2307      	movs	r3, #7
 8001380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f000 fa0d 	bl	80017ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001392:	bf00      	nop
 8001394:	3788      	adds	r7, #136	@ 0x88
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	40021000 	.word	0x40021000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <NMI_Handler+0x4>

080013ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <MemManage_Handler+0x4>

080013bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <UsageFault_Handler+0x4>

080013cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fa:	f000 f8a5 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800140a:	f001 ff25 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000002c 	.word	0x2000002c

08001418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff ffea 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	@ (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	@ (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f003 fb79 	bl	8004b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff fb93 	bl	8000b98 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001480:	08005a48 	.word	0x08005a48
  ldr r2, =_sbss
 8001484:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001488:	2000010c 	.word	0x2000010c

0800148c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_IRQHandler>
	...

08001490 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <HAL_Init+0x3c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_Init+0x3c>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f000 f93e 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 f80f 	bl	80014d0 <HAL_InitTick>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	e001      	b.n	80014c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014be:	f7ff fe95 	bl	80011ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <HAL_InitTick+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d023      	beq.n	800152c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_InitTick+0x70>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <HAL_InitTick+0x6c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f949 	bl	8001792 <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10f      	bne.n	8001526 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d809      	bhi.n	8001520 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f913 	bl	800173e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_InitTick+0x74>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e007      	b.n	8001530 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e004      	b.n	8001530 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e001      	b.n	8001530 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000004 	.word	0x20000004
 8001544:	20000008 	.word	0x20000008

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000108 	.word	0x20000108

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000108 	.word	0x20000108

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	@ (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff3e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff31 	bl	80015ec <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e154      	b.n	8001a66 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8146 	beq.w	8001a60 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d005      	beq.n	80017ec <HAL_GPIO_Init+0x40>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d130      	bne.n	800184e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 0201 	and.w	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b03      	cmp	r3, #3
 8001858:	d017      	beq.n	800188a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d123      	bne.n	80018de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0203 	and.w	r2, r3, #3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a0 	beq.w	8001a60 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_GPIO_Init+0x2d8>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001924:	4a57      	ldr	r2, [pc, #348]	@ (8001a84 <HAL_GPIO_Init+0x2d8>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6613      	str	r3, [r2, #96]	@ 0x60
 800192c:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <HAL_GPIO_Init+0x2d8>)
 800192e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001938:	4a53      	ldr	r2, [pc, #332]	@ (8001a88 <HAL_GPIO_Init+0x2dc>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001962:	d019      	beq.n	8001998 <HAL_GPIO_Init+0x1ec>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a49      	ldr	r2, [pc, #292]	@ (8001a8c <HAL_GPIO_Init+0x2e0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1e8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a48      	ldr	r2, [pc, #288]	@ (8001a90 <HAL_GPIO_Init+0x2e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a47      	ldr	r2, [pc, #284]	@ (8001a94 <HAL_GPIO_Init+0x2e8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1e0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a46      	ldr	r2, [pc, #280]	@ (8001a98 <HAL_GPIO_Init+0x2ec>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1dc>
 8001984:	2304      	movs	r3, #4
 8001986:	e008      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001988:	2307      	movs	r3, #7
 800198a:	e006      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 800198c:	2303      	movs	r3, #3
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001998:	2300      	movs	r3, #0
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019aa:	4937      	ldr	r1, [pc, #220]	@ (8001a88 <HAL_GPIO_Init+0x2dc>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b8:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019dc:	4a2f      	ldr	r2, [pc, #188]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a06:	4a25      	ldr	r2, [pc, #148]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a30:	4a1a      	ldr	r2, [pc, #104]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5a:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f aea3 	bne.w	80017bc <HAL_GPIO_Init+0x10>
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000800 	.word	0x48000800
 8001a94:	48000c00 	.word	0x48000c00
 8001a98:	48001000 	.word	0x48001000
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000

08001aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001afa:	d130      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001afc:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b08:	d038      	beq.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b12:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2232      	movs	r2, #50	@ 0x32
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b30:	e002      	b.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b44:	d102      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f2      	bne.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b58:	d110      	bne.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e00f      	b.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6a:	d007      	beq.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b6c:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b74:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	20000004 	.word	0x20000004
 8001b94:	431bde83 	.word	0x431bde83

08001b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f000 bc02 	b.w	80023b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bac:	4b96      	ldr	r3, [pc, #600]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb6:	4b94      	ldr	r3, [pc, #592]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80e4 	beq.w	8001d96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4c>
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	f040 808b 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f040 8087 	bne.w	8001cf2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001be4:	4b88      	ldr	r3, [pc, #544]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x64>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e3d9      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	4b81      	ldr	r3, [pc, #516]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_RCC_OscConfig+0x7e>
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c14:	e005      	b.n	8001c22 <HAL_RCC_OscConfig+0x8a>
 8001c16:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d223      	bcs.n	8001c6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fd8c 	bl	8002748 <RCC_SetFlashLatencyFromMSIRange>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e3ba      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3a:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a72      	ldr	r2, [pc, #456]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b70      	ldr	r3, [pc, #448]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	496d      	ldr	r1, [pc, #436]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c58:	4b6b      	ldr	r3, [pc, #428]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	4968      	ldr	r1, [pc, #416]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e025      	b.n	8001cba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6e:	4b66      	ldr	r3, [pc, #408]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b63      	ldr	r3, [pc, #396]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4960      	ldr	r1, [pc, #384]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	495b      	ldr	r1, [pc, #364]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fd4c 	bl	8002748 <RCC_SetFlashLatencyFromMSIRange>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e37a      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cba:	f000 fc81 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b51      	ldr	r3, [pc, #324]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	4950      	ldr	r1, [pc, #320]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001e10 <HAL_RCC_OscConfig+0x278>)
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cda:	4b4e      	ldr	r3, [pc, #312]	@ (8001e14 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fbf6 	bl	80014d0 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d052      	beq.n	8001d94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	e35e      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d032      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cfa:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a42      	ldr	r2, [pc, #264]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fc33 	bl	8001570 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fc2f 	bl	8001570 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e347      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d20:	4b39      	ldr	r3, [pc, #228]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2c:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a35      	ldr	r2, [pc, #212]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4930      	ldr	r1, [pc, #192]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	492b      	ldr	r1, [pc, #172]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
 8001d5e:	e01a      	b.n	8001d96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d60:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a28      	ldr	r2, [pc, #160]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc00 	bl	8001570 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d74:	f7ff fbfc 	bl	8001570 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e314      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1dc>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d073      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x21c>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d10e      	bne.n	8001dcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d063      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d15f      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e2f1      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0x24c>
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e025      	b.n	8001e30 <HAL_RCC_OscConfig+0x298>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dec:	d114      	bne.n	8001e18 <HAL_RCC_OscConfig+0x280>
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a02      	ldr	r2, [pc, #8]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x298>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08005620 	.word	0x08005620
 8001e10:	20000004 	.word	0x20000004
 8001e14:	20000008 	.word	0x20000008
 8001e18:	4ba0      	ldr	r3, [pc, #640]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a9f      	ldr	r2, [pc, #636]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b9d      	ldr	r3, [pc, #628]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a9c      	ldr	r2, [pc, #624]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fb9a 	bl	8001570 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fb96 	bl	8001570 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e2ae      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	4b92      	ldr	r3, [pc, #584]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2a8>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff fb86 	bl	8001570 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fb82 	bl	8001570 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	@ 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e29a      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7a:	4b88      	ldr	r3, [pc, #544]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2d0>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d060      	beq.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x310>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d116      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x328>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e277      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b76      	ldr	r3, [pc, #472]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4973      	ldr	r1, [pc, #460]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	e040      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d023      	beq.n	8001f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	4b6f      	ldr	r3, [pc, #444]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb41 	bl	8001570 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fb3d 	bl	8001570 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e255      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	4b65      	ldr	r3, [pc, #404]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b62      	ldr	r3, [pc, #392]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	495f      	ldr	r1, [pc, #380]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b5d      	ldr	r3, [pc, #372]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff fb1d 	bl	8001570 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff fb19 	bl	8001570 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e231      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03c      	beq.n	8001fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	4a4a      	ldr	r2, [pc, #296]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff faf8 	bl	8001570 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff faf4 	bl	8001570 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e20c      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f96:	4b41      	ldr	r3, [pc, #260]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ef      	beq.n	8001f84 <HAL_RCC_OscConfig+0x3ec>
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fac:	4a3b      	ldr	r2, [pc, #236]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fadb 	bl	8001570 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fad7 	bl	8001570 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1ef      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd0:	4b32      	ldr	r3, [pc, #200]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ef      	bne.n	8001fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a6 	beq.w	8002138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	4a26      	ldr	r2, [pc, #152]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	@ 0x58
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002014:	2301      	movs	r3, #1
 8002016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d118      	bne.n	8002056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7ff fa9e 	bl	8001570 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7ff fa9a 	bl	8001570 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1b2      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x4d8>
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800206e:	e029      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d115      	bne.n	80020a4 <HAL_RCC_OscConfig+0x50c>
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	4a07      	ldr	r2, [pc, #28]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a03      	ldr	r2, [pc, #12]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	4a99      	ldr	r2, [pc, #612]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b4:	4b96      	ldr	r3, [pc, #600]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a95      	ldr	r2, [pc, #596]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff fa50 	bl	8001570 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff fa4c 	bl	8001570 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e162      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	4b89      	ldr	r3, [pc, #548]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ed      	beq.n	80020d4 <HAL_RCC_OscConfig+0x53c>
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff fa39 	bl	8001570 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff fa35 	bl	8001570 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e14b      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002118:	4b7d      	ldr	r3, [pc, #500]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b78      	ldr	r3, [pc, #480]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	4a77      	ldr	r2, [pc, #476]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002136:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03c      	beq.n	80021be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01c      	beq.n	8002186 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800214c:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002152:	4a6f      	ldr	r2, [pc, #444]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff fa08 	bl	8001570 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002164:	f7ff fa04 	bl	8001570 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e11c      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002176:	4b66      	ldr	r3, [pc, #408]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ef      	beq.n	8002164 <HAL_RCC_OscConfig+0x5cc>
 8002184:	e01b      	b.n	80021be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002186:	4b62      	ldr	r3, [pc, #392]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002188:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800218c:	4a60      	ldr	r2, [pc, #384]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff f9eb 	bl	8001570 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219e:	f7ff f9e7 	bl	8001570 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0ff      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b0:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80021b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ef      	bne.n	800219e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80f3 	beq.w	80023ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	f040 80c9 	bne.w	8002364 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 0203 	and.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d12c      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	3b01      	subs	r3, #1
 80021f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d123      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002202:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d11b      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002212:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d113      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d109      	bne.n	8002240 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	3b01      	subs	r3, #1
 800223a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d06b      	beq.n	8002318 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d062      	beq.n	800230c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0ac      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002256:	4b2e      	ldr	r3, [pc, #184]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800225c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002262:	f7ff f985 	bl	8001570 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff f981 	bl	8001570 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e099      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_RCC_OscConfig+0x77c>)
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002298:	3a01      	subs	r2, #1
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022a2:	0212      	lsls	r2, r2, #8
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022aa:	0852      	lsrs	r2, r2, #1
 80022ac:	3a01      	subs	r2, #1
 80022ae:	0552      	lsls	r2, r2, #21
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022b6:	0852      	lsrs	r2, r2, #1
 80022b8:	3a01      	subs	r2, #1
 80022ba:	0652      	lsls	r2, r2, #25
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022c2:	06d2      	lsls	r2, r2, #27
 80022c4:	430a      	orrs	r2, r1
 80022c6:	4912      	ldr	r1, [pc, #72]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022cc:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e4:	f7ff f944 	bl	8001570 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff f940 	bl	8001570 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e058      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <HAL_RCC_OscConfig+0x778>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230a:	e050      	b.n	80023ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e04f      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
 8002310:	40021000 	.word	0x40021000
 8002314:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002318:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d144      	bne.n	80023ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002324:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002330:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a20      	ldr	r2, [pc, #128]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800233c:	f7ff f918 	bl	8001570 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff f914 	bl	8001570 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e02c      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x7ac>
 8002362:	e024      	b.n	80023ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d01f      	beq.n	80023aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 8002370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7ff f8fb 	bl	8001570 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7ff f8f7 	bl	8001570 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e00f      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4905      	ldr	r1, [pc, #20]	@ (80023b8 <HAL_RCC_OscConfig+0x820>)
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_RCC_OscConfig+0x824>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
 80023a8:	e001      	b.n	80023ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	feeefffc 	.word	0xfeeefffc

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0e7      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b75      	ldr	r3, [pc, #468]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b72      	ldr	r3, [pc, #456]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4970      	ldr	r1, [pc, #448]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b6e      	ldr	r3, [pc, #440]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cf      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	4b66      	ldr	r3, [pc, #408]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800241c:	429a      	cmp	r2, r3
 800241e:	d908      	bls.n	8002432 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4960      	ldr	r1, [pc, #384]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d04c      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	4b5a      	ldr	r3, [pc, #360]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d121      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0a6      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	4b54      	ldr	r3, [pc, #336]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d115      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e09a      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002476:	4b4e      	ldr	r3, [pc, #312]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e08e      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e086      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b46      	ldr	r3, [pc, #280]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4943      	ldr	r1, [pc, #268]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7ff f862 	bl	8001570 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7ff f85e 	bl	8001570 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e06e      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4b31      	ldr	r3, [pc, #196]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d208      	bcs.n	8002506 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b2e      	ldr	r3, [pc, #184]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	492b      	ldr	r1, [pc, #172]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d210      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002514:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 0207 	bic.w	r2, r3, #7
 800251c:	4923      	ldr	r1, [pc, #140]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e036      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002542:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4918      	ldr	r1, [pc, #96]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4910      	ldr	r1, [pc, #64]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002574:	f000 f824 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	490b      	ldr	r1, [pc, #44]	@ (80025b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	4a09      	ldr	r2, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x1fc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe ff99 	bl	80014d0 <HAL_InitTick>
 800259e:	4603      	mov	r3, r0
 80025a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025a2:	7afb      	ldrb	r3, [r7, #11]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08005620 	.word	0x08005620
 80025b8:	20000004 	.word	0x20000004
 80025bc:	20000008 	.word	0x20000008

080025c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ce:	4b3e      	ldr	r3, [pc, #248]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d8:	4b3b      	ldr	r3, [pc, #236]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x34>
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	d121      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11e      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025f4:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002600:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e005      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002610:	4b2d      	ldr	r3, [pc, #180]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800261c:	4a2b      	ldr	r2, [pc, #172]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d102      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002638:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e004      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d101      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002644:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d134      	bne.n	80026b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800264e:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0xa6>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d003      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0xac>
 8002664:	e005      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	e005      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800266e:	617b      	str	r3, [r7, #20]
      break;
 8002670:	e002      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	617b      	str	r3, [r7, #20]
      break;
 8002676:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	3301      	adds	r3, #1
 8002684:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	0e5b      	lsrs	r3, r3, #25
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	3301      	adds	r3, #1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026b8:	69bb      	ldr	r3, [r7, #24]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08005638 	.word	0x08005638
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4904      	ldr	r1, [pc, #16]	@ (8002718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	08005630 	.word	0x08005630

0800271c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002720:	f7ff ffda 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0adb      	lsrs	r3, r3, #11
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08005630 	.word	0x08005630

08002748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002754:	4b2a      	ldr	r3, [pc, #168]	@ (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002760:	f7ff f9b6 	bl	8001ad0 <HAL_PWREx_GetVoltageRange>
 8002764:	6178      	str	r0, [r7, #20]
 8002766:	e014      	b.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b25      	ldr	r3, [pc, #148]	@ (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276c:	4a24      	ldr	r2, [pc, #144]	@ (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	@ 0x58
 8002774:	4b22      	ldr	r3, [pc, #136]	@ (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002780:	f7ff f9a6 	bl	8001ad0 <HAL_PWREx_GetVoltageRange>
 8002784:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	4a1d      	ldr	r2, [pc, #116]	@ (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002798:	d10b      	bne.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b80      	cmp	r3, #128	@ 0x80
 800279e:	d919      	bls.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80027a4:	d902      	bls.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027a6:	2302      	movs	r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e013      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ac:	2301      	movs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e010      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b80      	cmp	r3, #128	@ 0x80
 80027b6:	d902      	bls.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027b8:	2303      	movs	r3, #3
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e00a      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	@ 0x80
 80027c2:	d102      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027c4:	2302      	movs	r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e004      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b70      	cmp	r3, #112	@ 0x70
 80027ce:	d101      	bne.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 0207 	bic.w	r2, r3, #7
 80027dc:	4909      	ldr	r1, [pc, #36]	@ (8002804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	40022000 	.word	0x40022000

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002810:	2300      	movs	r3, #0
 8002812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002814:	2300      	movs	r3, #0
 8002816:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002820:	2b00      	cmp	r3, #0
 8002822:	d031      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800282c:	d01a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800282e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002832:	d814      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800283c:	d10f      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800283e:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4a5c      	ldr	r2, [pc, #368]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800284a:	e00c      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fa22 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800285c:	e003      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	74fb      	strb	r3, [r7, #19]
      break;
 8002862:	e000      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002866:	7cfb      	ldrb	r3, [r7, #19]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800286c:	4b51      	ldr	r3, [pc, #324]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	494e      	ldr	r1, [pc, #312]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002882:	e001      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 809e 	beq.w	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800289a:	4b46      	ldr	r3, [pc, #280]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80028aa:	2300      	movs	r3, #0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	4a3f      	ldr	r2, [pc, #252]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80028bc:	4b3d      	ldr	r3, [pc, #244]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028cc:	4b3a      	ldr	r3, [pc, #232]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a39      	ldr	r2, [pc, #228]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fe4a 	bl	8001570 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028de:	e009      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fe46 	bl	8001570 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d902      	bls.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	74fb      	strb	r3, [r7, #19]
        break;
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f4:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d15a      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002906:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002910:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01e      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	d019      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800292e:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002934:	4a1f      	ldr	r2, [pc, #124]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800293e:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002944:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800294a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800294e:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d016      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fe06 	bl	8001570 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	e00b      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe fe02 	bl	8001570 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d902      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	74fb      	strb	r3, [r7, #19]
            break;
 800297e:	e006      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0ec      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002994:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	4904      	ldr	r1, [pc, #16]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029aa:	e009      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
 80029b0:	e006      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c0:	7c7b      	ldrb	r3, [r7, #17]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	4b8d      	ldr	r3, [pc, #564]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	4a8c      	ldr	r2, [pc, #560]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029de:	4b87      	ldr	r3, [pc, #540]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f023 0203 	bic.w	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4983      	ldr	r1, [pc, #524]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a00:	4b7e      	ldr	r3, [pc, #504]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f023 020c 	bic.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	497b      	ldr	r1, [pc, #492]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a22:	4b76      	ldr	r3, [pc, #472]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	4972      	ldr	r1, [pc, #456]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a44:	4b6d      	ldr	r3, [pc, #436]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	496a      	ldr	r1, [pc, #424]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a66:	4b65      	ldr	r3, [pc, #404]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	4961      	ldr	r1, [pc, #388]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a88:	4b5c      	ldr	r3, [pc, #368]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4959      	ldr	r1, [pc, #356]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aaa:	4b54      	ldr	r3, [pc, #336]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	4950      	ldr	r1, [pc, #320]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002acc:	4b4b      	ldr	r3, [pc, #300]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	4948      	ldr	r1, [pc, #288]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aee:	4b43      	ldr	r3, [pc, #268]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	493f      	ldr	r1, [pc, #252]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d028      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b10:	4b3a      	ldr	r3, [pc, #232]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1e:	4937      	ldr	r1, [pc, #220]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b30:	4b32      	ldr	r3, [pc, #200]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a31      	ldr	r2, [pc, #196]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3a:	60d3      	str	r3, [r2, #12]
 8002b3c:	e011      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f8a4 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b6e:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	491f      	ldr	r1, [pc, #124]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b98:	60d3      	str	r3, [r2, #12]
 8002b9a:	e011      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f875 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bda:	4908      	ldr	r1, [pc, #32]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bea:	d109      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a02      	ldr	r2, [pc, #8]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e014      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f843 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01c      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c30:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3e:	4916      	ldr	r1, [pc, #88]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	2102      	movs	r1, #2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f820 	bl	8002c9c <RCCEx_PLLSAI1_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	4904      	ldr	r1, [pc, #16]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000

08002c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002caa:	4b74      	ldr	r3, [pc, #464]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cb6:	4b71      	ldr	r3, [pc, #452]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10d      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cce:	4b6b      	ldr	r3, [pc, #428]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d047      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e044      	b.n	8002d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d018      	beq.n	8002d22 <RCCEx_PLLSAI1_Config+0x86>
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d825      	bhi.n	8002d40 <RCCEx_PLLSAI1_Config+0xa4>
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <RCCEx_PLLSAI1_Config+0x62>
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d009      	beq.n	8002d10 <RCCEx_PLLSAI1_Config+0x74>
 8002cfc:	e020      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11d      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0e:	e01a      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d10:	4b5a      	ldr	r3, [pc, #360]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d116      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e013      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d22:	4b56      	ldr	r3, [pc, #344]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d2e:	4b53      	ldr	r3, [pc, #332]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d3e:	e006      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e004      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d46:	bf00      	nop
 8002d48:	e002      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d56:	4b49      	ldr	r3, [pc, #292]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	4943      	ldr	r1, [pc, #268]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d17c      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d78:	4b40      	ldr	r3, [pc, #256]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe fbf4 	bl	8001570 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8c:	f7fe fbf0 	bl	8001570 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da0:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ef      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d15f      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d110      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db8:	4b30      	ldr	r3, [pc, #192]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002dc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	06d2      	lsls	r2, r2, #27
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	492a      	ldr	r1, [pc, #168]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	610b      	str	r3, [r1, #16]
 8002dd8:	e027      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d112      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de0:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002de8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	0211      	lsls	r1, r2, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6912      	ldr	r2, [r2, #16]
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	491f      	ldr	r1, [pc, #124]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	610b      	str	r3, [r1, #16]
 8002e04:	e011      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e06:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	0211      	lsls	r1, r2, #8
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6952      	ldr	r2, [r2, #20]
 8002e1c:	0852      	lsrs	r2, r2, #1
 8002e1e:	3a01      	subs	r2, #1
 8002e20:	0652      	lsls	r2, r2, #25
 8002e22:	430a      	orrs	r2, r1
 8002e24:	4915      	ldr	r1, [pc, #84]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e2a:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe fb9b 	bl	8001570 <HAL_GetTick>
 8002e3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3c:	e009      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e3e:	f7fe fb97 	bl	8001570 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d902      	bls.n	8002e52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002e50:	e005      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e52:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ef      	beq.n	8002e3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	4903      	ldr	r1, [pc, #12]	@ (8002e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e049      	b.n	8002f26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe f9c4 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f000 fcd8 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e03b      	b.n	8002fc0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a19      	ldr	r2, [pc, #100]	@ (8002fcc <HAL_TIM_Base_Start_IT+0x9c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d009      	beq.n	8002f7e <HAL_TIM_Base_Start_IT+0x4e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d004      	beq.n	8002f7e <HAL_TIM_Base_Start_IT+0x4e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d115      	bne.n	8002faa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d015      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x8c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f96:	d011      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	e008      	b.n	8002fbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e000      	b.n	8002fbe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	00010007 	.word	0x00010007

08002fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e049      	b.n	800307e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f841 	bl	8003086 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fc2c 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start+0x24>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e03c      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d109      	bne.n	80030da <HAL_TIM_PWM_Start+0x3e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	bf14      	ite	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	2300      	moveq	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e02f      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start+0x58>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e022      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d109      	bne.n	800310e <HAL_TIM_PWM_Start+0x72>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e015      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start+0x8c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07e      	b.n	8003240 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0xb6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003150:	e023      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xc6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003160:	e01b      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003170:	e013      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xe6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003180:	e00b      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b10      	cmp	r3, #16
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xf6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003190:	e003      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 feee 	bl	8003f84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a26      	ldr	r2, [pc, #152]	@ (8003248 <HAL_TIM_PWM_Start+0x1ac>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x12a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a25      	ldr	r2, [pc, #148]	@ (800324c <HAL_TIM_PWM_Start+0x1b0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x12a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <HAL_TIM_PWM_Start+0x1b4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_PWM_Start+0x12e>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_TIM_PWM_Start+0x130>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <HAL_TIM_PWM_Start+0x1ac>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_TIM_PWM_Start+0x162>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d004      	beq.n	80031fe <HAL_TIM_PWM_Start+0x162>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a14      	ldr	r2, [pc, #80]	@ (800324c <HAL_TIM_PWM_Start+0x1b0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d115      	bne.n	800322a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_TIM_PWM_Start+0x1b8>)
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d015      	beq.n	800323c <HAL_TIM_PWM_Start+0x1a0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003216:	d011      	beq.n	800323c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	e008      	b.n	800323c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e000      	b.n	800323e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	00010007 	.word	0x00010007

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d020      	beq.n	80032bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0202 	mvn.w	r2, #2
 800328c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fac7 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fab9 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 faca 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d020      	beq.n	8003308 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0204 	mvn.w	r2, #4
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 faa1 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa93 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 faa4 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d020      	beq.n	8003354 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0208 	mvn.w	r2, #8
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2204      	movs	r2, #4
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa7b 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa6d 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fa7e 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0210 	mvn.w	r2, #16
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2208      	movs	r2, #8
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fa55 	bl	8003836 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa47 	bl	8003822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fa58 	bl	800384a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0201 	mvn.w	r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fbd2 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00c      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80033ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fed7 	bl	80041a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fecf 	bl	80041b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa12 	bl	800385e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0220 	mvn.w	r2, #32
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fe97 	bl	800418c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e0ff      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b14      	cmp	r3, #20
 8003492:	f200 80f0 	bhi.w	8003676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034f1 	.word	0x080034f1
 80034a0:	08003677 	.word	0x08003677
 80034a4:	08003677 	.word	0x08003677
 80034a8:	08003677 	.word	0x08003677
 80034ac:	08003531 	.word	0x08003531
 80034b0:	08003677 	.word	0x08003677
 80034b4:	08003677 	.word	0x08003677
 80034b8:	08003677 	.word	0x08003677
 80034bc:	08003573 	.word	0x08003573
 80034c0:	08003677 	.word	0x08003677
 80034c4:	08003677 	.word	0x08003677
 80034c8:	08003677 	.word	0x08003677
 80034cc:	080035b3 	.word	0x080035b3
 80034d0:	08003677 	.word	0x08003677
 80034d4:	08003677 	.word	0x08003677
 80034d8:	08003677 	.word	0x08003677
 80034dc:	080035f5 	.word	0x080035f5
 80034e0:	08003677 	.word	0x08003677
 80034e4:	08003677 	.word	0x08003677
 80034e8:	08003677 	.word	0x08003677
 80034ec:	08003635 	.word	0x08003635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fa2c 	bl	8003954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0208 	orr.w	r2, r2, #8
 800350a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	619a      	str	r2, [r3, #24]
      break;
 800352e:	e0a5      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fa88 	bl	8003a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6999      	ldr	r1, [r3, #24]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	021a      	lsls	r2, r3, #8
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	619a      	str	r2, [r3, #24]
      break;
 8003570:	e084      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fae1 	bl	8003b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0208 	orr.w	r2, r2, #8
 800358c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0204 	bic.w	r2, r2, #4
 800359c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69d9      	ldr	r1, [r3, #28]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      break;
 80035b0:	e064      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fb39 	bl	8003c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	021a      	lsls	r2, r3, #8
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	61da      	str	r2, [r3, #28]
      break;
 80035f2:	e043      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fb76 	bl	8003cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0208 	orr.w	r2, r2, #8
 800360e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003632:	e023      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fbae 	bl	8003d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003674:	e002      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
      break;
 800367a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003684:	7dfb      	ldrb	r3, [r7, #23]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop

08003690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_ConfigClockSource+0x1c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0b6      	b.n	800381a <HAL_TIM_ConfigClockSource+0x18a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e8:	d03e      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0xd8>
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ee:	f200 8087 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x170>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f6:	f000 8086 	beq.w	8003806 <HAL_TIM_ConfigClockSource+0x176>
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fe:	d87f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003700:	2b70      	cmp	r3, #112	@ 0x70
 8003702:	d01a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xaa>
 8003704:	2b70      	cmp	r3, #112	@ 0x70
 8003706:	d87b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003708:	2b60      	cmp	r3, #96	@ 0x60
 800370a:	d050      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x11e>
 800370c:	2b60      	cmp	r3, #96	@ 0x60
 800370e:	d877      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003710:	2b50      	cmp	r3, #80	@ 0x50
 8003712:	d03c      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xfe>
 8003714:	2b50      	cmp	r3, #80	@ 0x50
 8003716:	d873      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d058      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x13e>
 800371c:	2b40      	cmp	r3, #64	@ 0x40
 800371e:	d86f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003720:	2b30      	cmp	r3, #48	@ 0x30
 8003722:	d064      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15e>
 8003724:	2b30      	cmp	r3, #48	@ 0x30
 8003726:	d86b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003728:	2b20      	cmp	r3, #32
 800372a:	d060      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15e>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d867      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05c      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15e>
 8003734:	2b10      	cmp	r3, #16
 8003736:	d05a      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x15e>
 8003738:	e062      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	f000 fbfb 	bl	8003f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800375c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	609a      	str	r2, [r3, #8]
      break;
 8003766:	e04f      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	f000 fbe4 	bl	8003f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800378a:	609a      	str	r2, [r3, #8]
      break;
 800378c:	e03c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fb58 	bl	8003e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2150      	movs	r1, #80	@ 0x50
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fbb1 	bl	8003f0e <TIM_ITRx_SetConfig>
      break;
 80037ac:	e02c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fb77 	bl	8003eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2160      	movs	r1, #96	@ 0x60
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fba1 	bl	8003f0e <TIM_ITRx_SetConfig>
      break;
 80037cc:	e01c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 fb38 	bl	8003e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2140      	movs	r1, #64	@ 0x40
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fb91 	bl	8003f0e <TIM_ITRx_SetConfig>
      break;
 80037ec:	e00c      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f000 fb88 	bl	8003f0e <TIM_ITRx_SetConfig>
      break;
 80037fe:	e003      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e000      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <TIM_Base_SetConfig+0xd4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x20>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003892:	d108      	bne.n	80038a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a27      	ldr	r2, [pc, #156]	@ (8003948 <TIM_Base_SetConfig+0xd4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0x52>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0x52>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a24      	ldr	r2, [pc, #144]	@ (800394c <TIM_Base_SetConfig+0xd8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0x52>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a23      	ldr	r2, [pc, #140]	@ (8003950 <TIM_Base_SetConfig+0xdc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <TIM_Base_SetConfig+0xd4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0xa0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a11      	ldr	r2, [pc, #68]	@ (800394c <TIM_Base_SetConfig+0xd8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0xa0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a10      	ldr	r2, [pc, #64]	@ (8003950 <TIM_Base_SetConfig+0xdc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d103      	bne.n	800391c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f023 0201 	bic.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]
  }
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40014000 	.word	0x40014000
 8003950:	40014400 	.word	0x40014400

08003954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 0201 	bic.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 0302 	bic.w	r3, r3, #2
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a24      	ldr	r2, [pc, #144]	@ (8003a40 <TIM_OC1_SetConfig+0xec>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_OC1_SetConfig+0x70>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a23      	ldr	r2, [pc, #140]	@ (8003a44 <TIM_OC1_SetConfig+0xf0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC1_SetConfig+0x70>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <TIM_OC1_SetConfig+0xf4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10c      	bne.n	80039de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0308 	bic.w	r3, r3, #8
 80039ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 0304 	bic.w	r3, r3, #4
 80039dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a17      	ldr	r2, [pc, #92]	@ (8003a40 <TIM_OC1_SetConfig+0xec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <TIM_OC1_SetConfig+0xa2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a16      	ldr	r2, [pc, #88]	@ (8003a44 <TIM_OC1_SetConfig+0xf0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_OC1_SetConfig+0xa2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a15      	ldr	r2, [pc, #84]	@ (8003a48 <TIM_OC1_SetConfig+0xf4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400

08003a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f023 0210 	bic.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0320 	bic.w	r3, r3, #32
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	@ (8003b34 <TIM_OC2_SetConfig+0xe8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10d      	bne.n	8003acc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a19      	ldr	r2, [pc, #100]	@ (8003b34 <TIM_OC2_SetConfig+0xe8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d007      	beq.n	8003ae4 <TIM_OC2_SetConfig+0x98>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <TIM_OC2_SetConfig+0xec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_OC2_SetConfig+0x98>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a17      	ldr	r2, [pc, #92]	@ (8003b3c <TIM_OC2_SetConfig+0xf0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d113      	bne.n	8003b0c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400

08003b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0303 	bic.w	r3, r3, #3
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <TIM_OC3_SetConfig+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10d      	bne.n	8003bbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a18      	ldr	r2, [pc, #96]	@ (8003c24 <TIM_OC3_SetConfig+0xe4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d007      	beq.n	8003bd6 <TIM_OC3_SetConfig+0x96>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	@ (8003c28 <TIM_OC3_SetConfig+0xe8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC3_SetConfig+0x96>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <TIM_OC3_SetConfig+0xec>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d113      	bne.n	8003bfe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400

08003c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <TIM_OC4_SetConfig+0xb0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <TIM_OC4_SetConfig+0x74>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a13      	ldr	r2, [pc, #76]	@ (8003ce4 <TIM_OC4_SetConfig+0xb4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d003      	beq.n	8003ca4 <TIM_OC4_SetConfig+0x74>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ce8 <TIM_OC4_SetConfig+0xb8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d109      	bne.n	8003cb8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400

08003cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a13      	ldr	r2, [pc, #76]	@ (8003d90 <TIM_OC5_SetConfig+0xa4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_OC5_SetConfig+0x6a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <TIM_OC5_SetConfig+0xa8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_OC5_SetConfig+0x6a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a11      	ldr	r2, [pc, #68]	@ (8003d98 <TIM_OC5_SetConfig+0xac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d109      	bne.n	8003d6a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400

08003d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	051b      	lsls	r3, r3, #20
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a14      	ldr	r2, [pc, #80]	@ (8003e44 <TIM_OC6_SetConfig+0xa8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_OC6_SetConfig+0x6c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a13      	ldr	r2, [pc, #76]	@ (8003e48 <TIM_OC6_SetConfig+0xac>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_OC6_SetConfig+0x6c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <TIM_OC6_SetConfig+0xb0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d109      	bne.n	8003e1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	029b      	lsls	r3, r3, #10
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400

08003e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 030a 	bic.w	r3, r3, #10
 8003e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b087      	sub	sp, #28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0210 	bic.w	r2, r3, #16
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f043 0307 	orr.w	r3, r3, #7
 8003f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	2201      	movs	r2, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e04f      	b.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a21      	ldr	r2, [pc, #132]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a14      	ldr	r2, [pc, #80]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004050:	d004      	beq.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10c      	bne.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40014000 	.word	0x40014000

0800409c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e060      	b.n	800417a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a14      	ldr	r2, [pc, #80]	@ (8004188 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d115      	bne.n	8004168 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	051b      	lsls	r3, r3, #20
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00

0800418c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e040      	b.n	800425c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd f880 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa82 	bl	8004718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f825 	bl	8004264 <UART_SetConfig>
 800421a:	4603      	mov	r3, r0
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e01b      	b.n	800425c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fb01 	bl	800485c <UART_CheckIdleState>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b08a      	sub	sp, #40	@ 0x28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	4313      	orrs	r3, r2
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b9e      	ldr	r3, [pc, #632]	@ (800450c <UART_SetConfig+0x2a8>)
 8004294:	4013      	ands	r3, r2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800429c:	430b      	orrs	r3, r1
 800429e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a93      	ldr	r2, [pc, #588]	@ (8004510 <UART_SetConfig+0x2ac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	4313      	orrs	r3, r2
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	430a      	orrs	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a8a      	ldr	r2, [pc, #552]	@ (8004514 <UART_SetConfig+0x2b0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d126      	bne.n	800433c <UART_SetConfig+0xd8>
 80042ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004518 <UART_SetConfig+0x2b4>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d81b      	bhi.n	8004334 <UART_SetConfig+0xd0>
 80042fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <UART_SetConfig+0xa0>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004315 	.word	0x08004315
 8004308:	08004325 	.word	0x08004325
 800430c:	0800431d 	.word	0x0800431d
 8004310:	0800432d 	.word	0x0800432d
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e0ab      	b.n	8004474 <UART_SetConfig+0x210>
 800431c:	2302      	movs	r3, #2
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004322:	e0a7      	b.n	8004474 <UART_SetConfig+0x210>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e0a3      	b.n	8004474 <UART_SetConfig+0x210>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e09f      	b.n	8004474 <UART_SetConfig+0x210>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e09b      	b.n	8004474 <UART_SetConfig+0x210>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a76      	ldr	r2, [pc, #472]	@ (800451c <UART_SetConfig+0x2b8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d138      	bne.n	80043b8 <UART_SetConfig+0x154>
 8004346:	4b74      	ldr	r3, [pc, #464]	@ (8004518 <UART_SetConfig+0x2b4>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d82d      	bhi.n	80043b0 <UART_SetConfig+0x14c>
 8004354:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <UART_SetConfig+0xf8>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004391 	.word	0x08004391
 8004360:	080043b1 	.word	0x080043b1
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043b1 	.word	0x080043b1
 800436c:	080043a1 	.word	0x080043a1
 8004370:	080043b1 	.word	0x080043b1
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b1 	.word	0x080043b1
 800437c:	08004399 	.word	0x08004399
 8004380:	080043b1 	.word	0x080043b1
 8004384:	080043b1 	.word	0x080043b1
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043a9 	.word	0x080043a9
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004396:	e06d      	b.n	8004474 <UART_SetConfig+0x210>
 8004398:	2302      	movs	r3, #2
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439e:	e069      	b.n	8004474 <UART_SetConfig+0x210>
 80043a0:	2304      	movs	r3, #4
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e065      	b.n	8004474 <UART_SetConfig+0x210>
 80043a8:	2308      	movs	r3, #8
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e061      	b.n	8004474 <UART_SetConfig+0x210>
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e05d      	b.n	8004474 <UART_SetConfig+0x210>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a58      	ldr	r2, [pc, #352]	@ (8004520 <UART_SetConfig+0x2bc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d125      	bne.n	800440e <UART_SetConfig+0x1aa>
 80043c2:	4b55      	ldr	r3, [pc, #340]	@ (8004518 <UART_SetConfig+0x2b4>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043cc:	2b30      	cmp	r3, #48	@ 0x30
 80043ce:	d016      	beq.n	80043fe <UART_SetConfig+0x19a>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d818      	bhi.n	8004406 <UART_SetConfig+0x1a2>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d00a      	beq.n	80043ee <UART_SetConfig+0x18a>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d814      	bhi.n	8004406 <UART_SetConfig+0x1a2>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <UART_SetConfig+0x182>
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d008      	beq.n	80043f6 <UART_SetConfig+0x192>
 80043e4:	e00f      	b.n	8004406 <UART_SetConfig+0x1a2>
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ec:	e042      	b.n	8004474 <UART_SetConfig+0x210>
 80043ee:	2302      	movs	r3, #2
 80043f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f4:	e03e      	b.n	8004474 <UART_SetConfig+0x210>
 80043f6:	2304      	movs	r3, #4
 80043f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fc:	e03a      	b.n	8004474 <UART_SetConfig+0x210>
 80043fe:	2308      	movs	r3, #8
 8004400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004404:	e036      	b.n	8004474 <UART_SetConfig+0x210>
 8004406:	2310      	movs	r3, #16
 8004408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440c:	e032      	b.n	8004474 <UART_SetConfig+0x210>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3f      	ldr	r2, [pc, #252]	@ (8004510 <UART_SetConfig+0x2ac>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d12a      	bne.n	800446e <UART_SetConfig+0x20a>
 8004418:	4b3f      	ldr	r3, [pc, #252]	@ (8004518 <UART_SetConfig+0x2b4>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004422:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004426:	d01a      	beq.n	800445e <UART_SetConfig+0x1fa>
 8004428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800442c:	d81b      	bhi.n	8004466 <UART_SetConfig+0x202>
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004432:	d00c      	beq.n	800444e <UART_SetConfig+0x1ea>
 8004434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004438:	d815      	bhi.n	8004466 <UART_SetConfig+0x202>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <UART_SetConfig+0x1e2>
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004442:	d008      	beq.n	8004456 <UART_SetConfig+0x1f2>
 8004444:	e00f      	b.n	8004466 <UART_SetConfig+0x202>
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444c:	e012      	b.n	8004474 <UART_SetConfig+0x210>
 800444e:	2302      	movs	r3, #2
 8004450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004454:	e00e      	b.n	8004474 <UART_SetConfig+0x210>
 8004456:	2304      	movs	r3, #4
 8004458:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445c:	e00a      	b.n	8004474 <UART_SetConfig+0x210>
 800445e:	2308      	movs	r3, #8
 8004460:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004464:	e006      	b.n	8004474 <UART_SetConfig+0x210>
 8004466:	2310      	movs	r3, #16
 8004468:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446c:	e002      	b.n	8004474 <UART_SetConfig+0x210>
 800446e:	2310      	movs	r3, #16
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a25      	ldr	r2, [pc, #148]	@ (8004510 <UART_SetConfig+0x2ac>)
 800447a:	4293      	cmp	r3, r2
 800447c:	f040 808a 	bne.w	8004594 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004484:	2b08      	cmp	r3, #8
 8004486:	d824      	bhi.n	80044d2 <UART_SetConfig+0x26e>
 8004488:	a201      	add	r2, pc, #4	@ (adr r2, 8004490 <UART_SetConfig+0x22c>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044c3 	.word	0x080044c3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044d3 	.word	0x080044d3
 80044b0:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7fe f91c 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 80044b8:	61f8      	str	r0, [r7, #28]
        break;
 80044ba:	e010      	b.n	80044de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <UART_SetConfig+0x2c0>)
 80044be:	61fb      	str	r3, [r7, #28]
        break;
 80044c0:	e00d      	b.n	80044de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7fe f87d 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 80044c6:	61f8      	str	r0, [r7, #28]
        break;
 80044c8:	e009      	b.n	80044de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e005      	b.n	80044de <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8109 	beq.w	80046f8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d305      	bcc.n	8004502 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d912      	bls.n	8004528 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004508:	e0f6      	b.n	80046f8 <UART_SetConfig+0x494>
 800450a:	bf00      	nop
 800450c:	efff69f3 	.word	0xefff69f3
 8004510:	40008000 	.word	0x40008000
 8004514:	40013800 	.word	0x40013800
 8004518:	40021000 	.word	0x40021000
 800451c:	40004400 	.word	0x40004400
 8004520:	40004800 	.word	0x40004800
 8004524:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2200      	movs	r2, #0
 800452c:	461c      	mov	r4, r3
 800452e:	4615      	mov	r5, r2
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	022b      	lsls	r3, r5, #8
 800453a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800453e:	0222      	lsls	r2, r4, #8
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	6849      	ldr	r1, [r1, #4]
 8004544:	0849      	lsrs	r1, r1, #1
 8004546:	2000      	movs	r0, #0
 8004548:	4688      	mov	r8, r1
 800454a:	4681      	mov	r9, r0
 800454c:	eb12 0a08 	adds.w	sl, r2, r8
 8004550:	eb43 0b09 	adc.w	fp, r3, r9
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004562:	4650      	mov	r0, sl
 8004564:	4659      	mov	r1, fp
 8004566:	f7fc f969 	bl	800083c <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4613      	mov	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004578:	d308      	bcc.n	800458c <UART_SetConfig+0x328>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004580:	d204      	bcs.n	800458c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e0b5      	b.n	80046f8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004592:	e0b1      	b.n	80046f8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459c:	d15d      	bne.n	800465a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800459e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d827      	bhi.n	80045f6 <UART_SetConfig+0x392>
 80045a6:	a201      	add	r2, pc, #4	@ (adr r2, 80045ac <UART_SetConfig+0x348>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045f7 	.word	0x080045f7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7fe f88e 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 80045d4:	61f8      	str	r0, [r7, #28]
        break;
 80045d6:	e014      	b.n	8004602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7fe f8a0 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 80045dc:	61f8      	str	r0, [r7, #28]
        break;
 80045de:	e010      	b.n	8004602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004714 <UART_SetConfig+0x4b0>)
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e00d      	b.n	8004602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7fd ffeb 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 80045ea:	61f8      	str	r0, [r7, #28]
        break;
 80045ec:	e009      	b.n	8004602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f2:	61fb      	str	r3, [r7, #28]
        break;
 80045f4:	e005      	b.n	8004602 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d077      	beq.n	80046f8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005a      	lsls	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0f      	cmp	r3, #15
 8004622:	d916      	bls.n	8004652 <UART_SetConfig+0x3ee>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462a:	d212      	bcs.n	8004652 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f023 030f 	bic.w	r3, r3, #15
 8004634:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	b29a      	uxth	r2, r3
 8004642:	8afb      	ldrh	r3, [r7, #22]
 8004644:	4313      	orrs	r3, r2
 8004646:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	8afa      	ldrh	r2, [r7, #22]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e052      	b.n	80046f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004658:	e04e      	b.n	80046f8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800465e:	2b08      	cmp	r3, #8
 8004660:	d827      	bhi.n	80046b2 <UART_SetConfig+0x44e>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x404>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe f830 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8004690:	61f8      	str	r0, [r7, #28]
        break;
 8004692:	e014      	b.n	80046be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe f842 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e010      	b.n	80046be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <UART_SetConfig+0x4b0>)
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e00d      	b.n	80046be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fd ff8d 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 80046a6:	61f8      	str	r0, [r7, #28]
        break;
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	61fb      	str	r3, [r7, #28]
        break;
 80046b0:	e005      	b.n	80046be <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046bc:	bf00      	nop
    }

    if (pclk != 0U)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d019      	beq.n	80046f8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	085a      	lsrs	r2, r3, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	441a      	add	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d909      	bls.n	80046f2 <UART_SetConfig+0x48e>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	d205      	bcs.n	80046f2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e002      	b.n	80046f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004704:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	@ 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004712:	bf00      	nop
 8004714:	00f42400 	.word	0x00f42400

08004718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01a      	beq.n	800482e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004816:	d10a      	bne.n	800482e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	605a      	str	r2, [r3, #4]
  }
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b098      	sub	sp, #96	@ 0x60
 8004860:	af02      	add	r7, sp, #8
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800486c:	f7fc fe80 	bl	8001570 <HAL_GetTick>
 8004870:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b08      	cmp	r3, #8
 800487e:	d12e      	bne.n	80048de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004888:	2200      	movs	r2, #0
 800488a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f88c 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d021      	beq.n	80048de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e062      	b.n	80049a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d149      	bne.n	8004980 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	2200      	movs	r2, #0
 80048f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f856 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d03c      	beq.n	8004980 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	623b      	str	r3, [r7, #32]
   return(result);
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004924:	633b      	str	r3, [r7, #48]	@ 0x30
 8004926:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800492a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e6      	bne.n	8004906 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	60fb      	str	r3, [r7, #12]
   return(result);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3308      	adds	r3, #8
 8004956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004958:	61fa      	str	r2, [r7, #28]
 800495a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69b9      	ldr	r1, [r7, #24]
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	617b      	str	r3, [r7, #20]
   return(result);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e011      	b.n	80049a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3758      	adds	r7, #88	@ 0x58
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049bc:	e04f      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d04b      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fc fdd3 	bl	8001570 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <UART_WaitOnFlagUntilTimeout+0x30>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e04e      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d037      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b80      	cmp	r3, #128	@ 0x80
 80049f2:	d034      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b40      	cmp	r3, #64	@ 0x40
 80049f8:	d031      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d110      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f838 	bl	8004a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e029      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a38:	d111      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f81e 	bl	8004a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00f      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d0a0      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b095      	sub	sp, #84	@ 0x54
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e6      	bne.n	8004a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3308      	adds	r3, #8
 8004ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e5      	bne.n	8004ac0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d118      	bne.n	8004b2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
 8004b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6979      	ldr	r1, [r7, #20]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	613b      	str	r3, [r7, #16]
   return(result);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e6      	bne.n	8004afc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b42:	bf00      	nop
 8004b44:	3754      	adds	r7, #84	@ 0x54
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <memset>:
 8004b4e:	4402      	add	r2, r0
 8004b50:	4603      	mov	r3, r0
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d100      	bne.n	8004b58 <memset+0xa>
 8004b56:	4770      	bx	lr
 8004b58:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5c:	e7f9      	b.n	8004b52 <memset+0x4>
	...

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	4d0d      	ldr	r5, [pc, #52]	@ (8004b98 <__libc_init_array+0x38>)
 8004b64:	4c0d      	ldr	r4, [pc, #52]	@ (8004b9c <__libc_init_array+0x3c>)
 8004b66:	1b64      	subs	r4, r4, r5
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba0 <__libc_init_array+0x40>)
 8004b72:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba4 <__libc_init_array+0x44>)
 8004b74:	f000 fd48 	bl	8005608 <_init>
 8004b78:	1b64      	subs	r4, r4, r5
 8004b7a:	10a4      	asrs	r4, r4, #2
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	08005a40 	.word	0x08005a40
 8004b9c:	08005a40 	.word	0x08005a40
 8004ba0:	08005a40 	.word	0x08005a40
 8004ba4:	08005a44 	.word	0x08005a44

08004ba8 <sinf>:
 8004ba8:	ee10 3a10 	vmov	r3, s0
 8004bac:	b507      	push	{r0, r1, r2, lr}
 8004bae:	4a1f      	ldr	r2, [pc, #124]	@ (8004c2c <sinf+0x84>)
 8004bb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d807      	bhi.n	8004bc8 <sinf+0x20>
 8004bb8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004c30 <sinf+0x88>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	b003      	add	sp, #12
 8004bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc4:	f000 b88e 	b.w	8004ce4 <__kernel_sinf>
 8004bc8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004bcc:	d304      	bcc.n	8004bd8 <sinf+0x30>
 8004bce:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004bd2:	b003      	add	sp, #12
 8004bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bd8:	4668      	mov	r0, sp
 8004bda:	f000 f8cb 	bl	8004d74 <__ieee754_rem_pio2f>
 8004bde:	f000 0003 	and.w	r0, r0, #3
 8004be2:	2801      	cmp	r0, #1
 8004be4:	d00a      	beq.n	8004bfc <sinf+0x54>
 8004be6:	2802      	cmp	r0, #2
 8004be8:	d00f      	beq.n	8004c0a <sinf+0x62>
 8004bea:	b9c0      	cbnz	r0, 8004c1e <sinf+0x76>
 8004bec:	eddd 0a01 	vldr	s1, [sp, #4]
 8004bf0:	ed9d 0a00 	vldr	s0, [sp]
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f000 f875 	bl	8004ce4 <__kernel_sinf>
 8004bfa:	e7ea      	b.n	8004bd2 <sinf+0x2a>
 8004bfc:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c00:	ed9d 0a00 	vldr	s0, [sp]
 8004c04:	f000 f816 	bl	8004c34 <__kernel_cosf>
 8004c08:	e7e3      	b.n	8004bd2 <sinf+0x2a>
 8004c0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c0e:	ed9d 0a00 	vldr	s0, [sp]
 8004c12:	2001      	movs	r0, #1
 8004c14:	f000 f866 	bl	8004ce4 <__kernel_sinf>
 8004c18:	eeb1 0a40 	vneg.f32	s0, s0
 8004c1c:	e7d9      	b.n	8004bd2 <sinf+0x2a>
 8004c1e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c22:	ed9d 0a00 	vldr	s0, [sp]
 8004c26:	f000 f805 	bl	8004c34 <__kernel_cosf>
 8004c2a:	e7f5      	b.n	8004c18 <sinf+0x70>
 8004c2c:	3f490fd8 	.word	0x3f490fd8
 8004c30:	00000000 	.word	0x00000000

08004c34 <__kernel_cosf>:
 8004c34:	ee10 3a10 	vmov	r3, s0
 8004c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c3c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004c40:	eef0 6a40 	vmov.f32	s13, s0
 8004c44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004c48:	d204      	bcs.n	8004c54 <__kernel_cosf+0x20>
 8004c4a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004c4e:	ee17 2a90 	vmov	r2, s15
 8004c52:	b342      	cbz	r2, 8004ca6 <__kernel_cosf+0x72>
 8004c54:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004c58:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004cc4 <__kernel_cosf+0x90>
 8004c5c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004cc8 <__kernel_cosf+0x94>
 8004c60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <__kernel_cosf+0x98>)
 8004c62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004c66:	4293      	cmp	r3, r2
 8004c68:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004cd0 <__kernel_cosf+0x9c>
 8004c6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004c70:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004cd4 <__kernel_cosf+0xa0>
 8004c74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004c78:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004cd8 <__kernel_cosf+0xa4>
 8004c7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004c80:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004cdc <__kernel_cosf+0xa8>
 8004c84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004c88:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004c8c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004c90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004c94:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9c:	d804      	bhi.n	8004ca8 <__kernel_cosf+0x74>
 8004c9e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004ca2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004ca6:	4770      	bx	lr
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce0 <__kernel_cosf+0xac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bf9a      	itte	ls
 8004cae:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004cb2:	ee07 3a10 	vmovls	s14, r3
 8004cb6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004cba:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cc2:	e7ec      	b.n	8004c9e <__kernel_cosf+0x6a>
 8004cc4:	ad47d74e 	.word	0xad47d74e
 8004cc8:	310f74f6 	.word	0x310f74f6
 8004ccc:	3e999999 	.word	0x3e999999
 8004cd0:	b493f27c 	.word	0xb493f27c
 8004cd4:	37d00d01 	.word	0x37d00d01
 8004cd8:	bab60b61 	.word	0xbab60b61
 8004cdc:	3d2aaaab 	.word	0x3d2aaaab
 8004ce0:	3f480000 	.word	0x3f480000

08004ce4 <__kernel_sinf>:
 8004ce4:	ee10 3a10 	vmov	r3, s0
 8004ce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004cf0:	d204      	bcs.n	8004cfc <__kernel_sinf+0x18>
 8004cf2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cf6:	ee17 3a90 	vmov	r3, s15
 8004cfa:	b35b      	cbz	r3, 8004d54 <__kernel_sinf+0x70>
 8004cfc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004d00:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004d58 <__kernel_sinf+0x74>
 8004d04:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004d5c <__kernel_sinf+0x78>
 8004d08:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d0c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004d60 <__kernel_sinf+0x7c>
 8004d10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d14:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004d64 <__kernel_sinf+0x80>
 8004d18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d1c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004d68 <__kernel_sinf+0x84>
 8004d20:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004d24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d28:	b930      	cbnz	r0, 8004d38 <__kernel_sinf+0x54>
 8004d2a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004d6c <__kernel_sinf+0x88>
 8004d2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d32:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004d36:	4770      	bx	lr
 8004d38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004d3c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004d40:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004d44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004d48:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004d70 <__kernel_sinf+0x8c>
 8004d4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004d50:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	2f2ec9d3 	.word	0x2f2ec9d3
 8004d5c:	b2d72f34 	.word	0xb2d72f34
 8004d60:	3638ef1b 	.word	0x3638ef1b
 8004d64:	b9500d01 	.word	0xb9500d01
 8004d68:	3c088889 	.word	0x3c088889
 8004d6c:	be2aaaab 	.word	0xbe2aaaab
 8004d70:	3e2aaaab 	.word	0x3e2aaaab

08004d74 <__ieee754_rem_pio2f>:
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	ee10 6a10 	vmov	r6, s0
 8004d7a:	4b88      	ldr	r3, [pc, #544]	@ (8004f9c <__ieee754_rem_pio2f+0x228>)
 8004d7c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004d80:	429d      	cmp	r5, r3
 8004d82:	b087      	sub	sp, #28
 8004d84:	4604      	mov	r4, r0
 8004d86:	d805      	bhi.n	8004d94 <__ieee754_rem_pio2f+0x20>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	ed80 0a00 	vstr	s0, [r0]
 8004d8e:	6043      	str	r3, [r0, #4]
 8004d90:	2000      	movs	r0, #0
 8004d92:	e022      	b.n	8004dda <__ieee754_rem_pio2f+0x66>
 8004d94:	4b82      	ldr	r3, [pc, #520]	@ (8004fa0 <__ieee754_rem_pio2f+0x22c>)
 8004d96:	429d      	cmp	r5, r3
 8004d98:	d83a      	bhi.n	8004e10 <__ieee754_rem_pio2f+0x9c>
 8004d9a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004fa4 <__ieee754_rem_pio2f+0x230>
 8004da4:	4a80      	ldr	r2, [pc, #512]	@ (8004fa8 <__ieee754_rem_pio2f+0x234>)
 8004da6:	f023 030f 	bic.w	r3, r3, #15
 8004daa:	dd18      	ble.n	8004dde <__ieee754_rem_pio2f+0x6a>
 8004dac:	4293      	cmp	r3, r2
 8004dae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004db2:	bf09      	itett	eq
 8004db4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004fac <__ieee754_rem_pio2f+0x238>
 8004db8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004fb0 <__ieee754_rem_pio2f+0x23c>
 8004dbc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004fb4 <__ieee754_rem_pio2f+0x240>
 8004dc0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004dc4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dcc:	ed80 7a00 	vstr	s14, [r0]
 8004dd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004dd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8004dd8:	2001      	movs	r0, #1
 8004dda:	b007      	add	sp, #28
 8004ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dde:	4293      	cmp	r3, r2
 8004de0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004de4:	bf09      	itett	eq
 8004de6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004fac <__ieee754_rem_pio2f+0x238>
 8004dea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004fb0 <__ieee754_rem_pio2f+0x23c>
 8004dee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004fb4 <__ieee754_rem_pio2f+0x240>
 8004df2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004df6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dfe:	ed80 7a00 	vstr	s14, [r0]
 8004e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e06:	edc0 7a01 	vstr	s15, [r0, #4]
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	e7e4      	b.n	8004dda <__ieee754_rem_pio2f+0x66>
 8004e10:	4b69      	ldr	r3, [pc, #420]	@ (8004fb8 <__ieee754_rem_pio2f+0x244>)
 8004e12:	429d      	cmp	r5, r3
 8004e14:	d873      	bhi.n	8004efe <__ieee754_rem_pio2f+0x18a>
 8004e16:	f000 f8dd 	bl	8004fd4 <fabsf>
 8004e1a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004fbc <__ieee754_rem_pio2f+0x248>
 8004e1e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004e22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e2e:	ee17 0a90 	vmov	r0, s15
 8004e32:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004fa4 <__ieee754_rem_pio2f+0x230>
 8004e36:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004e3a:	281f      	cmp	r0, #31
 8004e3c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004fb0 <__ieee754_rem_pio2f+0x23c>
 8004e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e44:	eeb1 6a47 	vneg.f32	s12, s14
 8004e48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004e4c:	ee16 1a90 	vmov	r1, s13
 8004e50:	dc09      	bgt.n	8004e66 <__ieee754_rem_pio2f+0xf2>
 8004e52:	4a5b      	ldr	r2, [pc, #364]	@ (8004fc0 <__ieee754_rem_pio2f+0x24c>)
 8004e54:	1e47      	subs	r7, r0, #1
 8004e56:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004e5a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8004e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d107      	bne.n	8004e76 <__ieee754_rem_pio2f+0x102>
 8004e66:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8004e6a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8004e6e:	2a08      	cmp	r2, #8
 8004e70:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004e74:	dc14      	bgt.n	8004ea0 <__ieee754_rem_pio2f+0x12c>
 8004e76:	6021      	str	r1, [r4, #0]
 8004e78:	ed94 7a00 	vldr	s14, [r4]
 8004e7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004e80:	2e00      	cmp	r6, #0
 8004e82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004e86:	ed84 0a01 	vstr	s0, [r4, #4]
 8004e8a:	daa6      	bge.n	8004dda <__ieee754_rem_pio2f+0x66>
 8004e8c:	eeb1 7a47 	vneg.f32	s14, s14
 8004e90:	eeb1 0a40 	vneg.f32	s0, s0
 8004e94:	ed84 7a00 	vstr	s14, [r4]
 8004e98:	ed84 0a01 	vstr	s0, [r4, #4]
 8004e9c:	4240      	negs	r0, r0
 8004e9e:	e79c      	b.n	8004dda <__ieee754_rem_pio2f+0x66>
 8004ea0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004fac <__ieee754_rem_pio2f+0x238>
 8004ea4:	eef0 6a40 	vmov.f32	s13, s0
 8004ea8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004eac:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004eb0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004eb4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004fb4 <__ieee754_rem_pio2f+0x240>
 8004eb8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004ebc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004ec0:	ee15 2a90 	vmov	r2, s11
 8004ec4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004ec8:	1a5b      	subs	r3, r3, r1
 8004eca:	2b19      	cmp	r3, #25
 8004ecc:	dc04      	bgt.n	8004ed8 <__ieee754_rem_pio2f+0x164>
 8004ece:	edc4 5a00 	vstr	s11, [r4]
 8004ed2:	eeb0 0a66 	vmov.f32	s0, s13
 8004ed6:	e7cf      	b.n	8004e78 <__ieee754_rem_pio2f+0x104>
 8004ed8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004fc4 <__ieee754_rem_pio2f+0x250>
 8004edc:	eeb0 0a66 	vmov.f32	s0, s13
 8004ee0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004ee4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004ee8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004fc8 <__ieee754_rem_pio2f+0x254>
 8004eec:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004ef0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004ef4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004ef8:	ed84 7a00 	vstr	s14, [r4]
 8004efc:	e7bc      	b.n	8004e78 <__ieee754_rem_pio2f+0x104>
 8004efe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004f02:	d306      	bcc.n	8004f12 <__ieee754_rem_pio2f+0x19e>
 8004f04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004f08:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f0c:	edc0 7a00 	vstr	s15, [r0]
 8004f10:	e73e      	b.n	8004d90 <__ieee754_rem_pio2f+0x1c>
 8004f12:	15ea      	asrs	r2, r5, #23
 8004f14:	3a86      	subs	r2, #134	@ 0x86
 8004f16:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004f22:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004fcc <__ieee754_rem_pio2f+0x258>
 8004f26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f2e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004f32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004f3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f42:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004f46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f52:	edcd 7a05 	vstr	s15, [sp, #20]
 8004f56:	d11e      	bne.n	8004f96 <__ieee754_rem_pio2f+0x222>
 8004f58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2302      	movne	r3, #2
 8004f66:	491a      	ldr	r1, [pc, #104]	@ (8004fd0 <__ieee754_rem_pio2f+0x25c>)
 8004f68:	9101      	str	r1, [sp, #4]
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	9100      	str	r1, [sp, #0]
 8004f6e:	a803      	add	r0, sp, #12
 8004f70:	4621      	mov	r1, r4
 8004f72:	f000 f837 	bl	8004fe4 <__kernel_rem_pio2f>
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	f6bf af2f 	bge.w	8004dda <__ieee754_rem_pio2f+0x66>
 8004f7c:	edd4 7a00 	vldr	s15, [r4]
 8004f80:	eef1 7a67 	vneg.f32	s15, s15
 8004f84:	edc4 7a00 	vstr	s15, [r4]
 8004f88:	edd4 7a01 	vldr	s15, [r4, #4]
 8004f8c:	eef1 7a67 	vneg.f32	s15, s15
 8004f90:	edc4 7a01 	vstr	s15, [r4, #4]
 8004f94:	e782      	b.n	8004e9c <__ieee754_rem_pio2f+0x128>
 8004f96:	2303      	movs	r3, #3
 8004f98:	e7e5      	b.n	8004f66 <__ieee754_rem_pio2f+0x1f2>
 8004f9a:	bf00      	nop
 8004f9c:	3f490fd8 	.word	0x3f490fd8
 8004fa0:	4016cbe3 	.word	0x4016cbe3
 8004fa4:	3fc90f80 	.word	0x3fc90f80
 8004fa8:	3fc90fd0 	.word	0x3fc90fd0
 8004fac:	37354400 	.word	0x37354400
 8004fb0:	37354443 	.word	0x37354443
 8004fb4:	2e85a308 	.word	0x2e85a308
 8004fb8:	43490f80 	.word	0x43490f80
 8004fbc:	3f22f984 	.word	0x3f22f984
 8004fc0:	08005668 	.word	0x08005668
 8004fc4:	2e85a300 	.word	0x2e85a300
 8004fc8:	248d3132 	.word	0x248d3132
 8004fcc:	43800000 	.word	0x43800000
 8004fd0:	080056e8 	.word	0x080056e8

08004fd4 <fabsf>:
 8004fd4:	ee10 3a10 	vmov	r3, s0
 8004fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fdc:	ee00 3a10 	vmov	s0, r3
 8004fe0:	4770      	bx	lr
	...

08004fe4 <__kernel_rem_pio2f>:
 8004fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	ed2d 8b04 	vpush	{d8-d9}
 8004fec:	b0d9      	sub	sp, #356	@ 0x164
 8004fee:	4690      	mov	r8, r2
 8004ff0:	9001      	str	r0, [sp, #4]
 8004ff2:	4ab6      	ldr	r2, [pc, #728]	@ (80052cc <__kernel_rem_pio2f+0x2e8>)
 8004ff4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004ff6:	f118 0f04 	cmn.w	r8, #4
 8004ffa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8004ffe:	460f      	mov	r7, r1
 8005000:	f103 3bff 	add.w	fp, r3, #4294967295
 8005004:	db26      	blt.n	8005054 <__kernel_rem_pio2f+0x70>
 8005006:	f1b8 0203 	subs.w	r2, r8, #3
 800500a:	bf48      	it	mi
 800500c:	f108 0204 	addmi.w	r2, r8, #4
 8005010:	10d2      	asrs	r2, r2, #3
 8005012:	1c55      	adds	r5, r2, #1
 8005014:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005016:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 800501a:	00e8      	lsls	r0, r5, #3
 800501c:	eba2 060b 	sub.w	r6, r2, fp
 8005020:	9002      	str	r0, [sp, #8]
 8005022:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005026:	eb0a 0c0b 	add.w	ip, sl, fp
 800502a:	ac1c      	add	r4, sp, #112	@ 0x70
 800502c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005030:	2000      	movs	r0, #0
 8005032:	4560      	cmp	r0, ip
 8005034:	dd10      	ble.n	8005058 <__kernel_rem_pio2f+0x74>
 8005036:	a91c      	add	r1, sp, #112	@ 0x70
 8005038:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800503c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005040:	2600      	movs	r6, #0
 8005042:	4556      	cmp	r6, sl
 8005044:	dc24      	bgt.n	8005090 <__kernel_rem_pio2f+0xac>
 8005046:	f8dd e004 	ldr.w	lr, [sp, #4]
 800504a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 800504e:	4684      	mov	ip, r0
 8005050:	2400      	movs	r4, #0
 8005052:	e016      	b.n	8005082 <__kernel_rem_pio2f+0x9e>
 8005054:	2200      	movs	r2, #0
 8005056:	e7dc      	b.n	8005012 <__kernel_rem_pio2f+0x2e>
 8005058:	42c6      	cmn	r6, r0
 800505a:	bf5d      	ittte	pl
 800505c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8005060:	ee07 1a90 	vmovpl	s15, r1
 8005064:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005068:	eef0 7a47 	vmovmi.f32	s15, s14
 800506c:	ece4 7a01 	vstmia	r4!, {s15}
 8005070:	3001      	adds	r0, #1
 8005072:	e7de      	b.n	8005032 <__kernel_rem_pio2f+0x4e>
 8005074:	ecfe 6a01 	vldmia	lr!, {s13}
 8005078:	ed3c 7a01 	vldmdb	ip!, {s14}
 800507c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005080:	3401      	adds	r4, #1
 8005082:	455c      	cmp	r4, fp
 8005084:	ddf6      	ble.n	8005074 <__kernel_rem_pio2f+0x90>
 8005086:	ece9 7a01 	vstmia	r9!, {s15}
 800508a:	3601      	adds	r6, #1
 800508c:	3004      	adds	r0, #4
 800508e:	e7d8      	b.n	8005042 <__kernel_rem_pio2f+0x5e>
 8005090:	a908      	add	r1, sp, #32
 8005092:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005096:	9104      	str	r1, [sp, #16]
 8005098:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800509a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80052d8 <__kernel_rem_pio2f+0x2f4>
 800509e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80052d4 <__kernel_rem_pio2f+0x2f0>
 80050a2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80050a6:	9203      	str	r2, [sp, #12]
 80050a8:	4654      	mov	r4, sl
 80050aa:	00a2      	lsls	r2, r4, #2
 80050ac:	9205      	str	r2, [sp, #20]
 80050ae:	aa58      	add	r2, sp, #352	@ 0x160
 80050b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80050b4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80050b8:	a944      	add	r1, sp, #272	@ 0x110
 80050ba:	aa08      	add	r2, sp, #32
 80050bc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80050c0:	4694      	mov	ip, r2
 80050c2:	4626      	mov	r6, r4
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	dc4c      	bgt.n	8005162 <__kernel_rem_pio2f+0x17e>
 80050c8:	4628      	mov	r0, r5
 80050ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050ce:	f000 f9f1 	bl	80054b4 <scalbnf>
 80050d2:	eeb0 8a40 	vmov.f32	s16, s0
 80050d6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80050da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80050de:	f000 fa4f 	bl	8005580 <floorf>
 80050e2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80050e6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80050ea:	2d00      	cmp	r5, #0
 80050ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050f0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80050f4:	ee17 9a90 	vmov	r9, s15
 80050f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005100:	dd41      	ble.n	8005186 <__kernel_rem_pio2f+0x1a2>
 8005102:	f104 3cff 	add.w	ip, r4, #4294967295
 8005106:	a908      	add	r1, sp, #32
 8005108:	f1c5 0e08 	rsb	lr, r5, #8
 800510c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005110:	fa46 f00e 	asr.w	r0, r6, lr
 8005114:	4481      	add	r9, r0
 8005116:	fa00 f00e 	lsl.w	r0, r0, lr
 800511a:	1a36      	subs	r6, r6, r0
 800511c:	f1c5 0007 	rsb	r0, r5, #7
 8005120:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005124:	4106      	asrs	r6, r0
 8005126:	2e00      	cmp	r6, #0
 8005128:	dd3c      	ble.n	80051a4 <__kernel_rem_pio2f+0x1c0>
 800512a:	f04f 0e00 	mov.w	lr, #0
 800512e:	f109 0901 	add.w	r9, r9, #1
 8005132:	4670      	mov	r0, lr
 8005134:	4574      	cmp	r4, lr
 8005136:	dc68      	bgt.n	800520a <__kernel_rem_pio2f+0x226>
 8005138:	2d00      	cmp	r5, #0
 800513a:	dd03      	ble.n	8005144 <__kernel_rem_pio2f+0x160>
 800513c:	2d01      	cmp	r5, #1
 800513e:	d074      	beq.n	800522a <__kernel_rem_pio2f+0x246>
 8005140:	2d02      	cmp	r5, #2
 8005142:	d07d      	beq.n	8005240 <__kernel_rem_pio2f+0x25c>
 8005144:	2e02      	cmp	r6, #2
 8005146:	d12d      	bne.n	80051a4 <__kernel_rem_pio2f+0x1c0>
 8005148:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800514c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005150:	b340      	cbz	r0, 80051a4 <__kernel_rem_pio2f+0x1c0>
 8005152:	4628      	mov	r0, r5
 8005154:	9306      	str	r3, [sp, #24]
 8005156:	f000 f9ad 	bl	80054b4 <scalbnf>
 800515a:	9b06      	ldr	r3, [sp, #24]
 800515c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005160:	e020      	b.n	80051a4 <__kernel_rem_pio2f+0x1c0>
 8005162:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005166:	3e01      	subs	r6, #1
 8005168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800516c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005170:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005174:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005178:	ecac 0a01 	vstmia	ip!, {s0}
 800517c:	ed30 0a01 	vldmdb	r0!, {s0}
 8005180:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005184:	e79e      	b.n	80050c4 <__kernel_rem_pio2f+0xe0>
 8005186:	d105      	bne.n	8005194 <__kernel_rem_pio2f+0x1b0>
 8005188:	1e60      	subs	r0, r4, #1
 800518a:	a908      	add	r1, sp, #32
 800518c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005190:	11f6      	asrs	r6, r6, #7
 8005192:	e7c8      	b.n	8005126 <__kernel_rem_pio2f+0x142>
 8005194:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005198:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	da31      	bge.n	8005206 <__kernel_rem_pio2f+0x222>
 80051a2:	2600      	movs	r6, #0
 80051a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80051a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ac:	f040 8098 	bne.w	80052e0 <__kernel_rem_pio2f+0x2fc>
 80051b0:	1e60      	subs	r0, r4, #1
 80051b2:	2200      	movs	r2, #0
 80051b4:	4550      	cmp	r0, sl
 80051b6:	da4b      	bge.n	8005250 <__kernel_rem_pio2f+0x26c>
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d065      	beq.n	8005288 <__kernel_rem_pio2f+0x2a4>
 80051bc:	3c01      	subs	r4, #1
 80051be:	ab08      	add	r3, sp, #32
 80051c0:	3d08      	subs	r5, #8
 80051c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f8      	beq.n	80051bc <__kernel_rem_pio2f+0x1d8>
 80051ca:	4628      	mov	r0, r5
 80051cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80051d0:	f000 f970 	bl	80054b4 <scalbnf>
 80051d4:	1c63      	adds	r3, r4, #1
 80051d6:	aa44      	add	r2, sp, #272	@ 0x110
 80051d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80052d8 <__kernel_rem_pio2f+0x2f4>
 80051dc:	0099      	lsls	r1, r3, #2
 80051de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80051e2:	4623      	mov	r3, r4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f280 80a9 	bge.w	800533c <__kernel_rem_pio2f+0x358>
 80051ea:	4623      	mov	r3, r4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f2c0 80c7 	blt.w	8005380 <__kernel_rem_pio2f+0x39c>
 80051f2:	aa44      	add	r2, sp, #272	@ 0x110
 80051f4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80051f8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80052d0 <__kernel_rem_pio2f+0x2ec>
 80051fc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 8005200:	2000      	movs	r0, #0
 8005202:	1ae2      	subs	r2, r4, r3
 8005204:	e0b1      	b.n	800536a <__kernel_rem_pio2f+0x386>
 8005206:	2602      	movs	r6, #2
 8005208:	e78f      	b.n	800512a <__kernel_rem_pio2f+0x146>
 800520a:	f852 1b04 	ldr.w	r1, [r2], #4
 800520e:	b948      	cbnz	r0, 8005224 <__kernel_rem_pio2f+0x240>
 8005210:	b121      	cbz	r1, 800521c <__kernel_rem_pio2f+0x238>
 8005212:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005216:	f842 1c04 	str.w	r1, [r2, #-4]
 800521a:	2101      	movs	r1, #1
 800521c:	f10e 0e01 	add.w	lr, lr, #1
 8005220:	4608      	mov	r0, r1
 8005222:	e787      	b.n	8005134 <__kernel_rem_pio2f+0x150>
 8005224:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005228:	e7f5      	b.n	8005216 <__kernel_rem_pio2f+0x232>
 800522a:	f104 3cff 	add.w	ip, r4, #4294967295
 800522e:	aa08      	add	r2, sp, #32
 8005230:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005234:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005238:	a908      	add	r1, sp, #32
 800523a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800523e:	e781      	b.n	8005144 <__kernel_rem_pio2f+0x160>
 8005240:	f104 3cff 	add.w	ip, r4, #4294967295
 8005244:	aa08      	add	r2, sp, #32
 8005246:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800524a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800524e:	e7f3      	b.n	8005238 <__kernel_rem_pio2f+0x254>
 8005250:	a908      	add	r1, sp, #32
 8005252:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005256:	3801      	subs	r0, #1
 8005258:	430a      	orrs	r2, r1
 800525a:	e7ab      	b.n	80051b4 <__kernel_rem_pio2f+0x1d0>
 800525c:	3201      	adds	r2, #1
 800525e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005262:	2e00      	cmp	r6, #0
 8005264:	d0fa      	beq.n	800525c <__kernel_rem_pio2f+0x278>
 8005266:	9905      	ldr	r1, [sp, #20]
 8005268:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800526c:	eb0d 0001 	add.w	r0, sp, r1
 8005270:	18e6      	adds	r6, r4, r3
 8005272:	a91c      	add	r1, sp, #112	@ 0x70
 8005274:	f104 0c01 	add.w	ip, r4, #1
 8005278:	384c      	subs	r0, #76	@ 0x4c
 800527a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800527e:	4422      	add	r2, r4
 8005280:	4562      	cmp	r2, ip
 8005282:	da04      	bge.n	800528e <__kernel_rem_pio2f+0x2aa>
 8005284:	4614      	mov	r4, r2
 8005286:	e710      	b.n	80050aa <__kernel_rem_pio2f+0xc6>
 8005288:	9804      	ldr	r0, [sp, #16]
 800528a:	2201      	movs	r2, #1
 800528c:	e7e7      	b.n	800525e <__kernel_rem_pio2f+0x27a>
 800528e:	9903      	ldr	r1, [sp, #12]
 8005290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005294:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005298:	9105      	str	r1, [sp, #20]
 800529a:	ee07 1a90 	vmov	s15, r1
 800529e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a2:	2400      	movs	r4, #0
 80052a4:	ece6 7a01 	vstmia	r6!, {s15}
 80052a8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 80052ac:	46b1      	mov	r9, r6
 80052ae:	455c      	cmp	r4, fp
 80052b0:	dd04      	ble.n	80052bc <__kernel_rem_pio2f+0x2d8>
 80052b2:	ece0 7a01 	vstmia	r0!, {s15}
 80052b6:	f10c 0c01 	add.w	ip, ip, #1
 80052ba:	e7e1      	b.n	8005280 <__kernel_rem_pio2f+0x29c>
 80052bc:	ecfe 6a01 	vldmia	lr!, {s13}
 80052c0:	ed39 7a01 	vldmdb	r9!, {s14}
 80052c4:	3401      	adds	r4, #1
 80052c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80052ca:	e7f0      	b.n	80052ae <__kernel_rem_pio2f+0x2ca>
 80052cc:	08005a2c 	.word	0x08005a2c
 80052d0:	08005a00 	.word	0x08005a00
 80052d4:	43800000 	.word	0x43800000
 80052d8:	3b800000 	.word	0x3b800000
 80052dc:	00000000 	.word	0x00000000
 80052e0:	9b02      	ldr	r3, [sp, #8]
 80052e2:	eeb0 0a48 	vmov.f32	s0, s16
 80052e6:	eba3 0008 	sub.w	r0, r3, r8
 80052ea:	f000 f8e3 	bl	80054b4 <scalbnf>
 80052ee:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80052d4 <__kernel_rem_pio2f+0x2f0>
 80052f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	db19      	blt.n	8005330 <__kernel_rem_pio2f+0x34c>
 80052fc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80052d8 <__kernel_rem_pio2f+0x2f4>
 8005300:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005304:	aa08      	add	r2, sp, #32
 8005306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800530a:	3508      	adds	r5, #8
 800530c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005310:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005318:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800531c:	ee10 3a10 	vmov	r3, s0
 8005320:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005324:	ee17 3a90 	vmov	r3, s15
 8005328:	3401      	adds	r4, #1
 800532a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800532e:	e74c      	b.n	80051ca <__kernel_rem_pio2f+0x1e6>
 8005330:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005334:	aa08      	add	r2, sp, #32
 8005336:	ee10 3a10 	vmov	r3, s0
 800533a:	e7f6      	b.n	800532a <__kernel_rem_pio2f+0x346>
 800533c:	a808      	add	r0, sp, #32
 800533e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005342:	9001      	str	r0, [sp, #4]
 8005344:	ee07 0a90 	vmov	s15, r0
 8005348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800534c:	3b01      	subs	r3, #1
 800534e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005352:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005356:	ed62 7a01 	vstmdb	r2!, {s15}
 800535a:	e743      	b.n	80051e4 <__kernel_rem_pio2f+0x200>
 800535c:	ecfc 6a01 	vldmia	ip!, {s13}
 8005360:	ecb5 7a01 	vldmia	r5!, {s14}
 8005364:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005368:	3001      	adds	r0, #1
 800536a:	4550      	cmp	r0, sl
 800536c:	dc01      	bgt.n	8005372 <__kernel_rem_pio2f+0x38e>
 800536e:	4290      	cmp	r0, r2
 8005370:	ddf4      	ble.n	800535c <__kernel_rem_pio2f+0x378>
 8005372:	a858      	add	r0, sp, #352	@ 0x160
 8005374:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005378:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800537c:	3b01      	subs	r3, #1
 800537e:	e735      	b.n	80051ec <__kernel_rem_pio2f+0x208>
 8005380:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005382:	2b02      	cmp	r3, #2
 8005384:	dc09      	bgt.n	800539a <__kernel_rem_pio2f+0x3b6>
 8005386:	2b00      	cmp	r3, #0
 8005388:	dc27      	bgt.n	80053da <__kernel_rem_pio2f+0x3f6>
 800538a:	d040      	beq.n	800540e <__kernel_rem_pio2f+0x42a>
 800538c:	f009 0007 	and.w	r0, r9, #7
 8005390:	b059      	add	sp, #356	@ 0x164
 8005392:	ecbd 8b04 	vpop	{d8-d9}
 8005396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800539c:	2b03      	cmp	r3, #3
 800539e:	d1f5      	bne.n	800538c <__kernel_rem_pio2f+0x3a8>
 80053a0:	aa30      	add	r2, sp, #192	@ 0xc0
 80053a2:	1f0b      	subs	r3, r1, #4
 80053a4:	4413      	add	r3, r2
 80053a6:	461a      	mov	r2, r3
 80053a8:	4620      	mov	r0, r4
 80053aa:	2800      	cmp	r0, #0
 80053ac:	dc50      	bgt.n	8005450 <__kernel_rem_pio2f+0x46c>
 80053ae:	4622      	mov	r2, r4
 80053b0:	2a01      	cmp	r2, #1
 80053b2:	dc5d      	bgt.n	8005470 <__kernel_rem_pio2f+0x48c>
 80053b4:	ab30      	add	r3, sp, #192	@ 0xc0
 80053b6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 80053ba:	440b      	add	r3, r1
 80053bc:	2c01      	cmp	r4, #1
 80053be:	dc67      	bgt.n	8005490 <__kernel_rem_pio2f+0x4ac>
 80053c0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80053c4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	d167      	bne.n	800549c <__kernel_rem_pio2f+0x4b8>
 80053cc:	edc7 6a00 	vstr	s13, [r7]
 80053d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80053d4:	edc7 7a02 	vstr	s15, [r7, #8]
 80053d8:	e7d8      	b.n	800538c <__kernel_rem_pio2f+0x3a8>
 80053da:	ab30      	add	r3, sp, #192	@ 0xc0
 80053dc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 80053e0:	440b      	add	r3, r1
 80053e2:	4622      	mov	r2, r4
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	da24      	bge.n	8005432 <__kernel_rem_pio2f+0x44e>
 80053e8:	b34e      	cbz	r6, 800543e <__kernel_rem_pio2f+0x45a>
 80053ea:	eef1 7a47 	vneg.f32	s15, s14
 80053ee:	edc7 7a00 	vstr	s15, [r7]
 80053f2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80053f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053fa:	aa31      	add	r2, sp, #196	@ 0xc4
 80053fc:	2301      	movs	r3, #1
 80053fe:	429c      	cmp	r4, r3
 8005400:	da20      	bge.n	8005444 <__kernel_rem_pio2f+0x460>
 8005402:	b10e      	cbz	r6, 8005408 <__kernel_rem_pio2f+0x424>
 8005404:	eef1 7a67 	vneg.f32	s15, s15
 8005408:	edc7 7a01 	vstr	s15, [r7, #4]
 800540c:	e7be      	b.n	800538c <__kernel_rem_pio2f+0x3a8>
 800540e:	ab30      	add	r3, sp, #192	@ 0xc0
 8005410:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80052dc <__kernel_rem_pio2f+0x2f8>
 8005414:	440b      	add	r3, r1
 8005416:	2c00      	cmp	r4, #0
 8005418:	da05      	bge.n	8005426 <__kernel_rem_pio2f+0x442>
 800541a:	b10e      	cbz	r6, 8005420 <__kernel_rem_pio2f+0x43c>
 800541c:	eef1 7a67 	vneg.f32	s15, s15
 8005420:	edc7 7a00 	vstr	s15, [r7]
 8005424:	e7b2      	b.n	800538c <__kernel_rem_pio2f+0x3a8>
 8005426:	ed33 7a01 	vldmdb	r3!, {s14}
 800542a:	3c01      	subs	r4, #1
 800542c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005430:	e7f1      	b.n	8005416 <__kernel_rem_pio2f+0x432>
 8005432:	ed73 7a01 	vldmdb	r3!, {s15}
 8005436:	3a01      	subs	r2, #1
 8005438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800543c:	e7d2      	b.n	80053e4 <__kernel_rem_pio2f+0x400>
 800543e:	eef0 7a47 	vmov.f32	s15, s14
 8005442:	e7d4      	b.n	80053ee <__kernel_rem_pio2f+0x40a>
 8005444:	ecb2 7a01 	vldmia	r2!, {s14}
 8005448:	3301      	adds	r3, #1
 800544a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800544e:	e7d6      	b.n	80053fe <__kernel_rem_pio2f+0x41a>
 8005450:	ed72 7a01 	vldmdb	r2!, {s15}
 8005454:	edd2 6a01 	vldr	s13, [r2, #4]
 8005458:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800545c:	3801      	subs	r0, #1
 800545e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005462:	ed82 7a00 	vstr	s14, [r2]
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	edc2 7a01 	vstr	s15, [r2, #4]
 800546e:	e79c      	b.n	80053aa <__kernel_rem_pio2f+0x3c6>
 8005470:	ed73 7a01 	vldmdb	r3!, {s15}
 8005474:	edd3 6a01 	vldr	s13, [r3, #4]
 8005478:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800547c:	3a01      	subs	r2, #1
 800547e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005482:	ed83 7a00 	vstr	s14, [r3]
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	edc3 7a01 	vstr	s15, [r3, #4]
 800548e:	e78f      	b.n	80053b0 <__kernel_rem_pio2f+0x3cc>
 8005490:	ed33 7a01 	vldmdb	r3!, {s14}
 8005494:	3c01      	subs	r4, #1
 8005496:	ee77 7a87 	vadd.f32	s15, s15, s14
 800549a:	e78f      	b.n	80053bc <__kernel_rem_pio2f+0x3d8>
 800549c:	eef1 6a66 	vneg.f32	s13, s13
 80054a0:	eeb1 7a47 	vneg.f32	s14, s14
 80054a4:	edc7 6a00 	vstr	s13, [r7]
 80054a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80054ac:	eef1 7a67 	vneg.f32	s15, s15
 80054b0:	e790      	b.n	80053d4 <__kernel_rem_pio2f+0x3f0>
 80054b2:	bf00      	nop

080054b4 <scalbnf>:
 80054b4:	ee10 3a10 	vmov	r3, s0
 80054b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80054bc:	d02b      	beq.n	8005516 <scalbnf+0x62>
 80054be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80054c2:	d302      	bcc.n	80054ca <scalbnf+0x16>
 80054c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80054c8:	4770      	bx	lr
 80054ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80054ce:	d123      	bne.n	8005518 <scalbnf+0x64>
 80054d0:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <scalbnf+0xb0>)
 80054d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005568 <scalbnf+0xb4>
 80054d6:	4298      	cmp	r0, r3
 80054d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054dc:	db17      	blt.n	800550e <scalbnf+0x5a>
 80054de:	ee10 3a10 	vmov	r3, s0
 80054e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80054e6:	3a19      	subs	r2, #25
 80054e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80054ec:	4288      	cmp	r0, r1
 80054ee:	dd15      	ble.n	800551c <scalbnf+0x68>
 80054f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800556c <scalbnf+0xb8>
 80054f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005570 <scalbnf+0xbc>
 80054f8:	ee10 3a10 	vmov	r3, s0
 80054fc:	eeb0 7a67 	vmov.f32	s14, s15
 8005500:	2b00      	cmp	r3, #0
 8005502:	bfb8      	it	lt
 8005504:	eef0 7a66 	vmovlt.f32	s15, s13
 8005508:	ee27 0a87 	vmul.f32	s0, s15, s14
 800550c:	4770      	bx	lr
 800550e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005574 <scalbnf+0xc0>
 8005512:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005516:	4770      	bx	lr
 8005518:	0dd2      	lsrs	r2, r2, #23
 800551a:	e7e5      	b.n	80054e8 <scalbnf+0x34>
 800551c:	4410      	add	r0, r2
 800551e:	28fe      	cmp	r0, #254	@ 0xfe
 8005520:	dce6      	bgt.n	80054f0 <scalbnf+0x3c>
 8005522:	2800      	cmp	r0, #0
 8005524:	dd06      	ble.n	8005534 <scalbnf+0x80>
 8005526:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800552a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800552e:	ee00 3a10 	vmov	s0, r3
 8005532:	4770      	bx	lr
 8005534:	f110 0f16 	cmn.w	r0, #22
 8005538:	da09      	bge.n	800554e <scalbnf+0x9a>
 800553a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005574 <scalbnf+0xc0>
 800553e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005578 <scalbnf+0xc4>
 8005542:	ee10 3a10 	vmov	r3, s0
 8005546:	eeb0 7a67 	vmov.f32	s14, s15
 800554a:	2b00      	cmp	r3, #0
 800554c:	e7d9      	b.n	8005502 <scalbnf+0x4e>
 800554e:	3019      	adds	r0, #25
 8005550:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005554:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005558:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800557c <scalbnf+0xc8>
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	e7d7      	b.n	8005512 <scalbnf+0x5e>
 8005562:	bf00      	nop
 8005564:	ffff3cb0 	.word	0xffff3cb0
 8005568:	4c000000 	.word	0x4c000000
 800556c:	7149f2ca 	.word	0x7149f2ca
 8005570:	f149f2ca 	.word	0xf149f2ca
 8005574:	0da24260 	.word	0x0da24260
 8005578:	8da24260 	.word	0x8da24260
 800557c:	33000000 	.word	0x33000000

08005580 <floorf>:
 8005580:	ee10 3a10 	vmov	r3, s0
 8005584:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005588:	3a7f      	subs	r2, #127	@ 0x7f
 800558a:	2a16      	cmp	r2, #22
 800558c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005590:	dc2b      	bgt.n	80055ea <floorf+0x6a>
 8005592:	2a00      	cmp	r2, #0
 8005594:	da12      	bge.n	80055bc <floorf+0x3c>
 8005596:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80055fc <floorf+0x7c>
 800559a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800559e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	dd06      	ble.n	80055b6 <floorf+0x36>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da24      	bge.n	80055f6 <floorf+0x76>
 80055ac:	2900      	cmp	r1, #0
 80055ae:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <floorf+0x80>)
 80055b0:	bf08      	it	eq
 80055b2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80055b6:	ee00 3a10 	vmov	s0, r3
 80055ba:	4770      	bx	lr
 80055bc:	4911      	ldr	r1, [pc, #68]	@ (8005604 <floorf+0x84>)
 80055be:	4111      	asrs	r1, r2
 80055c0:	420b      	tst	r3, r1
 80055c2:	d0fa      	beq.n	80055ba <floorf+0x3a>
 80055c4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80055fc <floorf+0x7c>
 80055c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80055cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80055d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d4:	ddef      	ble.n	80055b6 <floorf+0x36>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfbe      	ittt	lt
 80055da:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80055de:	fa40 f202 	asrlt.w	r2, r0, r2
 80055e2:	189b      	addlt	r3, r3, r2
 80055e4:	ea23 0301 	bic.w	r3, r3, r1
 80055e8:	e7e5      	b.n	80055b6 <floorf+0x36>
 80055ea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80055ee:	d3e4      	bcc.n	80055ba <floorf+0x3a>
 80055f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80055f4:	4770      	bx	lr
 80055f6:	2300      	movs	r3, #0
 80055f8:	e7dd      	b.n	80055b6 <floorf+0x36>
 80055fa:	bf00      	nop
 80055fc:	7149f2ca 	.word	0x7149f2ca
 8005600:	bf800000 	.word	0xbf800000
 8005604:	007fffff 	.word	0x007fffff

08005608 <_init>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr

08005614 <_fini>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr
