
Labb4_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800501c  0800501c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005024  08005024  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005024  08005024  00006024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005028  08005028  00006028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800502c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000060  0800508c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800508c  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001311e  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002570  00000000  00000000  0001a1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0001c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0b  00000000  00000000  0001d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023249  00000000  00000000  0001e703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ea7  00000000  00000000  0004194c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d846e  00000000  00000000  000567f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ec61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  0012eca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00133df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f6c 	.word	0x08004f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004f6c 	.word	0x08004f6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <My_Delay>:
/*
 * my = mu = micro
 * Holds for an amount of microseconds.
 */
void My_Delay(uint32_t mysec)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <My_Delay+0x60>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <My_Delay+0x60>)
 80005aa:	f023 0301 	bic.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]
	TIM6->PSC = 79;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <My_Delay+0x60>)
 80005b2:	224f      	movs	r2, #79	@ 0x4f
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 0xFFFF;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <My_Delay+0x60>)
 80005b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <My_Delay+0x60>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->EGR=TIM_EGR_UG;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <My_Delay+0x60>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	615a      	str	r2, [r3, #20]
	TIM6->CR1 |= TIM_CR1_CEN;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <My_Delay+0x60>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <My_Delay+0x60>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6013      	str	r3, [r2, #0]
	while(TIM6->CNT < mysec);
 80005d6:	bf00      	nop
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <My_Delay+0x60>)
 80005da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d8fa      	bhi.n	80005d8 <My_Delay+0x3c>
	TIM6->SR &= ~TIM_SR_UIF;
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <My_Delay+0x60>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <My_Delay+0x60>)
 80005e8:	f023 0301 	bic.w	r3, r3, #1
 80005ec:	6113      	str	r3, [r2, #16]
	//	HAL_Delay( 1 + (mysec / 1000) );
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40001000 	.word	0x40001000

08000600 <TextLCD_SendNibbleWithPulseOnE>:
 *
 *  When sending a byte, use this twice, sending D7-D4 the first time
 *  and D3-D0 the second time.
 ****************************************************************************/
void TextLCD_SendNibbleWithPulseOnE(TextLCDType * hlcd, uint8_t data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	/***** Put nibble when E is low *****/
	data = data & INV_E;
 800060c:	78fb      	ldrb	r3, [r7, #3]
 800060e:	f023 0304 	bic.w	r3, r3, #4
 8000612:	b2db      	uxtb	r3, r3
 8000614:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	4619      	mov	r1, r3
 8000620:	1cfa      	adds	r2, r7, #3
 8000622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	f001 f967 	bl	80018fc <HAL_I2C_Master_Transmit>
	My_Delay(2000);
 800062e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000632:	f7ff ffb3 	bl	800059c <My_Delay>

	/***** Now set E to high *****/
	data = data | BIT_E;
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	b2db      	uxtb	r3, r3
 800063e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	4619      	mov	r1, r3
 800064a:	1cfa      	adds	r2, r7, #3
 800064c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2301      	movs	r3, #1
 8000654:	f001 f952 	bl	80018fc <HAL_I2C_Master_Transmit>
	My_Delay(2000);
 8000658:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800065c:	f7ff ff9e 	bl	800059c <My_Delay>

	/***** Then go low again *****/
	data = data & INV_E;
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	f023 0304 	bic.w	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	4619      	mov	r1, r3
 8000674:	1cfa      	adds	r2, r7, #3
 8000676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	f001 f93d 	bl	80018fc <HAL_I2C_Master_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <TextLCD_SendByte>:

void TextLCD_SendByte(
		TextLCDType   * hlcd,
		uint8_t         data,
		GPIO_PinState   RS)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
 8000698:	4613      	mov	r3, r2
 800069a:	70bb      	strb	r3, [r7, #2]
	// Place the data bits in the top four bits. The lowest four will
	// be for control.
	uint8_t d_lo = (data & 0x0F) << 4;
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t d_hi = (data & 0xF0);
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	f023 030f 	bic.w	r3, r3, #15
 80006a8:	73bb      	strb	r3, [r7, #14]

	// Set the control bits for the message.
	uint8_t ctrl = 0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	737b      	strb	r3, [r7, #13]
	ctrl = (BT == GPIO_PIN_SET) ? (ctrl | BIT_BT) : (ctrl & INV_BT);
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <TextLCD_SendByte+0x9c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d104      	bne.n	80006c0 <TextLCD_SendByte+0x34>
 80006b6:	7b7b      	ldrb	r3, [r7, #13]
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	e003      	b.n	80006c8 <TextLCD_SendByte+0x3c>
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	f023 0308 	bic.w	r3, r3, #8
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	737b      	strb	r3, [r7, #13]
	ctrl = (RS == GPIO_PIN_SET) ? (ctrl | BIT_RS) : (ctrl & INV_RS);
 80006ca:	78bb      	ldrb	r3, [r7, #2]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d104      	bne.n	80006da <TextLCD_SendByte+0x4e>
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	e003      	b.n	80006e2 <TextLCD_SendByte+0x56>
 80006da:	7b7b      	ldrb	r3, [r7, #13]
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	737b      	strb	r3, [r7, #13]
	ctrl = (RW == GPIO_PIN_SET) ? (ctrl | BIT_RW) : (ctrl & INV_RW);
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <TextLCD_SendByte+0xa0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d104      	bne.n	80006f6 <TextLCD_SendByte+0x6a>
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <TextLCD_SendByte+0x72>
 80006f6:	7b7b      	ldrb	r3, [r7, #13]
 80006f8:	f023 0302 	bic.w	r3, r3, #2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	737b      	strb	r3, [r7, #13]

	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_hi | ctrl) );
 8000700:	7bba      	ldrb	r2, [r7, #14]
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	4313      	orrs	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff78 	bl	8000600 <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_lo | ctrl) );
 8000710:	7bfa      	ldrb	r2, [r7, #15]
 8000712:	7b7b      	ldrb	r3, [r7, #13]
 8000714:	4313      	orrs	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff70 	bl	8000600 <TextLCD_SendNibbleWithPulseOnE>
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	2000007c 	.word	0x2000007c

08000730 <TextLCD_Init>:

void TextLCD_Init(
		TextLCDType         *   hlcd,
		I2C_HandleTypeDef   *   hi2c,
		uint8_t                 device_address)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	71fb      	strb	r3, [r7, #7]
	hlcd->hi2c           = hi2c;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	601a      	str	r2, [r3, #0]
	hlcd->device_address = device_address;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	711a      	strb	r2, [r3, #4]

	uint8_t data = 0x30; // b# 0011 1000
 800074a:	2330      	movs	r3, #48	@ 0x30
 800074c:	75fb      	strb	r3, [r7, #23]
	uint8_t ctrl = 0x08;
 800074e:	2308      	movs	r3, #8
 8000750:	75bb      	strb	r3, [r7, #22]

	My_Delay(50000);
 8000752:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000756:	f7ff ff21 	bl	800059c <My_Delay>

	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 800075a:	7dfa      	ldrb	r2, [r7, #23]
 800075c:	7dbb      	ldrb	r3, [r7, #22]
 800075e:	4313      	orrs	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff ff4b 	bl	8000600 <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 800076a:	7dfa      	ldrb	r2, [r7, #23]
 800076c:	7dbb      	ldrb	r3, [r7, #22]
 800076e:	4313      	orrs	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f7ff ff43 	bl	8000600 <TextLCD_SendNibbleWithPulseOnE>
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 800077a:	7dfa      	ldrb	r2, [r7, #23]
 800077c:	7dbb      	ldrb	r3, [r7, #22]
 800077e:	4313      	orrs	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f7ff ff3b 	bl	8000600 <TextLCD_SendNibbleWithPulseOnE>

	data = 0x20;
 800078a:	2320      	movs	r3, #32
 800078c:	75fb      	strb	r3, [r7, #23]
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
 800078e:	7dfa      	ldrb	r2, [r7, #23]
 8000790:	7dbb      	ldrb	r3, [r7, #22]
 8000792:	4313      	orrs	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f7ff ff31 	bl	8000600 <TextLCD_SendNibbleWithPulseOnE>

	// Finished setting up 4-bit mode. Let's configure display

	// hlcd, data, rs, rw
	TextLCD_SendByte(hlcd, 0x28, 0); //N=1 (2 line), F=0 (5x8)
 800079e:	2200      	movs	r2, #0
 80007a0:	2128      	movs	r1, #40	@ 0x28
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff ff72 	bl	800068c <TextLCD_SendByte>
	TextLCD_SendByte(hlcd, 0x0F, 0); //Display off, Cursor Off, Blink off
 80007a8:	2200      	movs	r2, #0
 80007aa:	210f      	movs	r1, #15
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff ff6d 	bl	800068c <TextLCD_SendByte>

	TextLCD_SendByte(hlcd, 0x01, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f7ff ff68 	bl	800068c <TextLCD_SendByte>
	My_Delay(5000);
 80007bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007c0:	f7ff feec 	bl	800059c <My_Delay>

	TextLCD_SendByte(hlcd, 0x06, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2106      	movs	r1, #6
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f7ff ff5f 	bl	800068c <TextLCD_SendByte>
	TextLCD_SendByte(hlcd, 0x0C, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	210c      	movs	r1, #12
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff ff5a 	bl	800068c <TextLCD_SendByte>
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <TextLCD_SetDDRAMAdr>:
	TextLCD_SnedByte(hlcd, 0x01, GPIO_PIN_RESET);
	My_Delay(41);
}

void TextLCD_SetDDRAMAdr(TextLCDType * hlcd, uint8_t adr)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	TextLCD_SendByte(hlcd,0x80|(adr&0x7F),GPIO_PIN_RESET);
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff47 	bl	800068c <TextLCD_SendByte>
	My_Delay(41);
 80007fe:	2029      	movs	r0, #41	@ 0x29
 8000800:	f7ff fecc 	bl	800059c <My_Delay>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <TextLCD_Position>:


void TextLCD_Position	(TextLCDType * hlcd, int col, int row)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	static const uint8_t row_offsets[] = {0x00,0x40};
	if(row<0) row = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	da01      	bge.n	8000822 <TextLCD_Position+0x16>
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
	if(row>1) row = 1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b01      	cmp	r3, #1
 8000826:	dd01      	ble.n	800082c <TextLCD_Position+0x20>
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
	TextLCD_SetDDRAMAdr(hlcd, col + row_offsets[row]);
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <TextLCD_Position+0x40>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f7ff ffce 	bl	80007e0 <TextLCD_SetDDRAMAdr>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08004f9c 	.word	0x08004f9c

08000850 <TextLCD_PutChar>:

void TextLCD_PutChar	(TextLCDType * hlcd, char c)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
	TextLCD_SendByte(hlcd, c ,GPIO_PIN_SET);
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff12 	bl	800068c <TextLCD_SendByte>
	My_Delay(41);
 8000868:	2029      	movs	r0, #41	@ 0x29
 800086a:	f7ff fe97 	bl	800059c <My_Delay>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <TextLCD_PutStr>:


void TextLCD_PutStr		(TextLCDType * hlcd, char * str)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	while(*str){
 8000880:	e007      	b.n	8000892 <TextLCD_PutStr+0x1c>
		TextLCD_PutChar(hlcd, *str++);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	603a      	str	r2, [r7, #0]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ffdf 	bl	8000850 <TextLCD_PutChar>
	while(*str){
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f3      	bne.n	8000882 <TextLCD_PutStr+0xc>
	}
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <cd_set>:
struct clock_data{
	uint8_t hrs;
	uint8_t min;
	uint8_t sec;
};
void cd_set(struct clock_data *pcd,uint8_t hrs, uint8_t min, uint8_t sec){
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4603      	mov	r3, r0
 80008b4:	70fb      	strb	r3, [r7, #3]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70bb      	strb	r3, [r7, #2]
 80008ba:	4613      	mov	r3, r2
 80008bc:	707b      	strb	r3, [r7, #1]
	pcd->hrs = hrs;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	78fa      	ldrb	r2, [r7, #3]
 80008c2:	701a      	strb	r2, [r3, #0]
	pcd->min = min;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	78ba      	ldrb	r2, [r7, #2]
 80008c8:	705a      	strb	r2, [r3, #1]
	pcd->sec = sec;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	787a      	ldrb	r2, [r7, #1]
 80008ce:	709a      	strb	r2, [r3, #2]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <cd_tick>:
struct clock_data my_clock;
void cd_tick(struct clock_data *pcd){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	pcd->sec++;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	709a      	strb	r2, [r3, #2]
	if(pcd->sec>=60){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80008f6:	d908      	bls.n	800090a <cd_tick+0x2e>
		pcd->sec = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	709a      	strb	r2, [r3, #2]
		pcd->min++;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	3301      	adds	r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	705a      	strb	r2, [r3, #1]
	}
	if(pcd->min>=60){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000910:	d908      	bls.n	8000924 <cd_tick+0x48>
		pcd->min = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	705a      	strb	r2, [r3, #1]
		pcd->hrs++;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	701a      	strb	r2, [r3, #0]
	}
	if(pcd->hrs>=24){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b17      	cmp	r3, #23
 800092a:	d908      	bls.n	800093e <cd_tick+0x62>
		pcd->hrs = 0;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
		pcd->min = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	705a      	strb	r2, [r3, #1]
		pcd->sec = 0;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	709a      	strb	r2, [r3, #2]
	}

}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim ){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800095c:	d102      	bne.n	8000964 <HAL_TIM_PeriodElapsedCallback+0x18>
		interFlag = 1;
 800095e:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
	}
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	200001f4 	.word	0x200001f4

08000974 <wait_for_button_press>:

void wait_for_button_press(){
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	while(!GPIOC->IDR){
 8000978:	bf00      	nop
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <wait_for_button_press+0x1c>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0fb      	beq.n	800097a <wait_for_button_press+0x6>

	}

}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	48000800 	.word	0x48000800

08000994 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800099a:	f000 fbf3 	bl	8001184 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800099e:	f000 f85d 	bl	8000a5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009a2:	f000 f9a1 	bl	8000ce8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80009a6:	f000 f96f 	bl	8000c88 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80009aa:	f000 f8e9 	bl	8000b80 <MX_TIM2_Init>
	MX_I2C1_Init();
 80009ae:	f000 f8a7 	bl	8000b00 <MX_I2C1_Init>
	MX_TIM6_Init();
 80009b2:	f000 f933 	bl	8000c1c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80009b6:	4823      	ldr	r0, [pc, #140]	@ (8000a44 <main+0xb0>)
 80009b8:	f002 fd9a 	bl	80034f0 <HAL_TIM_Base_Start_IT>
	wait_for_button_press();
 80009bc:	f7ff ffda 	bl	8000974 <wait_for_button_press>
	cd_set(&my_clock,0,0,0);
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	4820      	ldr	r0, [pc, #128]	@ (8000a48 <main+0xb4>)
 80009c8:	f7ff ff6c 	bl	80008a4 <cd_set>
	TextLCDType lcd;
	TextLCD_Init(&lcd,&hi2c1,0x4E); // kanske fel
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	224e      	movs	r2, #78	@ 0x4e
 80009d2:	491e      	ldr	r1, [pc, #120]	@ (8000a4c <main+0xb8>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff feab 	bl	8000730 <TextLCD_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(interFlag){
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <main+0xbc>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0fb      	beq.n	80009da <main+0x46>
			interFlag = 0;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <main+0xbc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
			cd_tick(&my_clock);
 80009e8:	4817      	ldr	r0, [pc, #92]	@ (8000a48 <main+0xb4>)
 80009ea:	f7ff ff77 	bl	80008dc <cd_tick>
			sprintf(timeStr, "%02d:%02d:%02d", my_clock.hrs,my_clock.min,my_clock.sec);
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <main+0xb4>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <main+0xb4>)
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <main+0xb4>)
 80009fc:	789b      	ldrb	r3, [r3, #2]
 80009fe:	1d38      	adds	r0, r7, #4
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	460b      	mov	r3, r1
 8000a04:	4913      	ldr	r1, [pc, #76]	@ (8000a54 <main+0xc0>)
 8000a06:	f003 fe11 	bl	800462c <siprintf>
			TextLCD_Position(&lcd,0,0);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fefa 	bl	800080c <TextLCD_Position>
			TextLCD_PutStr(&lcd, "Tid:");
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	490e      	ldr	r1, [pc, #56]	@ (8000a58 <main+0xc4>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff29 	bl	8000876 <TextLCD_PutStr>
			TextLCD_Position(&lcd,8,1);
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff feed 	bl	800080c <TextLCD_Position>
			TextLCD_PutStr(&lcd,timeStr);
 8000a32:	1d3a      	adds	r2, r7, #4
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff1b 	bl	8000876 <TextLCD_PutStr>
		if(interFlag){
 8000a40:	e7cb      	b.n	80009da <main+0x46>
 8000a42:	bf00      	nop
 8000a44:	200000d4 	.word	0x200000d4
 8000a48:	200001f8 	.word	0x200001f8
 8000a4c:	20000080 	.word	0x20000080
 8000a50:	200001f4 	.word	0x200001f4
 8000a54:	08004f84 	.word	0x08004f84
 8000a58:	08004f94 	.word	0x08004f94

08000a5c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b096      	sub	sp, #88	@ 0x58
 8000a60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2244      	movs	r2, #68	@ 0x44
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fe00 	bl	8004670 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a82:	f001 fb13 	bl	80020ac <HAL_PWREx_ControlVoltageScaling>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a8c:	f000 f9b6 	bl	8000dfc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a90:	2302      	movs	r3, #2
 8000a92:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a98:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000aaa:	230a      	movs	r3, #10
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fb4a 	bl	8002158 <HAL_RCC_OscConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000aca:	f000 f997 	bl	8000dfc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 ff4a 	bl	8002980 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000af2:	f000 f983 	bl	8000dfc <Error_Handler>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3758      	adds	r7, #88	@ 0x58
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <MX_I2C1_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10D19CE4;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b7c <MX_I2C1_Init+0x7c>)
 8000b0e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3a:	480e      	ldr	r0, [pc, #56]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b3c:	f000 fe42 	bl	80017c4 <HAL_I2C_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000b46:	f000 f959 	bl	8000dfc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b4e:	f001 fa07 	bl	8001f60 <HAL_I2CEx_ConfigAnalogFilter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000b58:	f000 f950 	bl	8000dfc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b60:	f001 fa49 	bl	8001ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000b6a:	f000 f947 	bl	8000dfc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000080 	.word	0x20000080
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	10d19ce4 	.word	0x10d19ce4

08000b80 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000ba0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000ba8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bac:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 7999;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bb6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000bba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc8:	4813      	ldr	r0, [pc, #76]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000bca:	f002 fc39 	bl	8003440 <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8000bd4:	f000 f912 	bl	8000dfc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bdc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000be6:	f002 fdde 	bl	80037a6 <HAL_TIM_ConfigClockSource>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8000bf0:	f000 f904 	bl	8000dfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_TIM2_Init+0x98>)
 8000c02:	f002 ffcb 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000c0c:	f000 f8f6 	bl	8000dfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000d4 	.word	0x200000d4

08000c1c <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_TIM6_Init+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 79;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c34:	224f      	movs	r2, #79	@ 0x4f
 8000c36:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 37;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c40:	2225      	movs	r2, #37	@ 0x25
 8000c42:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c4c:	f002 fbf8 	bl	8003440 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8000c56:	f000 f8d1 	bl	8000dfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <MX_TIM6_Init+0x64>)
 8000c68:	f002 ff98 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8000c72:	f000 f8c3 	bl	8000dfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000120 	.word	0x20000120
 8000c84:	40001000 	.word	0x40001000

08000c88 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000c8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ce4 <MX_USART2_UART_Init+0x5c>)
 8000c90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_USART2_UART_Init+0x58>)
 8000ccc:	f002 ffea 	bl	8003ca4 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000cd6:	f000 f891 	bl	8000dfc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000016c 	.word	0x2000016c
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a3b      	ldr	r2, [pc, #236]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a35      	ldr	r2, [pc, #212]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b33      	ldr	r3, [pc, #204]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a29      	ldr	r2, [pc, #164]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_GPIO_Init+0x108>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	21b0      	movs	r1, #176	@ 0xb0
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d66:	f000 fd15 	bl	8001794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d70:	4820      	ldr	r0, [pc, #128]	@ (8000df4 <MX_GPIO_Init+0x10c>)
 8000d72:	f000 fd0f 	bl	8001794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481a      	ldr	r0, [pc, #104]	@ (8000df8 <MX_GPIO_Init+0x110>)
 8000d8e:	f000 fb87 	bl	80014a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000d92:	23b0      	movs	r3, #176	@ 0xb0
 8000d94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f000 fb78 	bl	80014a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000db0:	2340      	movs	r3, #64	@ 0x40
 8000db2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f000 fb6b 	bl	80014a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 8000dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_GPIO_Init+0x10c>)
 8000de4:	f000 fb5c 	bl	80014a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000400 	.word	0x48000400
 8000df8:	48000800 	.word	0x48000800

08000dfc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <Error_Handler+0x8>

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2a:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	@ 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2260      	movs	r2, #96	@ 0x60
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fbfd 	bl	8004670 <memset>
  if(hi2c->Instance==I2C1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <HAL_I2C_MspInit+0xac>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d138      	bne.n	8000ef2 <HAL_I2C_MspInit+0xa2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e80:	2340      	movs	r3, #64	@ 0x40
 8000e82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 ff9b 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e98:	f7ff ffb0 	bl	8000dfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eba:	2312      	movs	r3, #18
 8000ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <HAL_I2C_MspInit+0xb4>)
 8000ed6:	f000 fae3 	bl	80014a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000ee0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_I2C_MspInit+0xb0>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3788      	adds	r7, #136	@ 0x88
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40005400 	.word	0x40005400
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000400 	.word	0x48000400

08000f08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f18:	d114      	bne.n	8000f44 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_TIM_Base_MspInit+0x68>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <HAL_TIM_Base_MspInit+0x68>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_TIM_Base_MspInit+0x68>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201c      	movs	r0, #28
 8000f38:	f000 fa7b 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f3c:	201c      	movs	r0, #28
 8000f3e:	f000 fa94 	bl	800146a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f42:	e010      	b.n	8000f66 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_TIM_Base_MspInit+0x6c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10b      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_TIM_Base_MspInit+0x68>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f52:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <HAL_TIM_Base_MspInit+0x68>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5a:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_TIM_Base_MspInit+0x68>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40001000 	.word	0x40001000

08000f78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a2      	sub	sp, #136	@ 0x88
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2260      	movs	r2, #96	@ 0x60
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fb69 	bl	8004670 <memset>
  if(huart->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a20      	ldr	r2, [pc, #128]	@ (8001024 <HAL_UART_MspInit+0xac>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d138      	bne.n	800101a <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 ff07 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fc0:	f7ff ff1c 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_UART_MspInit+0xb0>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc8:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_UART_MspInit+0xb0>)
 8000fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_UART_MspInit+0xb0>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_UART_MspInit+0xb0>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a11      	ldr	r2, [pc, #68]	@ (8001028 <HAL_UART_MspInit+0xb0>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_UART_MspInit+0xb0>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001006:	2307      	movs	r3, #7
 8001008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001016:	f000 fa43 	bl	80014a0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3788      	adds	r7, #136	@ 0x88
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004400 	.word	0x40004400
 8001028:	40021000 	.word	0x40021000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <NMI_Handler+0x4>

08001034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <MemManage_Handler+0x4>

08001044 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <UsageFault_Handler+0x4>

08001054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001082:	f000 f8db 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f002 fa81 	bl	8003598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200000d4 	.word	0x200000d4

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f003 fad6 	bl	8004680 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000c000 	.word	0x2000c000
 8001100:	00000400 	.word	0x00000400
 8001104:	200001fc 	.word	0x200001fc
 8001108:	20000350 	.word	0x20000350

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f003 fa95 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001162:	f7ff fc17 	bl	8000994 <main>

08001166 <LoopForever>:

LoopForever:
    b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001168:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001174:	0800502c 	.word	0x0800502c
  ldr r2, =_sbss
 8001178:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800117c:	2000034c 	.word	0x2000034c

08001180 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_IRQHandler>
	...

08001184 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_Init+0x3c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_Init+0x3c>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001198:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119a:	2003      	movs	r0, #3
 800119c:	f000 f93e 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a0:	2000      	movs	r0, #0
 80011a2:	f000 f80f 	bl	80011c4 <HAL_InitTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e001      	b.n	80011b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b2:	f7ff fe29 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_InitTick+0x70>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f949 	bl	8001486 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d809      	bhi.n	8001214 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f913 	bl	8001432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_InitTick+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e007      	b.n	8001224 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e004      	b.n	8001224 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e001      	b.n	8001224 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000000c 	.word	0x2000000c
 8001234:	20000004 	.word	0x20000004
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000000c 	.word	0x2000000c
 8001260:	20000200 	.word	0x20000200

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000200 	.word	0x20000200

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e154      	b.n	800175a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8146 	beq.w	8001754 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d005      	beq.n	80014e0 <HAL_GPIO_Init+0x40>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d130      	bne.n	8001542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001516:	2201      	movs	r2, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 0201 	and.w	r2, r3, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b03      	cmp	r3, #3
 800154c:	d017      	beq.n	800157e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d123      	bne.n	80015d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0203 	and.w	r2, r3, #3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a0 	beq.w	8001754 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <HAL_GPIO_Init+0x2d8>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001618:	4a57      	ldr	r2, [pc, #348]	@ (8001778 <HAL_GPIO_Init+0x2d8>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001620:	4b55      	ldr	r3, [pc, #340]	@ (8001778 <HAL_GPIO_Init+0x2d8>)
 8001622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800162c:	4a53      	ldr	r2, [pc, #332]	@ (800177c <HAL_GPIO_Init+0x2dc>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001656:	d019      	beq.n	800168c <HAL_GPIO_Init+0x1ec>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a49      	ldr	r2, [pc, #292]	@ (8001780 <HAL_GPIO_Init+0x2e0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x1e8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a48      	ldr	r2, [pc, #288]	@ (8001784 <HAL_GPIO_Init+0x2e4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1e4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a47      	ldr	r2, [pc, #284]	@ (8001788 <HAL_GPIO_Init+0x2e8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1e0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a46      	ldr	r2, [pc, #280]	@ (800178c <HAL_GPIO_Init+0x2ec>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1dc>
 8001678:	2304      	movs	r3, #4
 800167a:	e008      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 800167c:	2307      	movs	r3, #7
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001680:	2303      	movs	r3, #3
 8001682:	e004      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001684:	2302      	movs	r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 800168c:	2300      	movs	r3, #0
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	f002 0203 	and.w	r2, r2, #3
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	4093      	lsls	r3, r2
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169e:	4937      	ldr	r1, [pc, #220]	@ (800177c <HAL_GPIO_Init+0x2dc>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ac:	4b38      	ldr	r3, [pc, #224]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016fa:	4a25      	ldr	r2, [pc, #148]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800174e:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_GPIO_Init+0x2f0>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f aea3 	bne.w	80014b0 <HAL_GPIO_Init+0x10>
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800
 8001788:	48000c00 	.word	0x48000c00
 800178c:	48001000 	.word	0x48001000
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e08d      	b.n	80018f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fb30 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	@ 0x24
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001814:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001824:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	e006      	b.n	800184c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800184a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d108      	bne.n	8001866 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	e007      	b.n	8001876 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001874:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001888:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001898:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69d9      	ldr	r1, [r3, #28]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	460b      	mov	r3, r1
 800190a:	817b      	strh	r3, [r7, #10]
 800190c:	4613      	mov	r3, r2
 800190e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b20      	cmp	r3, #32
 800191a:	f040 80fd 	bne.w	8001b18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_I2C_Master_Transmit+0x30>
 8001928:	2302      	movs	r3, #2
 800192a:	e0f6      	b.n	8001b1a <HAL_I2C_Master_Transmit+0x21e>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001934:	f7ff fc96 	bl	8001264 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2319      	movs	r3, #25
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f914 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0e1      	b.n	8001b1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2221      	movs	r2, #33	@ 0x21
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2210      	movs	r2, #16
 8001962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	893a      	ldrh	r2, [r7, #8]
 8001976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	2bff      	cmp	r3, #255	@ 0xff
 8001986:	d906      	bls.n	8001996 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	22ff      	movs	r2, #255	@ 0xff
 800198c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800198e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e007      	b.n	80019a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d024      	beq.n	80019f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	8979      	ldrh	r1, [r7, #10]
 80019ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001b24 <HAL_I2C_Master_Transmit+0x228>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fa83 	bl	8001efc <I2C_TransferConfig>
 80019f6:	e066      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	8979      	ldrh	r1, [r7, #10]
 8001a00:	4b48      	ldr	r3, [pc, #288]	@ (8001b24 <HAL_I2C_Master_Transmit+0x228>)
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa78 	bl	8001efc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a0c:	e05b      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	6a39      	ldr	r1, [r7, #32]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f907 	bl	8001c26 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07b      	b.n	8001b1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d034      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ca>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d130      	bne.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f880 	bl	8001b74 <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e04d      	b.n	8001b1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2bff      	cmp	r3, #255	@ 0xff
 8001a86:	d90e      	bls.n	8001aa6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	22ff      	movs	r2, #255	@ 0xff
 8001a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	8979      	ldrh	r1, [r7, #10]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fa2c 	bl	8001efc <I2C_TransferConfig>
 8001aa4:	e00f      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fa1b 	bl	8001efc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d19e      	bne.n	8001a0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	6a39      	ldr	r1, [r7, #32]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f8ed 	bl	8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e01a      	b.n	8001b1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_I2C_Master_Transmit+0x22c>)
 8001af8:	400b      	ands	r3, r1
 8001afa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	80002000 	.word	0x80002000
 8001b28:	fe00e800 	.word	0xfe00e800

08001b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d007      	beq.n	8001b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	619a      	str	r2, [r3, #24]
  }
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	e03b      	b.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	6839      	ldr	r1, [r7, #0]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f8d6 	bl	8001d3c <I2C_IsErrorOccurred>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e041      	b.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d02d      	beq.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba2:	f7ff fb5f 	bl	8001264 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d302      	bcc.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d122      	bne.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d113      	bne.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4013      	ands	r3, r2
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d0b4      	beq.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c32:	e033      	b.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f87f 	bl	8001d3c <I2C_IsErrorOccurred>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e031      	b.n	8001cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d025      	beq.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c50:	f7ff fb08 	bl	8001264 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d302      	bcc.n	8001c66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11a      	bne.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d013      	beq.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e007      	b.n	8001cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d1c4      	bne.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc0:	e02f      	b.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f838 	bl	8001d3c <I2C_IsErrorOccurred>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e02d      	b.n	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd6:	f7ff fac5 	bl	8001264 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d302      	bcc.n	8001cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d11a      	bne.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d013      	beq.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f043 0220 	orr.w	r2, r3, #32
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e007      	b.n	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d1c8      	bne.n	8001cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d068      	beq.n	8001e3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d70:	e049      	b.n	8001e06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d045      	beq.n	8001e06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d7a:	f7ff fa73 	bl	8001264 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <I2C_IsErrorOccurred+0x54>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d13a      	bne.n	8001e06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001da2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001db2:	d121      	bne.n	8001df8 <I2C_IsErrorOccurred+0xbc>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dba:	d01d      	beq.n	8001df8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001dbc:	7cfb      	ldrb	r3, [r7, #19]
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d01a      	beq.n	8001df8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001dd2:	f7ff fa47 	bl	8001264 <HAL_GetTick>
 8001dd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd8:	e00e      	b.n	8001df8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dda:	f7ff fa43 	bl	8001264 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b19      	cmp	r3, #25
 8001de6:	d907      	bls.n	8001df8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f043 0320 	orr.w	r3, r3, #32
 8001dee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001df6:	e006      	b.n	8001e06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d1e9      	bne.n	8001dda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d003      	beq.n	8001e1c <I2C_IsErrorOccurred+0xe0>
 8001e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0aa      	beq.n	8001d72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01c      	beq.n	8001eea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff fe3b 	bl	8001b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <I2C_IsErrorOccurred+0x1bc>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001eea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3728      	adds	r7, #40	@ 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	fe00e800 	.word	0xfe00e800

08001efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	817b      	strh	r3, [r7, #10]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <I2C_TransferConfig+0x60>)
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	ea02 0103 	and.w	r1, r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	03ff63ff 	.word	0x03ff63ff

08001f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d138      	bne.n	8001fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e032      	b.n	8001fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	@ 0x24
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b20      	cmp	r3, #32
 800200a:	d139      	bne.n	8002080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002016:	2302      	movs	r3, #2
 8002018:	e033      	b.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2224      	movs	r2, #36	@ 0x24
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40007000 	.word	0x40007000

080020ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ba:	d130      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020bc:	4b23      	ldr	r3, [pc, #140]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c8:	d038      	beq.n	800213c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ca:	4b20      	ldr	r3, [pc, #128]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020d2:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2232      	movs	r2, #50	@ 0x32
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f0:	e002      	b.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002104:	d102      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f2      	bne.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002118:	d110      	bne.n	800213c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e00f      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212a:	d007      	beq.n	800213c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800212c:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002134:	4a05      	ldr	r2, [pc, #20]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800213a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000
 8002150:	20000004 	.word	0x20000004
 8002154:	431bde83 	.word	0x431bde83

08002158 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f000 bc02 	b.w	8002970 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216c:	4b96      	ldr	r3, [pc, #600]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002176:	4b94      	ldr	r3, [pc, #592]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80e4 	beq.w	8002356 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4c>
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	f040 808b 	bne.w	80022b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	f040 8087 	bne.w	80022b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a4:	4b88      	ldr	r3, [pc, #544]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_OscConfig+0x64>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e3d9      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	4b81      	ldr	r3, [pc, #516]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_RCC_OscConfig+0x7e>
 80021cc:	4b7e      	ldr	r3, [pc, #504]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d4:	e005      	b.n	80021e2 <HAL_RCC_OscConfig+0x8a>
 80021d6:	4b7c      	ldr	r3, [pc, #496]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d223      	bcs.n	800222e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fd8c 	bl	8002d08 <RCC_SetFlashLatencyFromMSIRange>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e3ba      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fa:	4b73      	ldr	r3, [pc, #460]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a72      	ldr	r2, [pc, #456]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b70      	ldr	r3, [pc, #448]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	496d      	ldr	r1, [pc, #436]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002218:	4b6b      	ldr	r3, [pc, #428]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	4968      	ldr	r1, [pc, #416]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
 800222c:	e025      	b.n	800227a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222e:	4b66      	ldr	r3, [pc, #408]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a65      	ldr	r2, [pc, #404]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4960      	ldr	r1, [pc, #384]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224c:	4b5e      	ldr	r3, [pc, #376]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	495b      	ldr	r1, [pc, #364]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fd4c 	bl	8002d08 <RCC_SetFlashLatencyFromMSIRange>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e37a      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800227a:	f000 fc81 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b51      	ldr	r3, [pc, #324]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4950      	ldr	r1, [pc, #320]	@ (80023cc <HAL_RCC_OscConfig+0x274>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a4e      	ldr	r2, [pc, #312]	@ (80023d0 <HAL_RCC_OscConfig+0x278>)
 8002298:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <HAL_RCC_OscConfig+0x27c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ff90 	bl	80011c4 <HAL_InitTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d052      	beq.n	8002354 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	e35e      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d032      	beq.n	8002320 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ba:	4b43      	ldr	r3, [pc, #268]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a42      	ldr	r2, [pc, #264]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c6:	f7fe ffcd 	bl	8001264 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ce:	f7fe ffc9 	bl	8001264 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e347      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4930      	ldr	r1, [pc, #192]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	492b      	ldr	r1, [pc, #172]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
 800231e:	e01a      	b.n	8002356 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002320:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800232c:	f7fe ff9a 	bl	8001264 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002334:	f7fe ff96 	bl	8001264 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e314      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1dc>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d073      	beq.n	800244a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x21c>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d10e      	bne.n	800238c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d10b      	bne.n	800238c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d063      	beq.n	8002448 <HAL_RCC_OscConfig+0x2f0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d15f      	bne.n	8002448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e2f1      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x24c>
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a0b      	ldr	r2, [pc, #44]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e025      	b.n	80023f0 <HAL_RCC_OscConfig+0x298>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ac:	d114      	bne.n	80023d8 <HAL_RCC_OscConfig+0x280>
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a02      	ldr	r2, [pc, #8]	@ (80023c8 <HAL_RCC_OscConfig+0x270>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e013      	b.n	80023f0 <HAL_RCC_OscConfig+0x298>
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08004fa0 	.word	0x08004fa0
 80023d0:	20000004 	.word	0x20000004
 80023d4:	20000008 	.word	0x20000008
 80023d8:	4ba0      	ldr	r3, [pc, #640]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a9f      	ldr	r2, [pc, #636]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b9d      	ldr	r3, [pc, #628]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a9c      	ldr	r2, [pc, #624]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe ff34 	bl	8001264 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe ff30 	bl	8001264 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	@ 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e2ae      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002412:	4b92      	ldr	r3, [pc, #584]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x2a8>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe ff20 	bl	8001264 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe ff1c 	bl	8001264 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e29a      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800243a:	4b88      	ldr	r3, [pc, #544]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x2d0>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d060      	beq.n	8002518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x310>
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b0c      	cmp	r3, #12
 8002460:	d119      	bne.n	8002496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d116      	bne.n	8002496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002468:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_OscConfig+0x328>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e277      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b76      	ldr	r3, [pc, #472]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	4973      	ldr	r1, [pc, #460]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002494:	e040      	b.n	8002518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d023      	beq.n	80024e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249e:	4b6f      	ldr	r3, [pc, #444]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fedb 	bl	8001264 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe fed7 	bl	8001264 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e255      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c4:	4b65      	ldr	r3, [pc, #404]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b62      	ldr	r3, [pc, #392]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	495f      	ldr	r1, [pc, #380]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
 80024e4:	e018      	b.n	8002518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5c      	ldr	r2, [pc, #368]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80024ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe feb7 	bl	8001264 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe feb3 	bl	8001264 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e231      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800250c:	4b53      	ldr	r3, [pc, #332]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d03c      	beq.n	800259e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01c      	beq.n	8002566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252c:	4b4b      	ldr	r3, [pc, #300]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002532:	4a4a      	ldr	r2, [pc, #296]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fe92 	bl	8001264 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fe8e 	bl	8001264 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e20c      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002556:	4b41      	ldr	r3, [pc, #260]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ef      	beq.n	8002544 <HAL_RCC_OscConfig+0x3ec>
 8002564:	e01b      	b.n	800259e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256c:	4a3b      	ldr	r2, [pc, #236]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7fe fe75 	bl	8001264 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257e:	f7fe fe71 	bl	8001264 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1ef      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002590:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ef      	bne.n	800257e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80a6 	beq.w	80026f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025b0:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b27      	ldr	r3, [pc, #156]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a26      	ldr	r2, [pc, #152]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c8:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <HAL_RCC_OscConfig+0x508>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d118      	bne.n	8002616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <HAL_RCC_OscConfig+0x508>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002660 <HAL_RCC_OscConfig+0x508>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f0:	f7fe fe38 	bl	8001264 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f8:	f7fe fe34 	bl	8001264 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1b2      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <HAL_RCC_OscConfig+0x508>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d108      	bne.n	8002630 <HAL_RCC_OscConfig+0x4d8>
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800262e:	e029      	b.n	8002684 <HAL_RCC_OscConfig+0x52c>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b05      	cmp	r3, #5
 8002636:	d115      	bne.n	8002664 <HAL_RCC_OscConfig+0x50c>
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	4a07      	ldr	r2, [pc, #28]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002648:	4b04      	ldr	r3, [pc, #16]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	4a03      	ldr	r2, [pc, #12]	@ (800265c <HAL_RCC_OscConfig+0x504>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002658:	e014      	b.n	8002684 <HAL_RCC_OscConfig+0x52c>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	4b9a      	ldr	r3, [pc, #616]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	4a99      	ldr	r2, [pc, #612]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002674:	4b96      	ldr	r3, [pc, #600]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267a:	4a95      	ldr	r2, [pc, #596]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d016      	beq.n	80026ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fdea 	bl	8001264 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fde6 	bl	8001264 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e162      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026aa:	4b89      	ldr	r3, [pc, #548]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ed      	beq.n	8002694 <HAL_RCC_OscConfig+0x53c>
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7fe fdd3 	bl	8001264 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fdcf 	bl	8001264 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e14b      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d8:	4b7d      	ldr	r3, [pc, #500]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ed      	bne.n	80026c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b78      	ldr	r3, [pc, #480]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	4a77      	ldr	r2, [pc, #476]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d03c      	beq.n	800277e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01c      	beq.n	8002746 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270c:	4b70      	ldr	r3, [pc, #448]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800270e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002712:	4a6f      	ldr	r2, [pc, #444]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fda2 	bl	8001264 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002724:	f7fe fd9e 	bl	8001264 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e11c      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002736:	4b66      	ldr	r3, [pc, #408]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002738:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ef      	beq.n	8002724 <HAL_RCC_OscConfig+0x5cc>
 8002744:	e01b      	b.n	800277e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002746:	4b62      	ldr	r3, [pc, #392]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800274c:	4a60      	ldr	r2, [pc, #384]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002756:	f7fe fd85 	bl	8001264 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800275e:	f7fe fd81 	bl	8001264 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0ff      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002770:	4b57      	ldr	r3, [pc, #348]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ef      	bne.n	800275e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80f3 	beq.w	800296e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	2b02      	cmp	r3, #2
 800278e:	f040 80c9 	bne.w	8002924 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002792:	4b4f      	ldr	r3, [pc, #316]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 0203 	and.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d12c      	bne.n	8002800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	3b01      	subs	r3, #1
 80027b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d123      	bne.n	8002800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d11b      	bne.n	8002800 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d113      	bne.n	8002800 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	3b01      	subs	r3, #1
 80027e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d109      	bne.n	8002800 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	3b01      	subs	r3, #1
 80027fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d06b      	beq.n	80028d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d062      	beq.n	80028cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002806:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0ac      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a2d      	ldr	r2, [pc, #180]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800281c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002822:	f7fe fd1f 	bl	8001264 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fd1b 	bl	8001264 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e099      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <HAL_RCC_OscConfig+0x77c>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002858:	3a01      	subs	r2, #1
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002862:	0212      	lsls	r2, r2, #8
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	0552      	lsls	r2, r2, #21
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002876:	0852      	lsrs	r2, r2, #1
 8002878:	3a01      	subs	r2, #1
 800287a:	0652      	lsls	r2, r2, #25
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002882:	06d2      	lsls	r2, r2, #27
 8002884:	430a      	orrs	r2, r1
 8002886:	4912      	ldr	r1, [pc, #72]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002898:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a0c      	ldr	r2, [pc, #48]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a4:	f7fe fcde 	bl	8001264 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fcda 	bl	8001264 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e058      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_RCC_OscConfig+0x778>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ca:	e050      	b.n	800296e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e04f      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d8:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d144      	bne.n	800296e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028e4:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a23      	ldr	r2, [pc, #140]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f0:	4b21      	ldr	r3, [pc, #132]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a20      	ldr	r2, [pc, #128]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 80028f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028fc:	f7fe fcb2 	bl	8001264 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fcae 	bl	8001264 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e02c      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x7ac>
 8002922:	e024      	b.n	800296e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d01f      	beq.n	800296a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 8002930:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fc95 	bl	8001264 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe fc91 	bl	8001264 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e00f      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4905      	ldr	r1, [pc, #20]	@ (8002978 <HAL_RCC_OscConfig+0x820>)
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_OscConfig+0x824>)
 8002964:	4013      	ands	r3, r2
 8002966:	60cb      	str	r3, [r1, #12]
 8002968:	e001      	b.n	800296e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	feeefffc 	.word	0xfeeefffc

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0e7      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b75      	ldr	r3, [pc, #468]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b72      	ldr	r3, [pc, #456]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4970      	ldr	r1, [pc, #448]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b6e      	ldr	r3, [pc, #440]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0cf      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029dc:	429a      	cmp	r2, r3
 80029de:	d908      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4960      	ldr	r1, [pc, #384]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d04c      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a06:	4b5a      	ldr	r3, [pc, #360]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d121      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0a6      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1e:	4b54      	ldr	r3, [pc, #336]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e09a      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a36:	4b4e      	ldr	r3, [pc, #312]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e08e      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a46:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e086      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a56:	4b46      	ldr	r3, [pc, #280]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 0203 	bic.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4943      	ldr	r1, [pc, #268]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a68:	f7fe fbfc 	bl	8001264 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe fbf8 	bl	8001264 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e06e      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 020c 	and.w	r2, r3, #12
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1eb      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d010      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d208      	bcs.n	8002ac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	492b      	ldr	r1, [pc, #172]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac6:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d210      	bcs.n	8002af6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 0207 	bic.w	r2, r3, #7
 8002adc:	4923      	ldr	r1, [pc, #140]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae4:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e036      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4918      	ldr	r1, [pc, #96]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4910      	ldr	r1, [pc, #64]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b34:	f000 f824 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	490b      	ldr	r1, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x1f4>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x1fc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fb33 	bl	80011c4 <HAL_InitTick>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b62:	7afb      	ldrb	r3, [r7, #11]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08004fa0 	.word	0x08004fa0
 8002b78:	20000004 	.word	0x20000004
 8002b7c:	20000008 	.word	0x20000008

08002b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b98:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d121      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d11e      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bb4:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bc0:	4b31      	ldr	r3, [pc, #196]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e005      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	e004      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c04:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d134      	bne.n	8002c78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d003      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xac>
 8002c24:	e005      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c28:	617b      	str	r3, [r7, #20]
      break;
 8002c2a:	e005      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c2e:	617b      	str	r3, [r7, #20]
      break;
 8002c30:	e002      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	617b      	str	r3, [r7, #20]
      break;
 8002c36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c38:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	3301      	adds	r3, #1
 8002c44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	fb03 f202 	mul.w	r2, r3, r2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	0e5b      	lsrs	r3, r3, #25
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c78:	69bb      	ldr	r3, [r7, #24]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	@ 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08004fb8 	.word	0x08004fb8
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	007a1200 	.word	0x007a1200

08002c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4904      	ldr	r1, [pc, #16]	@ (8002cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08004fb0 	.word	0x08004fb0

08002cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ce0:	f7ff ffda 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0adb      	lsrs	r3, r3, #11
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4904      	ldr	r1, [pc, #16]	@ (8002d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08004fb0 	.word	0x08004fb0

08002d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d14:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d20:	f7ff f9b6 	bl	8002090 <HAL_PWREx_GetVoltageRange>
 8002d24:	6178      	str	r0, [r7, #20]
 8002d26:	e014      	b.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b25      	ldr	r3, [pc, #148]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	4a24      	ldr	r2, [pc, #144]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d34:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d40:	f7ff f9a6 	bl	8002090 <HAL_PWREx_GetVoltageRange>
 8002d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d58:	d10b      	bne.n	8002d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b80      	cmp	r3, #128	@ 0x80
 8002d5e:	d919      	bls.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d64:	d902      	bls.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d66:	2302      	movs	r3, #2
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	e013      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e010      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b80      	cmp	r3, #128	@ 0x80
 8002d76:	d902      	bls.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d78:	2303      	movs	r3, #3
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e00a      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b80      	cmp	r3, #128	@ 0x80
 8002d82:	d102      	bne.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d84:	2302      	movs	r3, #2
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e004      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b70      	cmp	r3, #112	@ 0x70
 8002d8e:	d101      	bne.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d90:	2301      	movs	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 0207 	bic.w	r2, r3, #7
 8002d9c:	4909      	ldr	r1, [pc, #36]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40022000 	.word	0x40022000

08002dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d031      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dec:	d01a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002dee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002df2:	d814      	bhi.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002df8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dfc:	d10f      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4a5c      	ldr	r2, [pc, #368]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e0a:	e00c      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fa22 	bl	800325c <RCCEx_PLLSAI1_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e1c:	e003      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	74fb      	strb	r3, [r7, #19]
      break;
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e2c:	4b51      	ldr	r3, [pc, #324]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	494e      	ldr	r1, [pc, #312]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e42:	e001      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 809e 	beq.w	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e5a:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	4b40      	ldr	r3, [pc, #256]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	4a3f      	ldr	r2, [pc, #252]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a39      	ldr	r2, [pc, #228]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e98:	f7fe f9e4 	bl	8001264 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fe f9e0 	bl	8001264 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	74fb      	strb	r3, [r7, #19]
        break;
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eb4:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ef      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d15a      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01e      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d019      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ee2:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eee:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002efe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f04:	4a1b      	ldr	r2, [pc, #108]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f0e:	4a19      	ldr	r2, [pc, #100]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe f9a0 	bl	8001264 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f26:	e00b      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe f99c 	bl	8001264 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d902      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f3e:	e006      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f40:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ec      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f54:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f6a:	e009      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	7cfb      	ldrb	r3, [r7, #19]
 8002f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f80:	7c7b      	ldrb	r3, [r7, #17]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b8d      	ldr	r3, [pc, #564]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	4a8c      	ldr	r2, [pc, #560]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9e:	4b87      	ldr	r3, [pc, #540]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f023 0203 	bic.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4983      	ldr	r1, [pc, #524]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f023 020c 	bic.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	497b      	ldr	r1, [pc, #492]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fe2:	4b76      	ldr	r3, [pc, #472]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	4972      	ldr	r1, [pc, #456]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003004:	4b6d      	ldr	r3, [pc, #436]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003012:	496a      	ldr	r1, [pc, #424]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003026:	4b65      	ldr	r3, [pc, #404]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	4961      	ldr	r1, [pc, #388]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003048:	4b5c      	ldr	r3, [pc, #368]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	4959      	ldr	r1, [pc, #356]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800306a:	4b54      	ldr	r3, [pc, #336]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	4950      	ldr	r1, [pc, #320]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800308c:	4b4b      	ldr	r3, [pc, #300]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	4948      	ldr	r1, [pc, #288]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ae:	4b43      	ldr	r3, [pc, #268]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	493f      	ldr	r1, [pc, #252]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d028      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d0:	4b3a      	ldr	r3, [pc, #232]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	4937      	ldr	r1, [pc, #220]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ee:	d106      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f0:	4b32      	ldr	r3, [pc, #200]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a31      	ldr	r2, [pc, #196]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80030f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030fa:	60d3      	str	r3, [r2, #12]
 80030fc:	e011      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003106:	d10c      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f8a4 	bl	800325c <RCCEx_PLLSAI1_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d028      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800312e:	4b23      	ldr	r3, [pc, #140]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003134:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313c:	491f      	ldr	r1, [pc, #124]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800314c:	d106      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800314e:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4a1a      	ldr	r2, [pc, #104]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003154:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003158:	60d3      	str	r3, [r2, #12]
 800315a:	e011      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003164:	d10c      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	2101      	movs	r1, #1
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f875 	bl	800325c <RCCEx_PLLSAI1_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319a:	4908      	ldr	r1, [pc, #32]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031aa:	d109      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a02      	ldr	r2, [pc, #8]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031b6:	60d3      	str	r3, [r2, #12]
 80031b8:	e014      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f843 	bl	800325c <RCCEx_PLLSAI1_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01c      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f0:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fe:	4916      	ldr	r1, [pc, #88]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800320e:	d10c      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	2102      	movs	r1, #2
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f820 	bl	800325c <RCCEx_PLLSAI1_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003236:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	4904      	ldr	r1, [pc, #16]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800324c:	7cbb      	ldrb	r3, [r7, #18]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000

0800325c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800326a:	4b74      	ldr	r3, [pc, #464]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d018      	beq.n	80032a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003276:	4b71      	ldr	r3, [pc, #452]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0203 	and.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d10d      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
       ||
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800328e:	4b6b      	ldr	r3, [pc, #428]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
       ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d047      	beq.n	8003332 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e044      	b.n	8003332 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d018      	beq.n	80032e2 <RCCEx_PLLSAI1_Config+0x86>
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d825      	bhi.n	8003300 <RCCEx_PLLSAI1_Config+0xa4>
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <RCCEx_PLLSAI1_Config+0x62>
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d009      	beq.n	80032d0 <RCCEx_PLLSAI1_Config+0x74>
 80032bc:	e020      	b.n	8003300 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032be:	4b5f      	ldr	r3, [pc, #380]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d11d      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ce:	e01a      	b.n	8003306 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032d0:	4b5a      	ldr	r3, [pc, #360]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d116      	bne.n	800330a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e013      	b.n	800330a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032e2:	4b56      	ldr	r3, [pc, #344]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032ee:	4b53      	ldr	r3, [pc, #332]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032fe:	e006      	b.n	800330e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      break;
 8003304:	e004      	b.n	8003310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003306:	bf00      	nop
 8003308:	e002      	b.n	8003310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800330a:	bf00      	nop
 800330c:	e000      	b.n	8003310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800330e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003316:	4b49      	ldr	r3, [pc, #292]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	430b      	orrs	r3, r1
 800332c:	4943      	ldr	r1, [pc, #268]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d17c      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003338:	4b40      	ldr	r3, [pc, #256]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3f      	ldr	r2, [pc, #252]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 800333e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003344:	f7fd ff8e 	bl	8001264 <HAL_GetTick>
 8003348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800334a:	e009      	b.n	8003360 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800334c:	f7fd ff8a 	bl	8001264 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	73fb      	strb	r3, [r7, #15]
        break;
 800335e:	e005      	b.n	800336c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ef      	bne.n	800334c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d15f      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d110      	bne.n	800339a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003378:	4b30      	ldr	r3, [pc, #192]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003380:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	0211      	lsls	r1, r2, #8
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68d2      	ldr	r2, [r2, #12]
 800338e:	06d2      	lsls	r2, r2, #27
 8003390:	430a      	orrs	r2, r1
 8003392:	492a      	ldr	r1, [pc, #168]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	610b      	str	r3, [r1, #16]
 8003398:	e027      	b.n	80033ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d112      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033a0:	4b26      	ldr	r3, [pc, #152]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	0211      	lsls	r1, r2, #8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6912      	ldr	r2, [r2, #16]
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0552      	lsls	r2, r2, #21
 80033bc:	430a      	orrs	r2, r1
 80033be:	491f      	ldr	r1, [pc, #124]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	610b      	str	r3, [r1, #16]
 80033c4:	e011      	b.n	80033ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	0211      	lsls	r1, r2, #8
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6952      	ldr	r2, [r2, #20]
 80033dc:	0852      	lsrs	r2, r2, #1
 80033de:	3a01      	subs	r2, #1
 80033e0:	0652      	lsls	r2, r2, #25
 80033e2:	430a      	orrs	r2, r1
 80033e4:	4915      	ldr	r1, [pc, #84]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033ea:	4b14      	ldr	r3, [pc, #80]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a13      	ldr	r2, [pc, #76]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fd ff35 	bl	8001264 <HAL_GetTick>
 80033fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033fc:	e009      	b.n	8003412 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033fe:	f7fd ff31 	bl	8001264 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d902      	bls.n	8003412 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	73fb      	strb	r3, [r7, #15]
          break;
 8003410:	e005      	b.n	800341e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003412:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0ef      	beq.n	80033fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4903      	ldr	r1, [pc, #12]	@ (800343c <RCCEx_PLLSAI1_Config+0x1e0>)
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000

08003440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e049      	b.n	80034e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fd4e 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3304      	adds	r3, #4
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f000 fa82 	bl	8003988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e03b      	b.n	8003580 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_TIM_Base_Start_IT+0x9c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_TIM_Base_Start_IT+0x4e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003532:	d004      	beq.n	800353e <HAL_TIM_Base_Start_IT+0x4e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <HAL_TIM_Base_Start_IT+0xa0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d115      	bne.n	800356a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_TIM_Base_Start_IT+0xa4>)
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d015      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x8c>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003556:	d011      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003568:	e008      	b.n	800357c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e000      	b.n	800357e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014000 	.word	0x40014000
 8003594:	00010007 	.word	0x00010007

08003598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0202 	mvn.w	r2, #2
 80035cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9b2 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9a4 	bl	8003938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f9b5 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d020      	beq.n	8003648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0204 	mvn.w	r2, #4
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f98c 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f97e 	bl	8003938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f98f 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0208 	mvn.w	r2, #8
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2204      	movs	r2, #4
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f966 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f958 	bl	8003938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f969 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d020      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0210 	mvn.w	r2, #16
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2208      	movs	r2, #8
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f940 	bl	800394c <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f932 	bl	8003938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f943 	bl	8003960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0201 	mvn.w	r2, #1
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd f924 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800372a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 faa5 	bl	8003c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800374e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fa9d 	bl	8003c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8fd 	bl	8003974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0220 	mvn.w	r2, #32
 8003796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fa65 	bl	8003c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_ConfigClockSource+0x1c>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0b6      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x18a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037fe:	d03e      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xd8>
 8003800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003804:	f200 8087 	bhi.w	8003916 <HAL_TIM_ConfigClockSource+0x170>
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380c:	f000 8086 	beq.w	800391c <HAL_TIM_ConfigClockSource+0x176>
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d87f      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 8003816:	2b70      	cmp	r3, #112	@ 0x70
 8003818:	d01a      	beq.n	8003850 <HAL_TIM_ConfigClockSource+0xaa>
 800381a:	2b70      	cmp	r3, #112	@ 0x70
 800381c:	d87b      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 800381e:	2b60      	cmp	r3, #96	@ 0x60
 8003820:	d050      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x11e>
 8003822:	2b60      	cmp	r3, #96	@ 0x60
 8003824:	d877      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 8003826:	2b50      	cmp	r3, #80	@ 0x50
 8003828:	d03c      	beq.n	80038a4 <HAL_TIM_ConfigClockSource+0xfe>
 800382a:	2b50      	cmp	r3, #80	@ 0x50
 800382c:	d873      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d058      	beq.n	80038e4 <HAL_TIM_ConfigClockSource+0x13e>
 8003832:	2b40      	cmp	r3, #64	@ 0x40
 8003834:	d86f      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 8003836:	2b30      	cmp	r3, #48	@ 0x30
 8003838:	d064      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x15e>
 800383a:	2b30      	cmp	r3, #48	@ 0x30
 800383c:	d86b      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 800383e:	2b20      	cmp	r3, #32
 8003840:	d060      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x15e>
 8003842:	2b20      	cmp	r3, #32
 8003844:	d867      	bhi.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d05c      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x15e>
 800384a:	2b10      	cmp	r3, #16
 800384c:	d05a      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x15e>
 800384e:	e062      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003860:	f000 f97c 	bl	8003b5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003872:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
      break;
 800387c:	e04f      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388e:	f000 f965 	bl	8003b5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a0:	609a      	str	r2, [r3, #8]
      break;
 80038a2:	e03c      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b0:	461a      	mov	r2, r3
 80038b2:	f000 f8d9 	bl	8003a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2150      	movs	r1, #80	@ 0x50
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f932 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038c2:	e02c      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d0:	461a      	mov	r2, r3
 80038d2:	f000 f8f8 	bl	8003ac6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2160      	movs	r1, #96	@ 0x60
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f922 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 80038e2:	e01c      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f0:	461a      	mov	r2, r3
 80038f2:	f000 f8b9 	bl	8003a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2140      	movs	r1, #64	@ 0x40
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f912 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003902:	e00c      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 f909 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003914:	e003      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      break;
 800391a:	e000      	b.n	800391e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800391c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a30      	ldr	r2, [pc, #192]	@ (8003a5c <TIM_Base_SetConfig+0xd4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x20>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <TIM_Base_SetConfig+0xd4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0x52>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0x52>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a24      	ldr	r2, [pc, #144]	@ (8003a60 <TIM_Base_SetConfig+0xd8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0x52>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a23      	ldr	r2, [pc, #140]	@ (8003a64 <TIM_Base_SetConfig+0xdc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	@ (8003a5c <TIM_Base_SetConfig+0xd4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0xa0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	@ (8003a60 <TIM_Base_SetConfig+0xd8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0xa0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <TIM_Base_SetConfig+0xdc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d103      	bne.n	8003a30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400

08003a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 030a 	bic.w	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 0210 	bic.w	r2, r3, #16
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e04f      	b.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d108      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003be4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a14      	ldr	r2, [pc, #80]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a10      	ldr	r2, [pc, #64]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10c      	bne.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40014000 	.word	0x40014000

08003c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e040      	b.n	8003d38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd f956 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa82 	bl	80041f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f825 	bl	8003d40 <UART_SetConfig>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e01b      	b.n	8003d38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fb01 	bl	8004338 <UART_CheckIdleState>
 8003d36:	4603      	mov	r3, r0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b08a      	sub	sp, #40	@ 0x28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b9e      	ldr	r3, [pc, #632]	@ (8003fe8 <UART_SetConfig+0x2a8>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a93      	ldr	r2, [pc, #588]	@ (8003fec <UART_SetConfig+0x2ac>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	4313      	orrs	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a8a      	ldr	r2, [pc, #552]	@ (8003ff0 <UART_SetConfig+0x2b0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d126      	bne.n	8003e18 <UART_SetConfig+0xd8>
 8003dca:	4b8a      	ldr	r3, [pc, #552]	@ (8003ff4 <UART_SetConfig+0x2b4>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d81b      	bhi.n	8003e10 <UART_SetConfig+0xd0>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0xa0>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e0ab      	b.n	8003f50 <UART_SetConfig+0x210>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e0a7      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e06:	e0a3      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e09f      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e09b      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a76      	ldr	r2, [pc, #472]	@ (8003ff8 <UART_SetConfig+0x2b8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d138      	bne.n	8003e94 <UART_SetConfig+0x154>
 8003e22:	4b74      	ldr	r3, [pc, #464]	@ (8003ff4 <UART_SetConfig+0x2b4>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d82d      	bhi.n	8003e8c <UART_SetConfig+0x14c>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0xf8>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e8d 	.word	0x08003e8d
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e8d 	.word	0x08003e8d
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e75 	.word	0x08003e75
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e85 	.word	0x08003e85
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e06d      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e74:	2302      	movs	r3, #2
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e069      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e065      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e84:	2308      	movs	r3, #8
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e061      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e92:	e05d      	b.n	8003f50 <UART_SetConfig+0x210>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a58      	ldr	r2, [pc, #352]	@ (8003ffc <UART_SetConfig+0x2bc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d125      	bne.n	8003eea <UART_SetConfig+0x1aa>
 8003e9e:	4b55      	ldr	r3, [pc, #340]	@ (8003ff4 <UART_SetConfig+0x2b4>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d016      	beq.n	8003eda <UART_SetConfig+0x19a>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d818      	bhi.n	8003ee2 <UART_SetConfig+0x1a2>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d00a      	beq.n	8003eca <UART_SetConfig+0x18a>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d814      	bhi.n	8003ee2 <UART_SetConfig+0x1a2>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <UART_SetConfig+0x182>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d008      	beq.n	8003ed2 <UART_SetConfig+0x192>
 8003ec0:	e00f      	b.n	8003ee2 <UART_SetConfig+0x1a2>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec8:	e042      	b.n	8003f50 <UART_SetConfig+0x210>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed0:	e03e      	b.n	8003f50 <UART_SetConfig+0x210>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed8:	e03a      	b.n	8003f50 <UART_SetConfig+0x210>
 8003eda:	2308      	movs	r3, #8
 8003edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee0:	e036      	b.n	8003f50 <UART_SetConfig+0x210>
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee8:	e032      	b.n	8003f50 <UART_SetConfig+0x210>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	@ (8003fec <UART_SetConfig+0x2ac>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d12a      	bne.n	8003f4a <UART_SetConfig+0x20a>
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff4 <UART_SetConfig+0x2b4>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f02:	d01a      	beq.n	8003f3a <UART_SetConfig+0x1fa>
 8003f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f08:	d81b      	bhi.n	8003f42 <UART_SetConfig+0x202>
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0e:	d00c      	beq.n	8003f2a <UART_SetConfig+0x1ea>
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f14:	d815      	bhi.n	8003f42 <UART_SetConfig+0x202>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <UART_SetConfig+0x1e2>
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1e:	d008      	beq.n	8003f32 <UART_SetConfig+0x1f2>
 8003f20:	e00f      	b.n	8003f42 <UART_SetConfig+0x202>
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f28:	e012      	b.n	8003f50 <UART_SetConfig+0x210>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f30:	e00e      	b.n	8003f50 <UART_SetConfig+0x210>
 8003f32:	2304      	movs	r3, #4
 8003f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f38:	e00a      	b.n	8003f50 <UART_SetConfig+0x210>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f40:	e006      	b.n	8003f50 <UART_SetConfig+0x210>
 8003f42:	2310      	movs	r3, #16
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f48:	e002      	b.n	8003f50 <UART_SetConfig+0x210>
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a25      	ldr	r2, [pc, #148]	@ (8003fec <UART_SetConfig+0x2ac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	f040 808a 	bne.w	8004070 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d824      	bhi.n	8003fae <UART_SetConfig+0x26e>
 8003f64:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <UART_SetConfig+0x22c>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003f9f 	.word	0x08003f9f
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003faf 	.word	0x08003faf
 8003f8c:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f90:	f7fe fe8e 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8003f94:	61f8      	str	r0, [r7, #28]
        break;
 8003f96:	e010      	b.n	8003fba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <UART_SetConfig+0x2c0>)
 8003f9a:	61fb      	str	r3, [r7, #28]
        break;
 8003f9c:	e00d      	b.n	8003fba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe fdef 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8003fa2:	61f8      	str	r0, [r7, #28]
        break;
 8003fa4:	e009      	b.n	8003fba <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	61fb      	str	r3, [r7, #28]
        break;
 8003fac:	e005      	b.n	8003fba <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8109 	beq.w	80041d4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d305      	bcc.n	8003fde <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d912      	bls.n	8004004 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fe4:	e0f6      	b.n	80041d4 <UART_SetConfig+0x494>
 8003fe6:	bf00      	nop
 8003fe8:	efff69f3 	.word	0xefff69f3
 8003fec:	40008000 	.word	0x40008000
 8003ff0:	40013800 	.word	0x40013800
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40004400 	.word	0x40004400
 8003ffc:	40004800 	.word	0x40004800
 8004000:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2200      	movs	r2, #0
 8004008:	461c      	mov	r4, r3
 800400a:	4615      	mov	r5, r2
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	022b      	lsls	r3, r5, #8
 8004016:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800401a:	0222      	lsls	r2, r4, #8
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	6849      	ldr	r1, [r1, #4]
 8004020:	0849      	lsrs	r1, r1, #1
 8004022:	2000      	movs	r0, #0
 8004024:	4688      	mov	r8, r1
 8004026:	4681      	mov	r9, r0
 8004028:	eb12 0a08 	adds.w	sl, r2, r8
 800402c:	eb43 0b09 	adc.w	fp, r3, r9
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800403e:	4650      	mov	r0, sl
 8004040:	4659      	mov	r1, fp
 8004042:	f7fc f915 	bl	8000270 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004054:	d308      	bcc.n	8004068 <UART_SetConfig+0x328>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405c:	d204      	bcs.n	8004068 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	e0b5      	b.n	80041d4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800406e:	e0b1      	b.n	80041d4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004078:	d15d      	bne.n	8004136 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800407a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800407e:	2b08      	cmp	r3, #8
 8004080:	d827      	bhi.n	80040d2 <UART_SetConfig+0x392>
 8004082:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <UART_SetConfig+0x348>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040bd 	.word	0x080040bd
 8004094:	080040d3 	.word	0x080040d3
 8004098:	080040c3 	.word	0x080040c3
 800409c:	080040d3 	.word	0x080040d3
 80040a0:	080040d3 	.word	0x080040d3
 80040a4:	080040d3 	.word	0x080040d3
 80040a8:	080040cb 	.word	0x080040cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7fe fe00 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80040b0:	61f8      	str	r0, [r7, #28]
        break;
 80040b2:	e014      	b.n	80040de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7fe fe12 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 80040b8:	61f8      	str	r0, [r7, #28]
        break;
 80040ba:	e010      	b.n	80040de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040bc:	4b4c      	ldr	r3, [pc, #304]	@ (80041f0 <UART_SetConfig+0x4b0>)
 80040be:	61fb      	str	r3, [r7, #28]
        break;
 80040c0:	e00d      	b.n	80040de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c2:	f7fe fd5d 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 80040c6:	61f8      	str	r0, [r7, #28]
        break;
 80040c8:	e009      	b.n	80040de <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ce:	61fb      	str	r3, [r7, #28]
        break;
 80040d0:	e005      	b.n	80040de <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d077      	beq.n	80041d4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005a      	lsls	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	441a      	add	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d916      	bls.n	800412e <UART_SetConfig+0x3ee>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004106:	d212      	bcs.n	800412e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f023 030f 	bic.w	r3, r3, #15
 8004110:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	b29a      	uxth	r2, r3
 800411e:	8afb      	ldrh	r3, [r7, #22]
 8004120:	4313      	orrs	r3, r2
 8004122:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	8afa      	ldrh	r2, [r7, #22]
 800412a:	60da      	str	r2, [r3, #12]
 800412c:	e052      	b.n	80041d4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004134:	e04e      	b.n	80041d4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004136:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800413a:	2b08      	cmp	r3, #8
 800413c:	d827      	bhi.n	800418e <UART_SetConfig+0x44e>
 800413e:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <UART_SetConfig+0x404>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004169 	.word	0x08004169
 8004148:	08004171 	.word	0x08004171
 800414c:	08004179 	.word	0x08004179
 8004150:	0800418f 	.word	0x0800418f
 8004154:	0800417f 	.word	0x0800417f
 8004158:	0800418f 	.word	0x0800418f
 800415c:	0800418f 	.word	0x0800418f
 8004160:	0800418f 	.word	0x0800418f
 8004164:	08004187 	.word	0x08004187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004168:	f7fe fda2 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 800416c:	61f8      	str	r0, [r7, #28]
        break;
 800416e:	e014      	b.n	800419a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004170:	f7fe fdb4 	bl	8002cdc <HAL_RCC_GetPCLK2Freq>
 8004174:	61f8      	str	r0, [r7, #28]
        break;
 8004176:	e010      	b.n	800419a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <UART_SetConfig+0x4b0>)
 800417a:	61fb      	str	r3, [r7, #28]
        break;
 800417c:	e00d      	b.n	800419a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417e:	f7fe fcff 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8004182:	61f8      	str	r0, [r7, #28]
        break;
 8004184:	e009      	b.n	800419a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418a:	61fb      	str	r3, [r7, #28]
        break;
 800418c:	e005      	b.n	800419a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004198:	bf00      	nop
    }

    if (pclk != 0U)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d019      	beq.n	80041d4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	085a      	lsrs	r2, r3, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	441a      	add	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b0f      	cmp	r3, #15
 80041b8:	d909      	bls.n	80041ce <UART_SetConfig+0x48e>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c0:	d205      	bcs.n	80041ce <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60da      	str	r2, [r3, #12]
 80041cc:	e002      	b.n	80041d4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3728      	adds	r7, #40	@ 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	00f42400 	.word	0x00f42400

080041f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01a      	beq.n	800430a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042f2:	d10a      	bne.n	800430a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b098      	sub	sp, #96	@ 0x60
 800433c:	af02      	add	r7, sp, #8
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004348:	f7fc ff8c 	bl	8001264 <HAL_GetTick>
 800434c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b08      	cmp	r3, #8
 800435a:	d12e      	bne.n	80043ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004364:	2200      	movs	r2, #0
 8004366:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f88c 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d021      	beq.n	80043ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800438a:	653b      	str	r3, [r7, #80]	@ 0x50
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
 8004396:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800439a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e062      	b.n	8004480 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d149      	bne.n	800445c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d0:	2200      	movs	r2, #0
 80043d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f856 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d03c      	beq.n	800445c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	623b      	str	r3, [r7, #32]
   return(result);
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004400:	633b      	str	r3, [r7, #48]	@ 0x30
 8004402:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e6      	bne.n	80043e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	60fb      	str	r3, [r7, #12]
   return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004434:	61fa      	str	r2, [r7, #28]
 8004436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	617b      	str	r3, [r7, #20]
   return(result);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e5      	bne.n	8004414 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e011      	b.n	8004480 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3758      	adds	r7, #88	@ 0x58
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e04f      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d04b      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fc fedf 	bl	8001264 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e04e      	b.n	800455a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d037      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b80      	cmp	r3, #128	@ 0x80
 80044ce:	d034      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d031      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d110      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2208      	movs	r2, #8
 80044ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f838 	bl	8004562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2208      	movs	r2, #8
 80044f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e029      	b.n	800455a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004514:	d111      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800451e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f81e 	bl	8004562 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e00f      	b.n	800455a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	429a      	cmp	r2, r3
 8004556:	d0a0      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004562:	b480      	push	{r7}
 8004564:	b095      	sub	sp, #84	@ 0x54
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800457e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004588:	643b      	str	r3, [r7, #64]	@ 0x40
 800458a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800458e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e6      	bne.n	800456a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3308      	adds	r3, #8
 80045a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d118      	bne.n	800460a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f023 0310 	bic.w	r3, r3, #16
 80045ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	613b      	str	r3, [r7, #16]
   return(result);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e6      	bne.n	80045d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800461e:	bf00      	nop
 8004620:	3754      	adds	r7, #84	@ 0x54
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <siprintf>:
 800462c:	b40e      	push	{r1, r2, r3}
 800462e:	b510      	push	{r4, lr}
 8004630:	b09d      	sub	sp, #116	@ 0x74
 8004632:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800463c:	480a      	ldr	r0, [pc, #40]	@ (8004668 <siprintf+0x3c>)
 800463e:	9107      	str	r1, [sp, #28]
 8004640:	9104      	str	r1, [sp, #16]
 8004642:	490a      	ldr	r1, [pc, #40]	@ (800466c <siprintf+0x40>)
 8004644:	f853 2b04 	ldr.w	r2, [r3], #4
 8004648:	9105      	str	r1, [sp, #20]
 800464a:	2400      	movs	r4, #0
 800464c:	a902      	add	r1, sp, #8
 800464e:	6800      	ldr	r0, [r0, #0]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004654:	f000 f994 	bl	8004980 <_svfiprintf_r>
 8004658:	9b02      	ldr	r3, [sp, #8]
 800465a:	701c      	strb	r4, [r3, #0]
 800465c:	b01d      	add	sp, #116	@ 0x74
 800465e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004662:	b003      	add	sp, #12
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000010 	.word	0x20000010
 800466c:	ffff0208 	.word	0xffff0208

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <__errno>:
 8004680:	4b01      	ldr	r3, [pc, #4]	@ (8004688 <__errno+0x8>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000010 	.word	0x20000010

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4d0d      	ldr	r5, [pc, #52]	@ (80046c4 <__libc_init_array+0x38>)
 8004690:	4c0d      	ldr	r4, [pc, #52]	@ (80046c8 <__libc_init_array+0x3c>)
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2600      	movs	r6, #0
 8004698:	42a6      	cmp	r6, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	4d0b      	ldr	r5, [pc, #44]	@ (80046cc <__libc_init_array+0x40>)
 800469e:	4c0c      	ldr	r4, [pc, #48]	@ (80046d0 <__libc_init_array+0x44>)
 80046a0:	f000 fc64 	bl	8004f6c <_init>
 80046a4:	1b64      	subs	r4, r4, r5
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	2600      	movs	r6, #0
 80046aa:	42a6      	cmp	r6, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b4:	4798      	blx	r3
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80046be:	4798      	blx	r3
 80046c0:	3601      	adds	r6, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	08005024 	.word	0x08005024
 80046c8:	08005024 	.word	0x08005024
 80046cc:	08005024 	.word	0x08005024
 80046d0:	08005028 	.word	0x08005028

080046d4 <__retarget_lock_acquire_recursive>:
 80046d4:	4770      	bx	lr

080046d6 <__retarget_lock_release_recursive>:
 80046d6:	4770      	bx	lr

080046d8 <_free_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4605      	mov	r5, r0
 80046dc:	2900      	cmp	r1, #0
 80046de:	d041      	beq.n	8004764 <_free_r+0x8c>
 80046e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e4:	1f0c      	subs	r4, r1, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfb8      	it	lt
 80046ea:	18e4      	addlt	r4, r4, r3
 80046ec:	f000 f8e0 	bl	80048b0 <__malloc_lock>
 80046f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <_free_r+0x90>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	b933      	cbnz	r3, 8004704 <_free_r+0x2c>
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	6014      	str	r4, [r2, #0]
 80046fa:	4628      	mov	r0, r5
 80046fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004700:	f000 b8dc 	b.w	80048bc <__malloc_unlock>
 8004704:	42a3      	cmp	r3, r4
 8004706:	d908      	bls.n	800471a <_free_r+0x42>
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	1821      	adds	r1, r4, r0
 800470c:	428b      	cmp	r3, r1
 800470e:	bf01      	itttt	eq
 8004710:	6819      	ldreq	r1, [r3, #0]
 8004712:	685b      	ldreq	r3, [r3, #4]
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	e7ed      	b.n	80046f6 <_free_r+0x1e>
 800471a:	461a      	mov	r2, r3
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b10b      	cbz	r3, 8004724 <_free_r+0x4c>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d9fa      	bls.n	800471a <_free_r+0x42>
 8004724:	6811      	ldr	r1, [r2, #0]
 8004726:	1850      	adds	r0, r2, r1
 8004728:	42a0      	cmp	r0, r4
 800472a:	d10b      	bne.n	8004744 <_free_r+0x6c>
 800472c:	6820      	ldr	r0, [r4, #0]
 800472e:	4401      	add	r1, r0
 8004730:	1850      	adds	r0, r2, r1
 8004732:	4283      	cmp	r3, r0
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	d1e0      	bne.n	80046fa <_free_r+0x22>
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	6053      	str	r3, [r2, #4]
 800473e:	4408      	add	r0, r1
 8004740:	6010      	str	r0, [r2, #0]
 8004742:	e7da      	b.n	80046fa <_free_r+0x22>
 8004744:	d902      	bls.n	800474c <_free_r+0x74>
 8004746:	230c      	movs	r3, #12
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	e7d6      	b.n	80046fa <_free_r+0x22>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	1821      	adds	r1, r4, r0
 8004750:	428b      	cmp	r3, r1
 8004752:	bf04      	itt	eq
 8004754:	6819      	ldreq	r1, [r3, #0]
 8004756:	685b      	ldreq	r3, [r3, #4]
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	bf04      	itt	eq
 800475c:	1809      	addeq	r1, r1, r0
 800475e:	6021      	streq	r1, [r4, #0]
 8004760:	6054      	str	r4, [r2, #4]
 8004762:	e7ca      	b.n	80046fa <_free_r+0x22>
 8004764:	bd38      	pop	{r3, r4, r5, pc}
 8004766:	bf00      	nop
 8004768:	20000348 	.word	0x20000348

0800476c <sbrk_aligned>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4e0f      	ldr	r6, [pc, #60]	@ (80047ac <sbrk_aligned+0x40>)
 8004770:	460c      	mov	r4, r1
 8004772:	6831      	ldr	r1, [r6, #0]
 8004774:	4605      	mov	r5, r0
 8004776:	b911      	cbnz	r1, 800477e <sbrk_aligned+0x12>
 8004778:	f000 fba4 	bl	8004ec4 <_sbrk_r>
 800477c:	6030      	str	r0, [r6, #0]
 800477e:	4621      	mov	r1, r4
 8004780:	4628      	mov	r0, r5
 8004782:	f000 fb9f 	bl	8004ec4 <_sbrk_r>
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	d103      	bne.n	8004792 <sbrk_aligned+0x26>
 800478a:	f04f 34ff 	mov.w	r4, #4294967295
 800478e:	4620      	mov	r0, r4
 8004790:	bd70      	pop	{r4, r5, r6, pc}
 8004792:	1cc4      	adds	r4, r0, #3
 8004794:	f024 0403 	bic.w	r4, r4, #3
 8004798:	42a0      	cmp	r0, r4
 800479a:	d0f8      	beq.n	800478e <sbrk_aligned+0x22>
 800479c:	1a21      	subs	r1, r4, r0
 800479e:	4628      	mov	r0, r5
 80047a0:	f000 fb90 	bl	8004ec4 <_sbrk_r>
 80047a4:	3001      	adds	r0, #1
 80047a6:	d1f2      	bne.n	800478e <sbrk_aligned+0x22>
 80047a8:	e7ef      	b.n	800478a <sbrk_aligned+0x1e>
 80047aa:	bf00      	nop
 80047ac:	20000344 	.word	0x20000344

080047b0 <_malloc_r>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	1ccd      	adds	r5, r1, #3
 80047b6:	f025 0503 	bic.w	r5, r5, #3
 80047ba:	3508      	adds	r5, #8
 80047bc:	2d0c      	cmp	r5, #12
 80047be:	bf38      	it	cc
 80047c0:	250c      	movcc	r5, #12
 80047c2:	2d00      	cmp	r5, #0
 80047c4:	4606      	mov	r6, r0
 80047c6:	db01      	blt.n	80047cc <_malloc_r+0x1c>
 80047c8:	42a9      	cmp	r1, r5
 80047ca:	d904      	bls.n	80047d6 <_malloc_r+0x26>
 80047cc:	230c      	movs	r3, #12
 80047ce:	6033      	str	r3, [r6, #0]
 80047d0:	2000      	movs	r0, #0
 80047d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048ac <_malloc_r+0xfc>
 80047da:	f000 f869 	bl	80048b0 <__malloc_lock>
 80047de:	f8d8 3000 	ldr.w	r3, [r8]
 80047e2:	461c      	mov	r4, r3
 80047e4:	bb44      	cbnz	r4, 8004838 <_malloc_r+0x88>
 80047e6:	4629      	mov	r1, r5
 80047e8:	4630      	mov	r0, r6
 80047ea:	f7ff ffbf 	bl	800476c <sbrk_aligned>
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	4604      	mov	r4, r0
 80047f2:	d158      	bne.n	80048a6 <_malloc_r+0xf6>
 80047f4:	f8d8 4000 	ldr.w	r4, [r8]
 80047f8:	4627      	mov	r7, r4
 80047fa:	2f00      	cmp	r7, #0
 80047fc:	d143      	bne.n	8004886 <_malloc_r+0xd6>
 80047fe:	2c00      	cmp	r4, #0
 8004800:	d04b      	beq.n	800489a <_malloc_r+0xea>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	4639      	mov	r1, r7
 8004806:	4630      	mov	r0, r6
 8004808:	eb04 0903 	add.w	r9, r4, r3
 800480c:	f000 fb5a 	bl	8004ec4 <_sbrk_r>
 8004810:	4581      	cmp	r9, r0
 8004812:	d142      	bne.n	800489a <_malloc_r+0xea>
 8004814:	6821      	ldr	r1, [r4, #0]
 8004816:	1a6d      	subs	r5, r5, r1
 8004818:	4629      	mov	r1, r5
 800481a:	4630      	mov	r0, r6
 800481c:	f7ff ffa6 	bl	800476c <sbrk_aligned>
 8004820:	3001      	adds	r0, #1
 8004822:	d03a      	beq.n	800489a <_malloc_r+0xea>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	442b      	add	r3, r5
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	f8d8 3000 	ldr.w	r3, [r8]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	bb62      	cbnz	r2, 800488c <_malloc_r+0xdc>
 8004832:	f8c8 7000 	str.w	r7, [r8]
 8004836:	e00f      	b.n	8004858 <_malloc_r+0xa8>
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	1b52      	subs	r2, r2, r5
 800483c:	d420      	bmi.n	8004880 <_malloc_r+0xd0>
 800483e:	2a0b      	cmp	r2, #11
 8004840:	d917      	bls.n	8004872 <_malloc_r+0xc2>
 8004842:	1961      	adds	r1, r4, r5
 8004844:	42a3      	cmp	r3, r4
 8004846:	6025      	str	r5, [r4, #0]
 8004848:	bf18      	it	ne
 800484a:	6059      	strne	r1, [r3, #4]
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	bf08      	it	eq
 8004850:	f8c8 1000 	streq.w	r1, [r8]
 8004854:	5162      	str	r2, [r4, r5]
 8004856:	604b      	str	r3, [r1, #4]
 8004858:	4630      	mov	r0, r6
 800485a:	f000 f82f 	bl	80048bc <__malloc_unlock>
 800485e:	f104 000b 	add.w	r0, r4, #11
 8004862:	1d23      	adds	r3, r4, #4
 8004864:	f020 0007 	bic.w	r0, r0, #7
 8004868:	1ac2      	subs	r2, r0, r3
 800486a:	bf1c      	itt	ne
 800486c:	1a1b      	subne	r3, r3, r0
 800486e:	50a3      	strne	r3, [r4, r2]
 8004870:	e7af      	b.n	80047d2 <_malloc_r+0x22>
 8004872:	6862      	ldr	r2, [r4, #4]
 8004874:	42a3      	cmp	r3, r4
 8004876:	bf0c      	ite	eq
 8004878:	f8c8 2000 	streq.w	r2, [r8]
 800487c:	605a      	strne	r2, [r3, #4]
 800487e:	e7eb      	b.n	8004858 <_malloc_r+0xa8>
 8004880:	4623      	mov	r3, r4
 8004882:	6864      	ldr	r4, [r4, #4]
 8004884:	e7ae      	b.n	80047e4 <_malloc_r+0x34>
 8004886:	463c      	mov	r4, r7
 8004888:	687f      	ldr	r7, [r7, #4]
 800488a:	e7b6      	b.n	80047fa <_malloc_r+0x4a>
 800488c:	461a      	mov	r2, r3
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	42a3      	cmp	r3, r4
 8004892:	d1fb      	bne.n	800488c <_malloc_r+0xdc>
 8004894:	2300      	movs	r3, #0
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	e7de      	b.n	8004858 <_malloc_r+0xa8>
 800489a:	230c      	movs	r3, #12
 800489c:	6033      	str	r3, [r6, #0]
 800489e:	4630      	mov	r0, r6
 80048a0:	f000 f80c 	bl	80048bc <__malloc_unlock>
 80048a4:	e794      	b.n	80047d0 <_malloc_r+0x20>
 80048a6:	6005      	str	r5, [r0, #0]
 80048a8:	e7d6      	b.n	8004858 <_malloc_r+0xa8>
 80048aa:	bf00      	nop
 80048ac:	20000348 	.word	0x20000348

080048b0 <__malloc_lock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__malloc_lock+0x8>)
 80048b2:	f7ff bf0f 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 80048b6:	bf00      	nop
 80048b8:	20000340 	.word	0x20000340

080048bc <__malloc_unlock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	@ (80048c4 <__malloc_unlock+0x8>)
 80048be:	f7ff bf0a 	b.w	80046d6 <__retarget_lock_release_recursive>
 80048c2:	bf00      	nop
 80048c4:	20000340 	.word	0x20000340

080048c8 <__ssputs_r>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	688e      	ldr	r6, [r1, #8]
 80048ce:	461f      	mov	r7, r3
 80048d0:	42be      	cmp	r6, r7
 80048d2:	680b      	ldr	r3, [r1, #0]
 80048d4:	4682      	mov	sl, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4690      	mov	r8, r2
 80048da:	d82d      	bhi.n	8004938 <__ssputs_r+0x70>
 80048dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048e4:	d026      	beq.n	8004934 <__ssputs_r+0x6c>
 80048e6:	6965      	ldr	r5, [r4, #20]
 80048e8:	6909      	ldr	r1, [r1, #16]
 80048ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048ee:	eba3 0901 	sub.w	r9, r3, r1
 80048f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048f6:	1c7b      	adds	r3, r7, #1
 80048f8:	444b      	add	r3, r9
 80048fa:	106d      	asrs	r5, r5, #1
 80048fc:	429d      	cmp	r5, r3
 80048fe:	bf38      	it	cc
 8004900:	461d      	movcc	r5, r3
 8004902:	0553      	lsls	r3, r2, #21
 8004904:	d527      	bpl.n	8004956 <__ssputs_r+0x8e>
 8004906:	4629      	mov	r1, r5
 8004908:	f7ff ff52 	bl	80047b0 <_malloc_r>
 800490c:	4606      	mov	r6, r0
 800490e:	b360      	cbz	r0, 800496a <__ssputs_r+0xa2>
 8004910:	6921      	ldr	r1, [r4, #16]
 8004912:	464a      	mov	r2, r9
 8004914:	f000 fae6 	bl	8004ee4 <memcpy>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800491e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	6126      	str	r6, [r4, #16]
 8004926:	6165      	str	r5, [r4, #20]
 8004928:	444e      	add	r6, r9
 800492a:	eba5 0509 	sub.w	r5, r5, r9
 800492e:	6026      	str	r6, [r4, #0]
 8004930:	60a5      	str	r5, [r4, #8]
 8004932:	463e      	mov	r6, r7
 8004934:	42be      	cmp	r6, r7
 8004936:	d900      	bls.n	800493a <__ssputs_r+0x72>
 8004938:	463e      	mov	r6, r7
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	4632      	mov	r2, r6
 800493e:	4641      	mov	r1, r8
 8004940:	f000 faa6 	bl	8004e90 <memmove>
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	1b9b      	subs	r3, r3, r6
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	4433      	add	r3, r6
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	2000      	movs	r0, #0
 8004952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004956:	462a      	mov	r2, r5
 8004958:	f000 fad2 	bl	8004f00 <_realloc_r>
 800495c:	4606      	mov	r6, r0
 800495e:	2800      	cmp	r0, #0
 8004960:	d1e0      	bne.n	8004924 <__ssputs_r+0x5c>
 8004962:	6921      	ldr	r1, [r4, #16]
 8004964:	4650      	mov	r0, sl
 8004966:	f7ff feb7 	bl	80046d8 <_free_r>
 800496a:	230c      	movs	r3, #12
 800496c:	f8ca 3000 	str.w	r3, [sl]
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e7e9      	b.n	8004952 <__ssputs_r+0x8a>
	...

08004980 <_svfiprintf_r>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	4698      	mov	r8, r3
 8004986:	898b      	ldrh	r3, [r1, #12]
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	b09d      	sub	sp, #116	@ 0x74
 800498c:	4607      	mov	r7, r0
 800498e:	460d      	mov	r5, r1
 8004990:	4614      	mov	r4, r2
 8004992:	d510      	bpl.n	80049b6 <_svfiprintf_r+0x36>
 8004994:	690b      	ldr	r3, [r1, #16]
 8004996:	b973      	cbnz	r3, 80049b6 <_svfiprintf_r+0x36>
 8004998:	2140      	movs	r1, #64	@ 0x40
 800499a:	f7ff ff09 	bl	80047b0 <_malloc_r>
 800499e:	6028      	str	r0, [r5, #0]
 80049a0:	6128      	str	r0, [r5, #16]
 80049a2:	b930      	cbnz	r0, 80049b2 <_svfiprintf_r+0x32>
 80049a4:	230c      	movs	r3, #12
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	b01d      	add	sp, #116	@ 0x74
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b2:	2340      	movs	r3, #64	@ 0x40
 80049b4:	616b      	str	r3, [r5, #20]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ba:	2320      	movs	r3, #32
 80049bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c4:	2330      	movs	r3, #48	@ 0x30
 80049c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b64 <_svfiprintf_r+0x1e4>
 80049ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ce:	f04f 0901 	mov.w	r9, #1
 80049d2:	4623      	mov	r3, r4
 80049d4:	469a      	mov	sl, r3
 80049d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049da:	b10a      	cbz	r2, 80049e0 <_svfiprintf_r+0x60>
 80049dc:	2a25      	cmp	r2, #37	@ 0x25
 80049de:	d1f9      	bne.n	80049d4 <_svfiprintf_r+0x54>
 80049e0:	ebba 0b04 	subs.w	fp, sl, r4
 80049e4:	d00b      	beq.n	80049fe <_svfiprintf_r+0x7e>
 80049e6:	465b      	mov	r3, fp
 80049e8:	4622      	mov	r2, r4
 80049ea:	4629      	mov	r1, r5
 80049ec:	4638      	mov	r0, r7
 80049ee:	f7ff ff6b 	bl	80048c8 <__ssputs_r>
 80049f2:	3001      	adds	r0, #1
 80049f4:	f000 80a7 	beq.w	8004b46 <_svfiprintf_r+0x1c6>
 80049f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049fa:	445a      	add	r2, fp
 80049fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80049fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 809f 	beq.w	8004b46 <_svfiprintf_r+0x1c6>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a12:	f10a 0a01 	add.w	sl, sl, #1
 8004a16:	9304      	str	r3, [sp, #16]
 8004a18:	9307      	str	r3, [sp, #28]
 8004a1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a20:	4654      	mov	r4, sl
 8004a22:	2205      	movs	r2, #5
 8004a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a28:	484e      	ldr	r0, [pc, #312]	@ (8004b64 <_svfiprintf_r+0x1e4>)
 8004a2a:	f7fb fbd1 	bl	80001d0 <memchr>
 8004a2e:	9a04      	ldr	r2, [sp, #16]
 8004a30:	b9d8      	cbnz	r0, 8004a6a <_svfiprintf_r+0xea>
 8004a32:	06d0      	lsls	r0, r2, #27
 8004a34:	bf44      	itt	mi
 8004a36:	2320      	movmi	r3, #32
 8004a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a3c:	0711      	lsls	r1, r2, #28
 8004a3e:	bf44      	itt	mi
 8004a40:	232b      	movmi	r3, #43	@ 0x2b
 8004a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a46:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a4c:	d015      	beq.n	8004a7a <_svfiprintf_r+0xfa>
 8004a4e:	9a07      	ldr	r2, [sp, #28]
 8004a50:	4654      	mov	r4, sl
 8004a52:	2000      	movs	r0, #0
 8004a54:	f04f 0c0a 	mov.w	ip, #10
 8004a58:	4621      	mov	r1, r4
 8004a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5e:	3b30      	subs	r3, #48	@ 0x30
 8004a60:	2b09      	cmp	r3, #9
 8004a62:	d94b      	bls.n	8004afc <_svfiprintf_r+0x17c>
 8004a64:	b1b0      	cbz	r0, 8004a94 <_svfiprintf_r+0x114>
 8004a66:	9207      	str	r2, [sp, #28]
 8004a68:	e014      	b.n	8004a94 <_svfiprintf_r+0x114>
 8004a6a:	eba0 0308 	sub.w	r3, r0, r8
 8004a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	9304      	str	r3, [sp, #16]
 8004a76:	46a2      	mov	sl, r4
 8004a78:	e7d2      	b.n	8004a20 <_svfiprintf_r+0xa0>
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	1d19      	adds	r1, r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	9103      	str	r1, [sp, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfbb      	ittet	lt
 8004a86:	425b      	neglt	r3, r3
 8004a88:	f042 0202 	orrlt.w	r2, r2, #2
 8004a8c:	9307      	strge	r3, [sp, #28]
 8004a8e:	9307      	strlt	r3, [sp, #28]
 8004a90:	bfb8      	it	lt
 8004a92:	9204      	strlt	r2, [sp, #16]
 8004a94:	7823      	ldrb	r3, [r4, #0]
 8004a96:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a98:	d10a      	bne.n	8004ab0 <_svfiprintf_r+0x130>
 8004a9a:	7863      	ldrb	r3, [r4, #1]
 8004a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a9e:	d132      	bne.n	8004b06 <_svfiprintf_r+0x186>
 8004aa0:	9b03      	ldr	r3, [sp, #12]
 8004aa2:	1d1a      	adds	r2, r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	9203      	str	r2, [sp, #12]
 8004aa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aac:	3402      	adds	r4, #2
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b74 <_svfiprintf_r+0x1f4>
 8004ab4:	7821      	ldrb	r1, [r4, #0]
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	4650      	mov	r0, sl
 8004aba:	f7fb fb89 	bl	80001d0 <memchr>
 8004abe:	b138      	cbz	r0, 8004ad0 <_svfiprintf_r+0x150>
 8004ac0:	9b04      	ldr	r3, [sp, #16]
 8004ac2:	eba0 000a 	sub.w	r0, r0, sl
 8004ac6:	2240      	movs	r2, #64	@ 0x40
 8004ac8:	4082      	lsls	r2, r0
 8004aca:	4313      	orrs	r3, r2
 8004acc:	3401      	adds	r4, #1
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	4824      	ldr	r0, [pc, #144]	@ (8004b68 <_svfiprintf_r+0x1e8>)
 8004ad6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ada:	2206      	movs	r2, #6
 8004adc:	f7fb fb78 	bl	80001d0 <memchr>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d036      	beq.n	8004b52 <_svfiprintf_r+0x1d2>
 8004ae4:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <_svfiprintf_r+0x1ec>)
 8004ae6:	bb1b      	cbnz	r3, 8004b30 <_svfiprintf_r+0x1b0>
 8004ae8:	9b03      	ldr	r3, [sp, #12]
 8004aea:	3307      	adds	r3, #7
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	3308      	adds	r3, #8
 8004af2:	9303      	str	r3, [sp, #12]
 8004af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af6:	4433      	add	r3, r6
 8004af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004afa:	e76a      	b.n	80049d2 <_svfiprintf_r+0x52>
 8004afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b00:	460c      	mov	r4, r1
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7a8      	b.n	8004a58 <_svfiprintf_r+0xd8>
 8004b06:	2300      	movs	r3, #0
 8004b08:	3401      	adds	r4, #1
 8004b0a:	9305      	str	r3, [sp, #20]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0c0a 	mov.w	ip, #10
 8004b12:	4620      	mov	r0, r4
 8004b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b18:	3a30      	subs	r2, #48	@ 0x30
 8004b1a:	2a09      	cmp	r2, #9
 8004b1c:	d903      	bls.n	8004b26 <_svfiprintf_r+0x1a6>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0c6      	beq.n	8004ab0 <_svfiprintf_r+0x130>
 8004b22:	9105      	str	r1, [sp, #20]
 8004b24:	e7c4      	b.n	8004ab0 <_svfiprintf_r+0x130>
 8004b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e7f0      	b.n	8004b12 <_svfiprintf_r+0x192>
 8004b30:	ab03      	add	r3, sp, #12
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	462a      	mov	r2, r5
 8004b36:	4b0e      	ldr	r3, [pc, #56]	@ (8004b70 <_svfiprintf_r+0x1f0>)
 8004b38:	a904      	add	r1, sp, #16
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f3af 8000 	nop.w
 8004b40:	1c42      	adds	r2, r0, #1
 8004b42:	4606      	mov	r6, r0
 8004b44:	d1d6      	bne.n	8004af4 <_svfiprintf_r+0x174>
 8004b46:	89ab      	ldrh	r3, [r5, #12]
 8004b48:	065b      	lsls	r3, r3, #25
 8004b4a:	f53f af2d 	bmi.w	80049a8 <_svfiprintf_r+0x28>
 8004b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b50:	e72c      	b.n	80049ac <_svfiprintf_r+0x2c>
 8004b52:	ab03      	add	r3, sp, #12
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	462a      	mov	r2, r5
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <_svfiprintf_r+0x1f0>)
 8004b5a:	a904      	add	r1, sp, #16
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f000 f879 	bl	8004c54 <_printf_i>
 8004b62:	e7ed      	b.n	8004b40 <_svfiprintf_r+0x1c0>
 8004b64:	08004fe8 	.word	0x08004fe8
 8004b68:	08004ff2 	.word	0x08004ff2
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	080048c9 	.word	0x080048c9
 8004b74:	08004fee 	.word	0x08004fee

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4698      	mov	r8, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	3b00      	subs	r3, #0
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c8      	blx	r9
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	bf02      	ittt	eq
 8004bea:	68e5      	ldreq	r5, [r4, #12]
 8004bec:	6833      	ldreq	r3, [r6, #0]
 8004bee:	1aed      	subeq	r5, r5, r3
 8004bf0:	68a3      	ldr	r3, [r4, #8]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4641      	mov	r1, r8
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c8      	blx	r9
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	@ 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4641      	mov	r1, r8
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c8      	blx	r9
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	7e0f      	ldrb	r7, [r1, #24]
 8004c5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c5c:	2f78      	cmp	r7, #120	@ 0x78
 8004c5e:	4691      	mov	r9, r2
 8004c60:	4680      	mov	r8, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	469a      	mov	sl, r3
 8004c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	@ 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d1 	beq.w	8004e18 <_printf_i+0x1c4>
 8004c76:	2f58      	cmp	r7, #88	@ 0x58
 8004c78:	f000 80b8 	beq.w	8004dec <_printf_i+0x198>
 8004c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c94 <_printf_i+0x40>)
 8004c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004dff 	.word	0x08004dff
 8004cc4:	08004d2b 	.word	0x08004d2b
 8004cc8:	08004db9 	.word	0x08004db9
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e21 	.word	0x08004e21
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d2b 	.word	0x08004d2b
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004dc1 	.word	0x08004dc1
 8004cec:	6833      	ldr	r3, [r6, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6032      	str	r2, [r6, #0]
 8004cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e09c      	b.n	8004e3a <_printf_i+0x1e6>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	6820      	ldr	r0, [r4, #0]
 8004d04:	1d19      	adds	r1, r3, #4
 8004d06:	6031      	str	r1, [r6, #0]
 8004d08:	0606      	lsls	r6, r0, #24
 8004d0a:	d501      	bpl.n	8004d10 <_printf_i+0xbc>
 8004d0c:	681d      	ldr	r5, [r3, #0]
 8004d0e:	e003      	b.n	8004d18 <_printf_i+0xc4>
 8004d10:	0645      	lsls	r5, r0, #25
 8004d12:	d5fb      	bpl.n	8004d0c <_printf_i+0xb8>
 8004d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	da03      	bge.n	8004d24 <_printf_i+0xd0>
 8004d1c:	232d      	movs	r3, #45	@ 0x2d
 8004d1e:	426d      	negs	r5, r5
 8004d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d24:	4858      	ldr	r0, [pc, #352]	@ (8004e88 <_printf_i+0x234>)
 8004d26:	230a      	movs	r3, #10
 8004d28:	e011      	b.n	8004d4e <_printf_i+0xfa>
 8004d2a:	6821      	ldr	r1, [r4, #0]
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	0608      	lsls	r0, r1, #24
 8004d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d34:	d402      	bmi.n	8004d3c <_printf_i+0xe8>
 8004d36:	0649      	lsls	r1, r1, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b2ad      	uxthmi	r5, r5
 8004d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d3e:	4852      	ldr	r0, [pc, #328]	@ (8004e88 <_printf_i+0x234>)
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	bf14      	ite	ne
 8004d44:	230a      	movne	r3, #10
 8004d46:	2308      	moveq	r3, #8
 8004d48:	2100      	movs	r1, #0
 8004d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d4e:	6866      	ldr	r6, [r4, #4]
 8004d50:	60a6      	str	r6, [r4, #8]
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	db05      	blt.n	8004d62 <_printf_i+0x10e>
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	432e      	orrs	r6, r5
 8004d5a:	f021 0104 	bic.w	r1, r1, #4
 8004d5e:	6021      	str	r1, [r4, #0]
 8004d60:	d04b      	beq.n	8004dfa <_printf_i+0x1a6>
 8004d62:	4616      	mov	r6, r2
 8004d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d68:	fb03 5711 	mls	r7, r3, r1, r5
 8004d6c:	5dc7      	ldrb	r7, [r0, r7]
 8004d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d72:	462f      	mov	r7, r5
 8004d74:	42bb      	cmp	r3, r7
 8004d76:	460d      	mov	r5, r1
 8004d78:	d9f4      	bls.n	8004d64 <_printf_i+0x110>
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d10b      	bne.n	8004d96 <_printf_i+0x142>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	07df      	lsls	r7, r3, #31
 8004d82:	d508      	bpl.n	8004d96 <_printf_i+0x142>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	6861      	ldr	r1, [r4, #4]
 8004d88:	4299      	cmp	r1, r3
 8004d8a:	bfde      	ittt	le
 8004d8c:	2330      	movle	r3, #48	@ 0x30
 8004d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d96:	1b92      	subs	r2, r2, r6
 8004d98:	6122      	str	r2, [r4, #16]
 8004d9a:	f8cd a000 	str.w	sl, [sp]
 8004d9e:	464b      	mov	r3, r9
 8004da0:	aa03      	add	r2, sp, #12
 8004da2:	4621      	mov	r1, r4
 8004da4:	4640      	mov	r0, r8
 8004da6:	f7ff fee7 	bl	8004b78 <_printf_common>
 8004daa:	3001      	adds	r0, #1
 8004dac:	d14a      	bne.n	8004e44 <_printf_i+0x1f0>
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	b004      	add	sp, #16
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	f043 0320 	orr.w	r3, r3, #32
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	4832      	ldr	r0, [pc, #200]	@ (8004e8c <_printf_i+0x238>)
 8004dc2:	2778      	movs	r7, #120	@ 0x78
 8004dc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	6831      	ldr	r1, [r6, #0]
 8004dcc:	061f      	lsls	r7, r3, #24
 8004dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dd2:	d402      	bmi.n	8004dda <_printf_i+0x186>
 8004dd4:	065f      	lsls	r7, r3, #25
 8004dd6:	bf48      	it	mi
 8004dd8:	b2ad      	uxthmi	r5, r5
 8004dda:	6031      	str	r1, [r6, #0]
 8004ddc:	07d9      	lsls	r1, r3, #31
 8004dde:	bf44      	itt	mi
 8004de0:	f043 0320 	orrmi.w	r3, r3, #32
 8004de4:	6023      	strmi	r3, [r4, #0]
 8004de6:	b11d      	cbz	r5, 8004df0 <_printf_i+0x19c>
 8004de8:	2310      	movs	r3, #16
 8004dea:	e7ad      	b.n	8004d48 <_printf_i+0xf4>
 8004dec:	4826      	ldr	r0, [pc, #152]	@ (8004e88 <_printf_i+0x234>)
 8004dee:	e7e9      	b.n	8004dc4 <_printf_i+0x170>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f023 0320 	bic.w	r3, r3, #32
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	e7f6      	b.n	8004de8 <_printf_i+0x194>
 8004dfa:	4616      	mov	r6, r2
 8004dfc:	e7bd      	b.n	8004d7a <_printf_i+0x126>
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	6825      	ldr	r5, [r4, #0]
 8004e02:	6961      	ldr	r1, [r4, #20]
 8004e04:	1d18      	adds	r0, r3, #4
 8004e06:	6030      	str	r0, [r6, #0]
 8004e08:	062e      	lsls	r6, r5, #24
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	d501      	bpl.n	8004e12 <_printf_i+0x1be>
 8004e0e:	6019      	str	r1, [r3, #0]
 8004e10:	e002      	b.n	8004e18 <_printf_i+0x1c4>
 8004e12:	0668      	lsls	r0, r5, #25
 8004e14:	d5fb      	bpl.n	8004e0e <_printf_i+0x1ba>
 8004e16:	8019      	strh	r1, [r3, #0]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6123      	str	r3, [r4, #16]
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	e7bc      	b.n	8004d9a <_printf_i+0x146>
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	1d1a      	adds	r2, r3, #4
 8004e24:	6032      	str	r2, [r6, #0]
 8004e26:	681e      	ldr	r6, [r3, #0]
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7fb f9cf 	bl	80001d0 <memchr>
 8004e32:	b108      	cbz	r0, 8004e38 <_printf_i+0x1e4>
 8004e34:	1b80      	subs	r0, r0, r6
 8004e36:	6060      	str	r0, [r4, #4]
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e42:	e7aa      	b.n	8004d9a <_printf_i+0x146>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	4632      	mov	r2, r6
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	47d0      	blx	sl
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d0ad      	beq.n	8004dae <_printf_i+0x15a>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	079b      	lsls	r3, r3, #30
 8004e56:	d413      	bmi.n	8004e80 <_printf_i+0x22c>
 8004e58:	68e0      	ldr	r0, [r4, #12]
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	4298      	cmp	r0, r3
 8004e5e:	bfb8      	it	lt
 8004e60:	4618      	movlt	r0, r3
 8004e62:	e7a6      	b.n	8004db2 <_printf_i+0x15e>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4632      	mov	r2, r6
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	47d0      	blx	sl
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d09d      	beq.n	8004dae <_printf_i+0x15a>
 8004e72:	3501      	adds	r5, #1
 8004e74:	68e3      	ldr	r3, [r4, #12]
 8004e76:	9903      	ldr	r1, [sp, #12]
 8004e78:	1a5b      	subs	r3, r3, r1
 8004e7a:	42ab      	cmp	r3, r5
 8004e7c:	dcf2      	bgt.n	8004e64 <_printf_i+0x210>
 8004e7e:	e7eb      	b.n	8004e58 <_printf_i+0x204>
 8004e80:	2500      	movs	r5, #0
 8004e82:	f104 0619 	add.w	r6, r4, #25
 8004e86:	e7f5      	b.n	8004e74 <_printf_i+0x220>
 8004e88:	08004ff9 	.word	0x08004ff9
 8004e8c:	0800500a 	.word	0x0800500a

08004e90 <memmove>:
 8004e90:	4288      	cmp	r0, r1
 8004e92:	b510      	push	{r4, lr}
 8004e94:	eb01 0402 	add.w	r4, r1, r2
 8004e98:	d902      	bls.n	8004ea0 <memmove+0x10>
 8004e9a:	4284      	cmp	r4, r0
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	d807      	bhi.n	8004eb0 <memmove+0x20>
 8004ea0:	1e43      	subs	r3, r0, #1
 8004ea2:	42a1      	cmp	r1, r4
 8004ea4:	d008      	beq.n	8004eb8 <memmove+0x28>
 8004ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eae:	e7f8      	b.n	8004ea2 <memmove+0x12>
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	428a      	cmp	r2, r1
 8004eb6:	d100      	bne.n	8004eba <memmove+0x2a>
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ec2:	e7f7      	b.n	8004eb4 <memmove+0x24>

08004ec4 <_sbrk_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d06      	ldr	r5, [pc, #24]	@ (8004ee0 <_sbrk_r+0x1c>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	602b      	str	r3, [r5, #0]
 8004ed0:	f7fc f8e6 	bl	80010a0 <_sbrk>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_sbrk_r+0x1a>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_sbrk_r+0x1a>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	2000033c 	.word	0x2000033c

08004ee4 <memcpy>:
 8004ee4:	440a      	add	r2, r1
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eec:	d100      	bne.n	8004ef0 <memcpy+0xc>
 8004eee:	4770      	bx	lr
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004efa:	4291      	cmp	r1, r2
 8004efc:	d1f9      	bne.n	8004ef2 <memcpy+0xe>
 8004efe:	bd10      	pop	{r4, pc}

08004f00 <_realloc_r>:
 8004f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f04:	4607      	mov	r7, r0
 8004f06:	4614      	mov	r4, r2
 8004f08:	460d      	mov	r5, r1
 8004f0a:	b921      	cbnz	r1, 8004f16 <_realloc_r+0x16>
 8004f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	4611      	mov	r1, r2
 8004f12:	f7ff bc4d 	b.w	80047b0 <_malloc_r>
 8004f16:	b92a      	cbnz	r2, 8004f24 <_realloc_r+0x24>
 8004f18:	f7ff fbde 	bl	80046d8 <_free_r>
 8004f1c:	4625      	mov	r5, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f24:	f000 f81a 	bl	8004f5c <_malloc_usable_size_r>
 8004f28:	4284      	cmp	r4, r0
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	d802      	bhi.n	8004f34 <_realloc_r+0x34>
 8004f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f32:	d8f4      	bhi.n	8004f1e <_realloc_r+0x1e>
 8004f34:	4621      	mov	r1, r4
 8004f36:	4638      	mov	r0, r7
 8004f38:	f7ff fc3a 	bl	80047b0 <_malloc_r>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	b908      	cbnz	r0, 8004f44 <_realloc_r+0x44>
 8004f40:	4645      	mov	r5, r8
 8004f42:	e7ec      	b.n	8004f1e <_realloc_r+0x1e>
 8004f44:	42b4      	cmp	r4, r6
 8004f46:	4622      	mov	r2, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	bf28      	it	cs
 8004f4c:	4632      	movcs	r2, r6
 8004f4e:	f7ff ffc9 	bl	8004ee4 <memcpy>
 8004f52:	4629      	mov	r1, r5
 8004f54:	4638      	mov	r0, r7
 8004f56:	f7ff fbbf 	bl	80046d8 <_free_r>
 8004f5a:	e7f1      	b.n	8004f40 <_realloc_r+0x40>

08004f5c <_malloc_usable_size_r>:
 8004f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f60:	1f18      	subs	r0, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfbc      	itt	lt
 8004f66:	580b      	ldrlt	r3, [r1, r0]
 8004f68:	18c0      	addlt	r0, r0, r3
 8004f6a:	4770      	bx	lr

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
